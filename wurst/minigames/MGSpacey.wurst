package MGSpacey
import Minigame
import PlayerData
import Assets
import KeyUtils
import ChannelAbilityPreset
import Projectile
import ReviveManager

constant ARENA_POS = vec2(-2700, 7500)

public class MGSpacey extends Minigame
	static constant ships = new LinkedList<Spaceship>()
	static constant rocks = new LinkedList<SpaceRock>()
	EventListener listener
	EventListener klistener

	override function getGameRect() returns rect
		return gg_rct_spaceygamearea

	override function getCamBounds() returns rect
		return gg_rct_spaceygamebounds

	override function onBegin()
		for pd in escaperPlayers
			if not pd.escaper.alive
				forceRevive(pd.escaper)
			printTimedToPlayer("Use Arrowkeys and Escape to control your spacecraft.", 15., pd.p)
			ships.add(new Spaceship(ARENA_POS+vec2(ships.size()*16.,0), pd.escaper))

		listener = EventListener.add(EVENT_PLAYER_END_CINEMATIC, (() -> begin
			for ship in ships
				if ship.owner == GetTriggerPlayer()
					ship.shoot()
					break
		end))

		klistener = addKeyListener((() -> begin
			for ship in ships
				if ship.owner == GetTriggerPlayer()
					ship.update()
					break
		end))

		for i = 0 to 2
			new SpaceRock(ARENA_POS.polarOffset((90+GetRandomReal(-45, 45)).fromDeg(), GetRandomReal(256, 480)), vec2(GetRandomReal(-2, 2), GetRandomReal(-2, 2)), 4)

	override function onEnd()
		for ship in ships
			if localPlayer == ship.owner
				ResetToGameCamera(0.5)
			ship.terminate()
		ships.clear()
		for rock in rocks
			rock.terminate()
		rocks.clear()

		destroy listener
		removeKeyListener(klistener)

	override function getStartPosition() returns vec2
		return getGameRect().getCenter()

	override function getName() returns string
		return "|cff3322e2Spacey Adventure"

// constant minigame = new MGSpacey()

init
	// minigames.add(minigame)


constant SHIP_ID = compiletime(ABIL_ID_GEN.next())

class ShipProjectile extends Projectile
	Spaceship ship

	construct(Spaceship ship)
		super(ship.getPos().toVec2().polarOffset(ship.actor.getFacingAngle(), 16).withZ(32), 16., ship.owner, ship.actor.getFacingAngle(), "TCSlashProj.mdx")
		fx.setColor(fromPlayerColor(owner.getColor()).withAlpha(255))
		setSpeed(10)
		vel += ship.vel
		this.ship = ship

	override function update()
		super.update()
		if not gg_rct_spaceygamearea.contains(pos.toVec2())
			terminate()
		else 
			let itr = MGSpacey.rocks.staticItr()
			for rock from itr
				if this.pos.distanceTo2dSq(rock.pos.toVec2()) < (28.).squared() + rock.radiusSq
					rock.hp--
					if rock.hp <= 0
						rock.terminate()
						itr.remove()
					this.terminate()
					break

	ondestroy
		ship.projectiles.remove(this)

public class Spaceship extends UnitEntity
	real maxSpeed = 12
	real acc = 0
	angle xyAngle = angle(0)
	var projectiles = new LinkedList<ShipProjectile>
	Escaper mounter

	construct(vec2 pos, Escaper mounter)
		super(createUnit(mounter.owner, SHIP_ID, pos, angle(0)))
		this.mounter = mounter
		actor.addAbility(LOCUST_ID)
		mounter.actor..pause()..hide()
		setPos(this.pos+vec3(0,0,32))
		sleeps = false

	function shoot()
		if active and projectiles.size() < 4
			projectiles.add(new ShipProjectile(this))


	function foo()
		let downKeys = owner.getDownKeys()
		acc = acc.lerp(0,0.1)
		if downKeys.left
			xyAngle += angle(0.125)
		if downKeys.right
			xyAngle -= angle(0.125)
		actor.setFacing(xyAngle)
		if localPlayer == owner
			CameraSetupApplyForceDuration(gg_cam_spaceycam, true, 0.)
		if downKeys.up
			acc = acc.lerp(1, 0.2)

	override function update()
		foo()
		vel += (xyAngle).toVec(acc)
		vel *= 0.955
		let lgSq = vel.lengthSquared()
		if lgSq > maxSpeed.squared()
			vel = vel.setLength(maxSpeed)

		let tpos = pos + vel*6.
		if tpos.x  < gg_rct_spaceygamearea.getMinX()
			vel.x = -1.5*vel.x
		else if tpos.x > gg_rct_spaceygamearea.getMaxX()
			vel.x = -1.5*vel.x
		if tpos.y < gg_rct_spaceygamearea.getMinY()
			vel.y = -1.5*vel.y
		else if tpos.y > gg_rct_spaceygamearea.getMaxY()
			vel.y = -1.5*vel.y

		super.update()

		let itr = MGSpacey.rocks.staticItr()
		for rock from itr
			if this.pos.distanceTo2dSq(rock.pos.toVec2()) < 30*30 + rock.radiusSq
				rock.terminate()
				itr.remove()
				actor.setAnimation("death")
				deactivate()
				var isEnd = true
				for ship in MGSpacey.ships
					if ship.active
						isEnd = false
						break
				if isEnd
					// minigame.reset()
				break

		

	ondestroy
		if mounter.actor.isAlive()
			mounter.actor..unpause()..show()
			mounter.kill(this)

function getRockAsset(int level) returns string
	switch level
		case 4
			return Abilities.ancientProtectorMissile
		case 3
			return Abilities.demolisherMissile
		case 2
			return Abilities.rockBoltMissile
		case 1
			return Abilities.makuraMissile
	return ""

public class SpaceRock extends FxEntity
	int level
	int hp
	real radiusSq

	construct(vec2 position, vec2 velocity, int level)
		super(STAFF_PLAYER, position.withZ(48), velocity.getAngle(), getRockAsset(level))
		fx..setScale(1+level*0.25)
		radiusSq = (26 + level*6.).squared()
		this.vel = (velocity * ((5-level)*1.15)).toVec3()
		this.level = level
		hp = level
		sleeps = false
		MGSpacey.rocks.add(this)

	override function update()
		let tpos = pos + vel*6.
		if tpos.x  < gg_rct_spaceygamearea.getMinX()
			vel.x = -vel.x
		else if tpos.x > gg_rct_spaceygamearea.getMaxX()
			vel.x = -vel.x
		if tpos.y < gg_rct_spaceygamearea.getMinY()
			vel.y = -vel.y
		else if tpos.y > gg_rct_spaceygamearea.getMaxY()
			vel.y = -vel.y

		pos+=vel
		fx.setXYAngle(vel.toVec2().getAngle())
		super.update()

	ondestroy
		if level > 1
			for i = 0 to 2
				new SpaceRock(pos.toVec2(), vec2(GetRandomReal(-2, 2), GetRandomReal(-2, 2)), level-1)
	

@objectgen function genObjs()
	new UnitDefinition(SHIP_ID, 'hgry')
		..setName("Spaceship")
		..setModelFile("Onslaught.mdx")
		..setMovementHeight(64)
		..setMovementHeightMinimum(16)
		..setNormalAbilities("")
		..setHitPointsMaximumBase(100000000)
		..setManaMaximum(0)
		..setCollisionSize(0)
		..setScalingValue(0.25)