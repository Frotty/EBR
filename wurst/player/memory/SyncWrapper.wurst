package SyncWrapper
import FileIO
import Table

public function getSyncedData() returns SyncData
	return GetSyncedData() castTo SyncData

public class SyncData
	int vjassId = 0
	player p

	construct(player p)
		this.p = p
		vjassId = s__SyncData_create(p)

	function addString(string str, int length)
		s__SyncData_addString(vjassId, str, length)

	function addBool(boolean b)
		s__SyncData_addBool(vjassId, b)

	function addInt(int i)
		s__SyncData_addInt(vjassId, i)

	function readString(int index) returns string
		return s__SyncData_readString(vjassId, index)

	function hasString(int index) returns boolean
		return s__SyncData_hasString(vjassId, index)

	function readBool(int index) returns boolean
		return s__SyncData_readBool(vjassId, index)

	function readInt(int index) returns int
		return s__SyncData_readInt(vjassId, index)

	function addEventListener(code listener)
		s__SyncData_addEventListener(vjassId, listener)

	function start()
		s__SyncData_start(vjassId)

	ondestroy
		s__SyncData_destroy(vjassId)
		vjassId = 0

constant ALPHABET = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~`"
public class SyncedFile
	int size
	int readpos
	Table stringTable = new Table()

	construct(SyncData content)
		size = 0
		var str = content.readString(size)
		while str != null and str.length() > 0
			if not ALPHABET.contains(str.substring(str.length()-1, str.length()))
				str = str.substring(0, str.length()-1)
			stringTable.saveString(size, str)
			size++
			str = content.readString(size)
		readpos = size
		
	function hasNext() returns boolean
		return readpos > 0
		
	function read() returns string
		readpos--
		return stringTable.loadString(readpos)
		

	
