package SyncWrapper
import MultifileIO
import Table
import initlater PlayerData
import public Network

public constant ALPHABET = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
			
abstract class SyncedFileCallback
	abstract function run(SyncedFile result, PlayerData pd)

public function getSyncedFile(PlayerData pd, string filename, SyncedFileCallback cb)
	let reader = new FileReader(filename, false)
	let network = new Network(pd.p)
	let buffer = network.getData()
	let file = new SyncedFile()
	let synchronizer = new SimpleSynchronizer()
	Log.debug("onStart")
	if localPlayer == pd.p
		reader.load() status ->
			Log.debug("onLoaded")
			if status == FileLoadStatus.SUCCESS
				Log.debug("is Success")
				
				while reader.canRead()
					let line = reader.readLine()
					buffer.writeString(line)

				synchronizer.sync()
	else
		synchronizer.sync()

	synchronizer.onSynced() ->
		Log.debug("start sync")
		network.start() (status, buffer) ->
			Log.debug("OnLCSync3")
			cb.run(file..deserialize(buffer), pd)


var trig = CreateTrigger()
function filterfunc.evaluate()
	trig..addCondition(this)
	..evaluate()
	..clearConditions()

public class SyncedFile implements BufferSerializable
	int size
	int readpos = -1
	Table stringTable = new Table()

	override function serialize(Buffer buffer)

	override function deserialize(Buffer buffer)
		size = 0
		if buffer != null and buffer.isReadable() and buffer.isValid() and buffer.getFailure() == BufferFailureMode.NONE
			try() ->	
				var str = buffer.readString().trim()
				Log.debug("buffer.readString(): " + str)
				if not ALPHABET.contains(str.substring(str.length()-1, str.length()))
					str = str.substring(0, str.length()-1)
				
				int i = 0
				while str.length() > i+4
					var countS = str.substring(i, i+4)
					while countS.charAt(0) == "0"
						countS = countS.substring(1)
					let count = countS.toInt()
					var sub = str.substring(i+4, i+4 + count)
					Log.debug("count: " + count.toString() + " countS: " + countS + " sub: " + sub)
					if sub != null and sub.length() > 0
						stringTable.saveString(size, sub)
						size++
					i += 4 + count
			
		
	function hasNext() returns boolean
		return readpos < size
		
	function read() returns string
		readpos++
		return stringTable.loadString(readpos)

	ondestroy
		destroy stringTable
		
@Test function foo()
	let s = "0011-12345678901"
	let ss = s.substring(0, 4)
	ss.assertEquals("0011")
