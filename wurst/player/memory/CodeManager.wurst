package CodeManager
import initlater  PlayerData
import CodeGenerator
import FileIO
import SyncWrapper
import PlayerMemoryData
import Playerfile
import initlater PickSystem

constant XPMAX = 500000
public constant FOLDER_NAME = "GameData\\EBR"
constant FILE_NAME = "playerdata"
public constant MSG_PREFIX = "|cffDE7B19Save/Load|r :"
constant saveTechnique = 331


int pdPointer = -1
public function doSequentialSync()
	pdPointer++
	if pData[pdPointer] != null
		checkLocalFiles(pData[pdPointer])
	else
		doSequentialSync()


int pdCount = -1
public function onPlayerSynced()
	pdCount--
	if pdCount == 0
		onAllLocalSynced()
	else
		doSequentialSync()

boolean hasAll = false
function onAllLocalSynced()
	if not hasAll
		hasAll = true
		startChoose()

/** Checks if the player's localfiles are enabled
	If they are enabled, searches for a profile */
public function checkLocalFiles(PlayerData pd)
	if pdCount < 0
		pdCount = allPlayers.getSize()
	printTimed("Checking localfiles for: " + pd.name, 25)
	if not pd.localFilesEnabled
		let sd = new SyncData(pd.p)
		sd.addBool(File.isEnabled())
		sd.addEventListener(Filter(() -> onLocalFilesSynced()))
		sd.start()

function onLocalFilesSynced()
	let pdc = pData[getSyncedData().p.getId()]
	pdc.localFilesEnabled = getSyncedData().readBool(0)
	destroy getSyncedData()
	
	if pdc.localFilesEnabled
		printTimedToPlayer("You have |cffFFCC00local files enabled|r and will be able to save data!", 25, pdc.p)
	else
		printTimedToPlayer("You have |cffDE5A21local files disabled|r. You need to enabale it in order to save stuff!", 15, pdc.p)

	pdc.localFilesChecked = true
	onPlayerSynced()


/** Load and sync playerfile */
public function checkPlayerfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "check playerfile")
	if pd.localFilesEnabled
		getSyncedFile(pd, FILE_NAME, Filter(() -> onFileSynced()))

function onFileSynced()
	let pdc = pData[getSyncedData().p.getId()]
	printLog(Loglevel.DEBUG, "on PFCodeManager " + (pdc.syncPayload.syncedFile == null).toString())
	let file = pdc.syncPayload.syncedFile
	let token = file.read()
	printLog(Loglevel.DEBUG, "on PFCodeManager 2 <" + token + ">")
	if token == null
		printTimed("Creating new |cffFFCC00valid savefile.|r", 25)
		// A new file was created
		printLog(Loglevel.DEBUG, "New Playerfile1")
		createNewPlayerfile(pdc)
		destroy pdc.syncPayload	
		pdc.syncPayload = null
		printLog(Loglevel.DEBUG, "New Playerfile2")
		checkPlayerfile(pdc)
		printLog(Loglevel.DEBUG, "New Playerfile3")
	else if Playerfile.verify(token)
		printTimed("Found a |cffFFCC00valid savefile.|r", 25)
		let pf = new Playerfile()
		pf.load(file)
		pdc.pfile = pf
		for pmd in pf.pmDatas
			printLog(Loglevel.DEBUG, "pdchash: " + pdc.hash + " loaded hash: " + pmd.namehash )
			if pmd.namehash == pdc.hash
				printTimedToPlayer("Found a profile for |cffFFCC00" + pdc.name + "|r", 25, pdc.p)
				loadPlayerMemory(pdc, pmd)
				destroy pdc.syncPayload	
				pdc.syncPayload = null
				return

		// Savedata exists, but no profile for that name
		printTimedToPlayer("Didn't find a profile for |cffFFCC00" + pdc.name + "|r - creating new..", 25, pdc.p)
		addPlayerProfile(pdc)
		loadPlayerMemory(pdc, pdc.pmdata)
		destroy pdc.syncPayload	
		pdc.syncPayload = null

	
	

function loadPlayerMemory(PlayerData pd, PMData pmd)
	var scode = new Savecode()
	if scode.load(pd.name, pmd.expcode, saveTechnique)
		printLog(Loglevel.DEBUG, "load success")
		let xp = scode.decode(XPMAX)
		DisplayTextToPlayer(pd.p,0,0,MSG_PREFIX + "|cff73CE4A[Success]|r - Your Character has been loaded. (" + xp.toString() + ")" )
		pd.pmdata = pmd
		pd.validateAdmintoken()
		pd.setXp(xp)
	else
		printLog(Loglevel.ERROR, "load failed! your savefile is outdated or broken.")
	destroy scode

function addPlayerProfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "addPlayerProfile1")
	let pmdata = new PMData()
	var scode = new Savecode()
	scode.encode(pd.XP, XPMAX)
	pmdata.namehash = pd.hash
	pmdata.setXP(scode.save(pd.name, saveTechnique))
	pmdata.adminToken = "no"
	pd.pmdata = pmdata
	destroy scode

	pd.pfile.pmDatas.add(pmdata)
	printLog(Loglevel.DEBUG, "addPlayerProfile2")
	savePlayerfile(pd)
	printTimedToPlayer("|cffFFCC00Profile|r created!", 25, pd.p)

public function savePlayerfile(PlayerData pd)
	var scode = new Savecode()
	scode.encode(pd.XP, XPMAX)
	pd.pmdata.setXP(scode.save(pd.name, saveTechnique))
	destroy scode
	if GetLocalPlayer() == pd.p
		let file = File.open(FOLDER_NAME, FILE_NAME, Mode.WRITE)
		pd.pfile.save(file)
		file.close()
	
function createNewPlayerfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "createNewPlayerfile0")
	pd.pfile = new Playerfile()
	printLog(Loglevel.DEBUG, "createNewPlayerfile1")
	addPlayerProfile(pd)
	printLog(Loglevel.DEBUG, "createNewPlayerfile2")
	destroy pd.pfile
	printLog(Loglevel.DEBUG, "createNewPlayerfile3")
	pd.pfile = null
	printLog(Loglevel.DEBUG, "createNewPlayerfile4")
	pd.pmdata = null

