package CodeManager
import initlater  PlayerData
import CodeGenerator
import FileIO
import SyncWrapper
import PlayerMemoryData
import Thread
import Playerfile

constant XPMAX = 500000
constant FOLDER_NAME = "EBR"
constant FILE_NAME = "playerdata"
public constant MSG_PREFIX = "|cffDE7B19Save/Load|r :"
constant saveTechnique = 331



public function checkLocalFiles(PlayerData pd)
	if not pd.localFilesEnabled
		let sd = new SyncData(pd.p)
		sd.addBool(File.isEnabled())

		sd.addEventListener(() -> begin
			let pdc = pData[getSyncedData().p.getId()]
			pdc.localFilesEnabled = getSyncedData().readBool(0)
			destroy getSyncedData()

			
			if pdc.localFilesEnabled
				printTimedToPlayer("You have |cffFFCC00local files enabled|r and will be able to save data!", 15, pdc.p)
				checkPlayerfile(pdc)
			else
				printTimedToPlayer("You have |cffDE5A21local files disabled|r. You need to in order to save stuff!", 15, pdc.p)
		end)

		sd.start()


public function checkPlayerfile(PlayerData pd)
	if pd.localFilesEnabled
		if GetLocalPlayer() == pd.p
			let file = File.open(FOLDER_NAME, FILE_NAME, Flag.READ)
			let start = file.read()
			printTimed(start, 15)
			if Playerfile.verify(start)
				printTimed("Found a |cffFFCC00valid savefile.|r", 15)
				let pf = new Playerfile()
				pf.load(file)	
			else
				file.close()
				printTimed("|cffFFCC00No savefile found|r. Creating new..", 15)
				createPlayerfile(pd)

function loadPlayerfile(File file)
	string array lines
	var linecount = 0
	var line = file.read()
	while line != null and line.length() > 0
		lines[linecount] = line
		line = file.read()
		linecount++

	file.close()
	print("Loaded (" + linecount.toString() + ") lines of savedata")

function createPlayerfile(PlayerData pd)
	let file = File.open(FOLDER_NAME, FILE_NAME, Flag.WRITE)
	let pfile = new Playerfile()
	let pmdata = new PMData()
	var scode = new Savecode()
	scode.encode(pd.XP, XPMAX)
	pmdata.namehash = pd.name.getHash().toString()
	pmdata.expcode = scode.save(pd.p, saveTechnique)
	pmdata.adminToken = "no"
	pfile.pmDatas = new LinkedList<PMData>()
	pfile.pmDatas.add(pmdata)
	pfile.save(file)

	file.close()


// public function PlayerData.createNewPlayerFile()
// 	var scode = new Savecode()
// 	scode.encode(this.XP, XPMAX)
// 	printLog(Loglevel.DEBUG, "saving: " + this.XP.toString() + " XP")
// 	let lcode = 
// 	if this.pmData == null
// 		this.pmData = new PMData()
// 		this.pmData.namehash = fhash(this.name).toString()
// 	this.pmData.expcode = lcode
// 	printLog(Loglevel.DEBUG, "saving: " + lcode)
// 	synchronizeThread()
// 	if GetLocalPlayer() == this.p
// 		if File.isEnabled()
// 			var f = File.open(FOLDER_NAME, FILE_NAME, Flag.WRITE)
// 			f.write(this.pmData.serialize())
// 			f.close()
// 	printLog(Loglevel.DEBUG, "saved new")
				
public function PlayerData.loadPlayerFile()
	DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - Will now check for saved data."  )
	string array lines
	var count = 0
	let nameHash = fhash(this.name).toString()
	if GetLocalPlayer() == this.p
		var f = File.open(FOLDER_NAME, FILE_NAME, Flag.READ)
		lines[count] = f.read()
		while lines[count] != null
			count++
			lines[count] = f.read()
		f.close()		
	
	// let sCount = count.sync(this.p)
	// string array sLines
	// printLog(Loglevel.DEBUG, sCount.toString())
	// if sCount > 0
	// 	for i = 0 to sCount-1
	// 		sLines[i] = lines[i].sync(this.p)
	// 		printLog(Loglevel.DEBUG, sLines[i])
	// printLog(Loglevel.DEBUG, "syncing for " + this.id.toString() + " done")
	// DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - Your Data was loaded."  )
	// int idx = - 1
	// PMData data = null
	// for i = 0 to sCount-1
	// 	if sLines[i].startsWith(nameHash)
	// 		printLog(Loglevel.DEBUG, "character Found in Line " + i.toString())
	// 		DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - Your saved Character has been found." )
	// 		idx = i
	// 		data = new PMData()
	// 		data.namehash = nameHash
	// 		break
	// 	else if sLines[i].startsWith("name")
	// 		data = new PMData()
	// 		data.deserialize(sLines[i])
	// 		if data.namehash == nameHash
	// 			printLog(Loglevel.DEBUG, "character Found in Line " + i.toString())
	// 			DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - Your saved Character has been found." )
	// 			idx = i
	// 			break
			
	// if idx > -1 and data != null
	// 	this.pmData = data
	// 	if data.expcode == null
	// 		data.expcode = sLines[idx].substring(nameHash.length(), sLines[idx].length())
	// 	var scode = new Savecode()
	// 	if scode.load(this.p, data.expcode, saveTechnique)
	// 		printLog(Loglevel.DEBUG, "load success")
	// 		let xp = scode.decode(XPMAX)
	// 		DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cff73CE4A[Success]|r - Your Character has been loaded. (" + xp.toString() + ")" )
	// 		this.setXp(xp)
	// 	else
	// 		DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffBD1910[Error]|r - Your saved Character was invalid, a new one got created."  )
	// 		DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - You either have an old code-version or this is an EBR-Bug."  )
	// 		DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - To report a bug go to sunayama.de or tinyurl.com/EscapeBuilder."  )
			
	// else
	// 	DisplayTextToPlayer(this.p,0,0,MSG_PREFIX + "|cffFFD621[Info]|r - You have no saved Character with this name, a new one was created."  )
	// 	this.createNewPlayerFile()

	// this.updateRank()
	
