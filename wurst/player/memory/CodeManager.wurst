package CodeManager
import initlater  PlayerData
import CodeGenerator
import FileIO
import SyncWrapper
import RegisterEvents
import PlayerMemoryData
import Playerfile
import initlater PickSystem
import GuardedWorker

constant XPMAX = 500000
constant FILE_NAME = "ebrprofile.pld"
public constant MSG_PREFIX = "|cffDE7B19Save/Load|r :"
constant saveTechnique = 331

public function doSequentialSync()
	for pd in allPlayers
		postTask(new CheckPlayerLocalFilesTask(pd))

class CheckPlayerLocalFilesTask extends GTask
	PlayerData pd

	construct(PlayerData pd)
		this.pd = pd
		
	override function onStart()
		if not pd.localFilesChecked
			let network = new Network(pd.p)
			Log.info("is Enabled?: " + File.isEnabled().toString())
			if localPlayer == pd.p
				let buffer = network.getData()
				buffer.writeBoolean(File.isEnabled()) // assuming you implement Serializable for your data? easiest way to do it

			network.start((Buffer buffer) -> begin
				pd.localFilesEnabled = buffer.readBoolean()
				Log.info("is Enabled Synced?: " + pd.localFilesEnabled.toString())
				if pd.localFilesEnabled
					printTimedToPlayer("You have |cffFFCC00local files enabled|r and will be able to save data!", 25, pd.p)
				else
					printTimedToPlayer("You have |cffDE5A21local files disabled|r. You need to enabale it in order to save stuff!", 15, pd.p)

				pd.localFilesChecked = true
				getCurrentTask().finish(false)
			end)
		else
			finish(true)

	override function onUpdate()

	override function onFinish()
		Log.debug("Sync Task Finished")
		if state == TaskState.TIMEOUT
			Log.error("Sync Task Errored")
		else if state == TaskState.FINISHED
			Log.debug("Sync Task Finished")
		if taskQueue.getSize() == 0
			startChoose()


init
	registerPlayerEvent(EVENT_PLAYER_ARROW_DOWN_DOWN, () -> begin
        let sender = GetTriggerPlayer()
        let network = new Network(sender)

        if localPlayer == sender
            let buf = network.getData()
            buf.writeInt(1)
            buf.writeReal(3.14)
            buf.writeBoolean(true)
            buf.writeString("abcdef")

        network.start((Buffer buffer) -> begin
            print(buffer.readInt())
            print(buffer.readReal())
            print(buffer.readBoolean())
            print(buffer.readString())
        end)
    end)


/** Load and sync playerfile */
public function checkPlayerfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "check playerfile")
	if pd.localFilesEnabled
		getSyncedFile(pd, FILE_NAME, Filter(() -> onFileSynced()))

function onFileSynced()
	let syncTask = getSyncFileTask()
	if syncTask.state == TaskState.FINISHED
		let syncedFile = syncTask.file
		let token = syncedFile.read()
		printLog(Loglevel.DEBUG, "on PFCodeManager 2 <" + token + ">")
		if token == null
			// if not pdc.syncPayload.fileName.startsWith("Logs\\")
			// 	destroy pdc.syncPayload	
			// 	pdc.syncPayload = null
			// 	nullTimer(() -> getSyncedFile(pdc, "Logs\\" + FILE_NAME, Filter(() -> onFileSynced())))
			// 	return
			printTimed("Creating new |cffFFCC00valid savefile.|r", 25)
			// A new file was created
			printLog(Loglevel.DEBUG, "New Playerfile1")
			createNewPlayerfile(syncTask.pd)
			printLog(Loglevel.DEBUG, "New Playerfile2")
			checkPlayerfile(syncTask.pd)
			printLog(Loglevel.DEBUG, "New Playerfile3")
		else if Playerfile.verify(token)
			printTimedToPlayer("Found a |cffFFCC00valid savefile.|r", 25, syncTask.pd.p)
			let pf = new Playerfile()
			pf.load(syncedFile)
			syncTask.pd.pfile = pf
			for pmd in pf.pmDatas
				printLog(Loglevel.DEBUG, "pdchash: " + syncTask.pd.hash + " loaded hash: " + pmd.namehash )
				if pmd.namehash == syncTask.pd.hash
					printTimedToPlayer("Found a profile for |cffFFCC00" + syncTask.pd.name + "|r", 25, syncTask.pd.p)
					loadPlayerMemory(syncTask.pd, pmd)
					return

		// Savedata exists, but no profile for that name
		printTimedToPlayer("Didn't find a profile for |cffFFCC00" + syncTask.pd.name + "|r - creating new..", 25, syncTask.pd.p)
		addPlayerProfile(syncTask.pd)
		loadPlayerMemory(syncTask.pd, syncTask.pd.pmdata)
	

function loadPlayerMemory(PlayerData pd, PMData pmd)
	var scode = new Savecode()
	if scode.load(pd.name, pmd.expcode, saveTechnique)
		printLog(Loglevel.DEBUG, "load success")
		let xp = scode.decode(XPMAX)
		DisplayTextToPlayer(pd.p,0,0,MSG_PREFIX + "|cff73CE4A[Success]|r - Your Character has been loaded. (" + xp.toString() + ")" )
		pd.pmdata = pmd
		pd.validateAdmintoken()
		pd.setXp(xp)
	else
		printLog(Loglevel.ERROR, "load failed! your savefile is outdated or broken.")
	destroy scode

function addPlayerProfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "addPlayerProfile1")
	let pmdata = new PMData()
	var scode = new Savecode()
	scode.encode(pd.XP, XPMAX)
	pmdata.namehash = pd.hash
	pmdata.setXP(scode.save(pd.name, saveTechnique))
	pmdata.adminToken = "no"
	pd.pmdata = pmdata
	destroy scode

	pd.pfile.pmDatas.add(pmdata)
	printLog(Loglevel.DEBUG, "addPlayerProfile2")
	savePlayerfile(pd)
	printTimedToPlayer("|cffFFCC00Profile|r created!", 25, pd.p)

public function savePlayerfile(PlayerData pd)
	var scode = new Savecode()
	scode.encode(pd.XP, XPMAX)
	pd.pmdata.setXP(scode.save(pd.name, saveTechnique))
	destroy scode
	if GetLocalPlayer() == pd.p
		let file = File.open(FILE_NAME, Mode.WRITE)
		pd.pfile.save(file)
		file.close()
	
function createNewPlayerfile(PlayerData pd)
	printLog(Loglevel.DEBUG, "createNewPlayerfile0")
	pd.pfile = new Playerfile()
	printLog(Loglevel.DEBUG, "createNewPlayerfile1")
	addPlayerProfile(pd)
	printLog(Loglevel.DEBUG, "createNewPlayerfile2")
	destroy pd.pfile
	printLog(Loglevel.DEBUG, "createNewPlayerfile3")
	pd.pfile = null
	printLog(Loglevel.DEBUG, "createNewPlayerfile4")
	pd.pmdata = null
