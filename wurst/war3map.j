//===========================================================================
// 
// |cff217199Escape Builder |r[R] 0.89b
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Thu Apr 06 10:56:18 2017
//   Map Author: Frotty
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    // Generated
    rect                    gg_rct_Choose              = null
    rect                    gg_rct_Region_002          = null
    rect                    gg_rct_Region_014          = null
    rect                    gg_rct_Region_015          = null
    rect                    gg_rct_Region_000          = null
    rect                    gg_rct_Region_001          = null
    rect                    gg_rct_Region_003          = null
    rect                    gg_rct_Region_004          = null
    rect                    gg_rct_Region_005          = null
    rect                    gg_rct_Region_006          = null
    rect                    gg_rct_Region_007          = null
    rect                    gg_rct_Region_008          = null
    rect                    gg_rct_Region_009          = null
    rect                    gg_rct_Region_010          = null
    rect                    gg_rct_Region_011          = null
    rect                    gg_rct_Region_012          = null
    rect                    gg_rct_Region_013          = null
    rect                    gg_rct_Region_016          = null
    rect                    gg_rct_Region_017          = null
    rect                    gg_rct_Region_018          = null
    rect                    gg_rct_Region_024          = null
    rect                    gg_rct_Region_026          = null
    rect                    gg_rct_Start               = null
    rect                    gg_rct_Region_023          = null
    rect                    gg_rct_Region_025          = null
    rect                    gg_rct_Region_027          = null
    camerasetup             gg_cam_Camera_001          = null
    camerasetup             gg_cam_BuilderSetupCam     = null
    camerasetup             gg_cam_BuilderBuilderCam   = null
    camerasetup             gg_cam_BlackCam            = null
    camerasetup             gg_cam_StdCam              = null
    camerasetup             gg_cam_BuilderTilesCam     = null
    trigger                 gg_trg_Untitled_Trigger_014 = null
    trigger                 gg_trg_Untitled_Trigger_004 = null
    trigger                 gg_trg_Untitled_Trigger_003 = null
    trigger                 gg_trg_Untitled_Trigger_001 = null
    trigger                 gg_trg_Untitled_Trigger_013 = null
    trigger                 gg_trg_Untitled_Trigger_008 = null
    trigger                 gg_trg_Untitled_Trigger_005 = null
    trigger                 gg_trg_Untitled_Trigger_002 = null
    trigger                 gg_trg_UnitVariables       = null
    trigger                 gg_trg_Table               = null
    trigger                 gg_trg_StringHashEx        = null
    trigger                 gg_trg_Sync                = null
    trigger                 gg_trg_SyncInteger         = null
    unit                    gg_unit_n000_0002          = null
    unit                    gg_unit_u00J_0149          = null
    unit                    gg_unit_n00C_0150          = null
    unit                    gg_unit_h00C_0011          = null
    unit                    gg_unit_n007_0014          = null
    unit                    gg_unit_h015_0018          = null
    unit                    gg_unit_h015_0020          = null
    unit                    gg_unit_n00C_0324          = null
    unit                    gg_unit_n00C_0323          = null
    unit                    gg_unit_n000_0322          = null
    unit                    gg_unit_n003_0118          = null
    unit                    gg_unit_n00C_0061          = null
    unit                    gg_unit_h01M_0163          = null
    unit                    gg_unit_h01M_0162          = null
    unit                    gg_unit_h01M_0161          = null
    unit                    gg_unit_u00A_0160          = null
    unit                    gg_unit_h01H_0080          = null
    unit                    gg_unit_h01H_0081          = null
    unit                    gg_unit_n000_0085          = null
    unit                    gg_unit_u00A_0159          = null
    unit                    gg_unit_u00A_0158          = null
    unit                    gg_unit_u00A_0157          = null
    unit                    gg_unit_u00A_0156          = null
    unit                    gg_unit_h01H_0104          = null
    unit                    gg_unit_n009_0153          = null
    unit                    gg_unit_n00B_0152          = null
    unit                    gg_unit_n00B_0151          = null
    unit                    gg_unit_n00D_0120          = null
    unit                    gg_unit_n00D_0121          = null
    unit                    gg_unit_n00D_0122          = null
    unit                    gg_unit_n00D_0123          = null
    unit                    gg_unit_n00D_0124          = null
    unit                    gg_unit_n00D_0125          = null
    unit                    gg_unit_h01H_0127          = null
    unit                    gg_unit_h01H_0128          = null
    unit                    gg_unit_h01M_0147          = null
    unit                    gg_unit_h018_0145          = null
    unit                    gg_unit_n00C_0141          = null
    unit                    gg_unit_n007_0012          = null
    unit                    gg_unit_n007_0013          = null
    unit                    gg_unit_h01I_0280          = null
    unit                    gg_unit_n00E_0278          = null
    unit                    gg_unit_n00E_0277          = null
    unit                    gg_unit_n00E_0276          = null
    unit                    gg_unit_n00E_0275          = null
    unit                    gg_unit_n00E_0274          = null
    unit                    gg_unit_n00E_0273          = null
    unit                    gg_unit_n00E_0272          = null
    unit                    gg_unit_n00E_0271          = null
    unit                    gg_unit_n00E_0270          = null
    unit                    gg_unit_n00E_0269          = null
    unit                    gg_unit_n00E_0268          = null
    unit                    gg_unit_n00E_0267          = null
    unit                    gg_unit_h01I_0266          = null
    unit                    gg_unit_n00E_0265          = null
    unit                    gg_unit_n00E_0264          = null
    unit                    gg_unit_n00E_0263          = null
    unit                    gg_unit_h01I_0262          = null
    unit                    gg_unit_n00E_0261          = null
    unit                    gg_unit_n00E_0260          = null
    unit                    gg_unit_u00I_0100          = null
    unit                    gg_unit_h01M_0258          = null
    unit                    gg_unit_h01M_0257          = null
    unit                    gg_unit_n001_0117          = null
    unit                    gg_unit_n004_0116          = null
    unit                    gg_unit_n00C_0234          = null
    unit                    gg_unit_h00C_0023          = null
    unit                    gg_unit_n00E_0210          = null
    unit                    gg_unit_n00E_0211          = null
    unit                    gg_unit_h01M_0212          = null
    unit                    gg_unit_n00E_0213          = null
    unit                    gg_unit_n00E_0214          = null
    unit                    gg_unit_n00E_0215          = null
    unit                    gg_unit_n00E_0216          = null
    unit                    gg_unit_n00E_0217          = null
    unit                    gg_unit_n00E_0218          = null
    unit                    gg_unit_n00E_0219          = null
    unit                    gg_unit_h01I_0220          = null
    unit                    gg_unit_n00E_0221          = null
    unit                    gg_unit_n00E_0222          = null
    unit                    gg_unit_h01I_0225          = null
    unit                    gg_unit_n000_0226          = null
    unit                    gg_unit_n000_0022          = null
    unit                    gg_unit_n007_0036          = null
    unit                    gg_unit_n004_0114          = null
    unit                    gg_unit_u00G_0033          = null
    unit                    gg_unit_u00G_0034          = null
    unit                    gg_unit_n00C_0044          = null
    unit                    gg_unit_n009_0038          = null
    unit                    gg_unit_n009_0039          = null
    unit                    gg_unit_n009_0050          = null
    unit                    gg_unit_u00G_0053          = null
    unit                    gg_unit_u00G_0054          = null
    unit                    gg_unit_n00C_0058          = null
    unit                    gg_unit_n00C_0063          = null
    unit                    gg_unit_n00C_0115          = null
    unit                    gg_unit_n00C_0143          = null
    unit                    gg_unit_h00H_0067          = null
    unit                    gg_unit_n004_0066          = null
    unit                    gg_unit_n004_0068          = null
    unit                    gg_unit_n004_0078          = null
    unit                    gg_unit_n004_0099          = null
    unit                    gg_unit_n004_0101          = null
    unit                    gg_unit_n004_0102          = null
endglobals

function InitGlobals takes nothing returns nothing
endfunction

//***************************************************************************
//*
//*  Items
//*
//***************************************************************************

function CreateAllItems takes nothing returns nothing
    local integer itemID

    call CreateItem( 'I008', 4411.5, -6660.8 )
    call CreateItem( 'I009', -2696.9, -4345.6 )
    call CreateItem( 'I009', -1799.0, -6347.4 )
    call CreateItem( 'I009', 3502.6, -7042.6 )
    call CreateItem( 'I009', -4731.9, -6904.0 )
    call CreateItem( 'I009', 1264.1, -6134.2 )
    call CreateItem( 'I009', -3332.3, -5889.3 )
    call CreateItem( 'I00A', 2421.6, -5123.5 )
    call CreateItem( 'I00A', 4413.5, -4294.3 )
    call CreateItem( 'I00A', 3832.8, -6648.4 )
    call CreateItem( 'I00A', -1280.7, -4227.1 )
    call CreateItem( 'I00A', 4416.8, -6159.0 )
    call CreateItem( 'I00A', -1926.5, -6347.4 )
    call CreateItem( 'I00A', -2560.2, -5762.8 )
    call CreateItem( 'I00A', 755.2, -5499.9 )
    call CreateItem( 'I00A', -3837.0, -4998.9 )
    call CreateItem( 'I00A', 2181.3, -6914.0 )
    call CreateItem( 'I00A', -3458.5, -6785.1 )
    call CreateItem( 'I00J', 6735.7, -7105.2 )
    call CreateItem( 'I010', -3310.4, -6268.8 )
    call CreateItem( 'I010', 4424.0, -6796.8 )
    call CreateItem( 'I010', 4387.1, -4166.0 )
    call CreateItem( 'I010', 1155.9, -6146.7 )
    call CreateItem( 'I010', -1110.1, -6852.5 )
    call CreateItem( 'I010', -4218.0, -5127.8 )
    call CreateItem( 'I010', 4351.9, -4737.4 )
    call CreateItem( 'I010', 2551.1, -7173.8 )
    call CreateItem( 'I010', 2748.9, -4658.5 )
    call CreateItem( 'I010', -1923.8, -3974.1 )
    call CreateItem( 'I010', -2302.7, -4229.0 )
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateBuildingsForPlayer8 takes nothing returns nothing
    local player p = Player(8)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n00C_0058 = CreateUnit( p, 'n00C', -6400.0, -6400.0, 270.000 )
endfunction

//===========================================================================
function CreateBuildingsForPlayer9 takes nothing returns nothing
    local player p = Player(9)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n00C_0063 = CreateUnit( p, 'n00C', -6144.0, -6400.0, 270.000 )
endfunction

//===========================================================================
function CreateBuildingsForPlayer10 takes nothing returns nothing
    local player p = Player(10)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n00C_0115 = CreateUnit( p, 'n00C', -5888.0, -6400.0, 270.000 )
endfunction

//===========================================================================
function CreateBuildingsForPlayer11 takes nothing returns nothing
    local player p = Player(11)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n00C_0143 = CreateUnit( p, 'n00C', -5632.0, -6400.0, 270.000 )
endfunction

//===========================================================================
function CreateNeutralPassiveBuildings takes nothing returns nothing
    local player p = Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n000_0002 = CreateUnit( p, 'n000', 5632.0, -6912.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 4736.0, -6784.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6848.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6080.0, -5888.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 5184.0, -7040.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 6144.0, -5824.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 6784.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 6720.0, -6912.0, 270.000 )
    set gg_unit_h00C_0011 = CreateUnit( p, 'h00C', 5312.0, -5568.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 5376.0, -4736.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 2304.0, -4160.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1536.0, -3776.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 2240.0, -3776.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6656.0, -6912.0, 270.000 )
    set gg_unit_n000_0022 = CreateUnit( p, 'n000', 512.0, -6912.0, 270.000 )
    set gg_unit_h00C_0023 = CreateUnit( p, 'h00C', 6656.0, -6656.0, 270.000 )
    set u = CreateUnit( p, 'h00C', 0.0, -4992.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 5376.0, -4608.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 5760.0, -4864.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2688.0, -6272.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 5760.0, -4800.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6016.0, -4544.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 5760.0, -4032.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 4992.0, -4160.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6656.0, -3968.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 4608.0, -5632.0, 270.000 )
    set u = CreateUnit( p, 'n01I', 64.0, -6080.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -1472.0, -6976.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -1536.0, -6976.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -1536.0, -7040.0, 270.000 )
    set gg_unit_n00C_0044 = CreateUnit( p, 'n00C', -1280.0, -3840.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -1472.0, -7040.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -1536.0, -7104.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -64.0, -5760.0, 270.000 )
    set u = CreateUnit( p, 'n01I', 64.0, -5760.0, 270.000 )
    set u = CreateUnit( p, 'n01H', -960.0, -6400.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -128.0, -5056.0, 270.000 )
    set u = CreateUnit( p, 'n01I', 128.0, -5056.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1984.0, -4096.0, 270.000 )
    set u = CreateUnit( p, 'n000', 4864.0, -4736.0, 270.000 )
    set gg_unit_n00C_0061 = CreateUnit( p, 'n00C', 4352.0, -3968.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2368.0, -6400.0, 270.000 )
    set gg_unit_n004_0066 = CreateUnit( p, 'n004', 128.0, -6016.0, 270.000 )
    set gg_unit_h00H_0067 = CreateUnit( p, 'h00H', 3456.0, -7168.0, 270.000 )
    set gg_unit_n004_0068 = CreateUnit( p, 'n004', 128.0, -6144.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 2176.0, -4544.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 1920.0, -5248.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 1600.0, -5056.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 2112.0, -5696.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1600.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2240.0, -6528.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2624.0, -6016.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2176.0, -6784.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2496.0, -6784.0, 270.000 )
    set gg_unit_n004_0078 = CreateUnit( p, 'n004', 0.0, -6144.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 1856.0, -6272.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2560.0, -5952.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2112.0, -6336.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2048.0, -6272.0, 270.000 )
    set gg_unit_n000_0085 = CreateUnit( p, 'n000', 3456.0, -4160.0, 270.000 )
    set u = CreateUnit( p, 'h00C', 2752.0, -4288.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3584.0, -4800.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3584.0, -5120.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3648.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3392.0, -5440.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2944.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3072.0, -5760.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3264.0, -5952.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3776.0, -6208.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3840.0, -6400.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2368.0, -6016.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2304.0, -5952.0, 270.000 )
    set gg_unit_n004_0099 = CreateUnit( p, 'n004', 0.0, -6016.0, 270.000 )
    set gg_unit_n004_0101 = CreateUnit( p, 'n004', -896.0, -4096.0, 270.000 )
    set gg_unit_n004_0102 = CreateUnit( p, 'n004', -896.0, -3968.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3200.0, -3776.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 1984.0, -6528.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2496.0, -4544.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 1856.0, -4096.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2112.0, -4224.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 1408.0, -4608.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3392.0, -5184.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2304.0, -6208.0, 270.000 )
    set gg_unit_n004_0114 = CreateUnit( p, 'n004', -256.0, -3968.0, 270.000 )
    set gg_unit_n004_0116 = CreateUnit( p, 'n004', -320.0, -4096.0, 270.000 )
    set gg_unit_n001_0117 = CreateUnit( p, 'n001', -320.0, -4416.0, 270.000 )
    set gg_unit_n003_0118 = CreateUnit( p, 'n003', -256.0, -3776.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -640.0, -3904.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3200.0, -6464.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 3712.0, -5248.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1728.0, -5120.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 2368.0, -6272.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -704.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -768.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -832.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'h00C', 2752.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 2560.0, -4096.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1856.0, -4096.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1728.0, -4160.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1664.0, -4480.0, 270.000 )
    set gg_unit_n00C_0141 = CreateUnit( p, 'n00C', 2432.0, -6656.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -896.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n000', 0.0, -4480.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -960.0, -4416.0, 270.000 )
    set gg_unit_n00C_0150 = CreateUnit( p, 'n00C', -6656.0, -6784.0, 270.000 )
    set gg_unit_n00B_0151 = CreateUnit( p, 'n00B', 3328.0, -6272.0, 270.000 )
    set gg_unit_n00B_0152 = CreateUnit( p, 'n00B', 3456.0, -6592.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 2048.0, -4480.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1856.0, -5184.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2624.0, -6336.0, 270.000 )
    set u = CreateUnit( p, 'n019', -2816.0, -6528.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2816.0, -6592.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3008.0, -6528.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3136.0, -6720.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3328.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3328.0, -6720.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3136.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'h00C', -2496.0, -4864.0, 270.000 )
    set u = CreateUnit( p, 'n01H', -576.0, -6784.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -576.0, -6464.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -512.0, -6784.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -576.0, -7104.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2496.0, -4224.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2496.0, -4288.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2624.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -640.0, -3968.0, 270.000 )
    set u = CreateUnit( p, 'n01I', -640.0, -4032.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3968.0, -6144.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4096.0, -4352.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4800.0, -4096.0, 270.000 )
    set gg_unit_n000_0226 = CreateUnit( p, 'n000', -2432.0, -6144.0, 270.000 )
    set u = CreateUnit( p, 'n000', -4416.0, -6400.0, 270.000 )
    set u = CreateUnit( p, 'n000', -2624.0, -4672.0, 270.000 )
    set u = CreateUnit( p, 'h00C', -4736.0, -4608.0, 270.000 )
    set gg_unit_n00C_0234 = CreateUnit( p, 'n00C', -4736.0, -5632.0, 270.000 )
    set u = CreateUnit( p, 'n019', -4032.0, -6080.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3648.0, -6336.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4032.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4096.0, -5504.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4160.0, -5568.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3456.0, -4480.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3328.0, -4288.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3136.0, -3968.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4416.0, -4416.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4288.0, -4544.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2560.0, -7104.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4352.0, -6656.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4672.0, -4992.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3456.0, -5184.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3520.0, -5184.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3584.0, -5184.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2944.0, -5824.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4608.0, -6912.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4608.0, -6976.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4608.0, -7040.0, 270.000 )
    set u = CreateUnit( p, 'h00C', -4032.0, -5824.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3840.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2240.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3264.0, -7104.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2880.0, -6464.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2880.0, -6976.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2688.0, -6208.0, 270.000 )
    set u = CreateUnit( p, 'n018', -2688.0, -6336.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3648.0, -5568.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4160.0, -6144.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 6016.0, -6272.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 4480.0, -5440.0, 270.000 )
    set gg_unit_n000_0322 = CreateUnit( p, 'n000', -6016.0, -6912.0, 270.000 )
    set gg_unit_n00C_0323 = CreateUnit( p, 'n00C', -5248.0, -6784.0, 270.000 )
    set gg_unit_n00C_0324 = CreateUnit( p, 'n00C', -5248.0, -7040.0, 270.000 )
    set u = CreateUnit( p, 'n018', -4608.0, -6848.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 4288.0, -6912.0, 270.000 )
    set u = CreateUnit( p, 'n00S', 1600.0, -4736.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 1600.0, -4608.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 1792.0, -7104.0, 270.000 )
    set u = CreateUnit( p, 'n00X', 1600.0, -7232.0, 270.000 )
    set u = CreateUnit( p, 'n00R', 1728.0, -4160.0, 270.000 )
    set u = CreateUnit( p, 'n018', -3648.0, -6272.0, 270.000 )
endfunction

//===========================================================================
function CreateNeutralPassive takes nothing returns nothing
    local player p = Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_n007_0012 = CreateUnit( p, 'n007', 6982.1, -4352.8, 214.330 )
    set gg_unit_n007_0013 = CreateUnit( p, 'n007', 5358.6, -6339.4, 214.330 )
    set gg_unit_n007_0014 = CreateUnit( p, 'n007', 5359.4, -6555.1, 214.330 )
    set gg_unit_h015_0018 = CreateUnit( p, 'h015', 6654.4, -6060.8, 151.979 )
    set gg_unit_h015_0020 = CreateUnit( p, 'h015', 5671.2, -5156.0, 232.972 )
    set gg_unit_u00G_0033 = CreateUnit( p, 'u00G', 6229.0, -3870.0, 167.030 )
    set gg_unit_u00G_0034 = CreateUnit( p, 'u00G', 5102.9, -4542.4, 106.560 )
    set gg_unit_n007_0036 = CreateUnit( p, 'n007', 4363.1, -6030.3, 214.330 )
    set gg_unit_n009_0038 = CreateUnit( p, 'n009', -114.8, -5065.0, 138.740 )
    set gg_unit_n009_0039 = CreateUnit( p, 'n009', 125.1, -5044.2, 313.988 )
    set gg_unit_n009_0050 = CreateUnit( p, 'n009', -6.2, -5046.5, 313.988 )
    set gg_unit_u00G_0053 = CreateUnit( p, 'u00G', -1779.1, -6157.4, 106.560 )
    set gg_unit_u00G_0054 = CreateUnit( p, 'u00G', -897.4, -6648.0, 106.560 )
    set gg_unit_h01H_0080 = CreateUnit( p, 'h01H', 1322.0, -7034.5, 294.629 )
    set gg_unit_h01H_0081 = CreateUnit( p, 'h01H', 2670.4, -5776.1, 78.346 )
    set gg_unit_u00I_0100 = CreateUnit( p, 'u00I', -93.7, -6155.5, 213.890 )
    set gg_unit_h01H_0104 = CreateUnit( p, 'h01H', 1653.8, -7047.1, 258.461 )
    set gg_unit_n00D_0120 = CreateUnit( p, 'n00D', 2936.1, -5378.4, 11.701 )
    set gg_unit_n00D_0121 = CreateUnit( p, 'n00D', 3192.2, -4959.9, 37.530 )
    set gg_unit_n00D_0122 = CreateUnit( p, 'n00D', 3888.3, -4974.1, 20.248 )
    set gg_unit_n00D_0123 = CreateUnit( p, 'n00D', 2816.7, -6021.1, 345.267 )
    set gg_unit_n00D_0124 = CreateUnit( p, 'n00D', 3702.9, -6561.8, 11.701 )
    set gg_unit_n00D_0125 = CreateUnit( p, 'n00D', 3074.3, -6143.2, 11.701 )
    set gg_unit_h01H_0127 = CreateUnit( p, 'h01H', 3610.2, -6376.1, 15.293 )
    set gg_unit_h01H_0128 = CreateUnit( p, 'h01H', 3498.3, -6883.5, 221.118 )
    set gg_unit_h018_0145 = CreateUnit( p, 'h018', 622.4, -4978.6, 177.990 )
    set gg_unit_h01M_0147 = CreateUnit( p, 'h01M', -3155.8, -4606.2, 115.415 )
    call SetUnitState( gg_unit_h01M_0147, UNIT_STATE_MANA, 0 )
    set gg_unit_u00J_0149 = CreateUnit( p, 'u00J', -1024.0, -4331.4, 201.480 )
    set gg_unit_n009_0153 = CreateUnit( p, 'n009', 384.3, -5507.1, 356.673 )
    set gg_unit_u00A_0156 = CreateUnit( p, 'u00A', -2552.2, -6514.2, 305.445 )
    set gg_unit_u00A_0157 = CreateUnit( p, 'u00A', -2618.9, -6820.0, 319.656 )
    set gg_unit_u00A_0158 = CreateUnit( p, 'u00A', -2365.4, -6907.0, 160.548 )
    set gg_unit_u00A_0159 = CreateUnit( p, 'u00A', -2418.6, -6948.5, 160.548 )
    set gg_unit_u00A_0160 = CreateUnit( p, 'u00A', -2465.6, -6995.8, 160.548 )
    set gg_unit_h01M_0161 = CreateUnit( p, 'h01M', -2495.7, -7046.3, 115.415 )
    call SetUnitState( gg_unit_h01M_0161, UNIT_STATE_MANA, 0 )
    set gg_unit_h01M_0162 = CreateUnit( p, 'h01M', -2806.4, -6516.7, 115.415 )
    call SetUnitState( gg_unit_h01M_0162, UNIT_STATE_MANA, 0 )
    set gg_unit_h01M_0163 = CreateUnit( p, 'h01M', -2809.3, -6647.6, 115.415 )
    call SetUnitState( gg_unit_h01M_0163, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0210 = CreateUnit( p, 'n00E', -4232.8, -6890.6, 228.358 )
    set gg_unit_n00E_0211 = CreateUnit( p, 'n00E', -4233.5, -7041.8, 228.358 )
    set gg_unit_h01M_0212 = CreateUnit( p, 'h01M', -2687.4, -3967.1, 181.040 )
    call SetUnitState( gg_unit_h01M_0212, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0213 = CreateUnit( p, 'n00E', -2290.5, -5088.0, 136.430 )
    set gg_unit_n00E_0214 = CreateUnit( p, 'n00E', -2291.0, -5374.2, 136.430 )
    set gg_unit_n00E_0215 = CreateUnit( p, 'n00E', -3162.4, -4425.0, 88.805 )
    call SetUnitState( gg_unit_n00E_0215, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0216 = CreateUnit( p, 'n00E', -3345.6, -4730.4, 176.970 )
    call SetUnitState( gg_unit_n00E_0216, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0217 = CreateUnit( p, 'n00E', -2999.4, -4723.9, 11.117 )
    call SetUnitState( gg_unit_n00E_0217, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0218 = CreateUnit( p, 'n00E', -4730.5, -6657.7, 228.358 )
    set gg_unit_n00E_0219 = CreateUnit( p, 'n00E', -4228.1, -7197.2, 228.358 )
    set gg_unit_h01I_0220 = CreateUnit( p, 'h01I', -2690.1, -4116.1, 173.698 )
    call SetUnitState( gg_unit_h01I_0220, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0221 = CreateUnit( p, 'n00E', -4779.7, -5046.5, 214.220 )
    set gg_unit_n00E_0222 = CreateUnit( p, 'n00E', -4614.0, -5513.9, 214.220 )
    set gg_unit_h01I_0225 = CreateUnit( p, 'h01I', -4066.5, -4607.0, 117.546 )
    set gg_unit_h01M_0257 = CreateUnit( p, 'h01M', -3017.1, -5359.0, 115.415 )
    call SetUnitState( gg_unit_h01M_0257, UNIT_STATE_MANA, 0 )
    set gg_unit_h01M_0258 = CreateUnit( p, 'h01M', -3843.7, -6843.6, 272.472 )
    call SetUnitState( gg_unit_h01M_0258, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0260 = CreateUnit( p, 'n00E', -3843.7, -6931.2, 275.361 )
    set gg_unit_n00E_0261 = CreateUnit( p, 'n00E', -3853.0, -6677.5, 93.847 )
    set gg_unit_h01I_0262 = CreateUnit( p, 'h01I', -3586.0, -6653.9, 73.303 )
    set gg_unit_n00E_0263 = CreateUnit( p, 'n00E', -3013.2, -6283.2, 0.670 )
    set gg_unit_n00E_0264 = CreateUnit( p, 'n00E', -3324.8, -6784.8, 240.992 )
    set gg_unit_n00E_0265 = CreateUnit( p, 'n00E', -3063.1, -6948.1, 127.775 )
    set gg_unit_h01I_0266 = CreateUnit( p, 'h01I', -3693.4, -7180.5, 49.209 )
    set gg_unit_n00E_0267 = CreateUnit( p, 'n00E', -4409.7, -6029.0, 114.569 )
    set gg_unit_n00E_0268 = CreateUnit( p, 'n00E', -3654.3, -6038.5, 315.779 )
    set gg_unit_n00E_0269 = CreateUnit( p, 'n00E', -3822.9, -5904.0, 128.445 )
    set gg_unit_n00E_0270 = CreateUnit( p, 'n00E', -4418.6, -6654.2, 228.358 )
    set gg_unit_n00E_0271 = CreateUnit( p, 'n00E', -3073.2, -5425.8, 41.036 )
    call SetUnitState( gg_unit_n00E_0271, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0272 = CreateUnit( p, 'n00E', -2978.4, -5409.7, 42.306 )
    call SetUnitState( gg_unit_n00E_0272, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0273 = CreateUnit( p, 'n00E', -3232.0, -5586.6, 44.570 )
    call SetUnitState( gg_unit_n00E_0273, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0274 = CreateUnit( p, 'n00E', -3062.8, -5320.3, 324.033 )
    call SetUnitState( gg_unit_n00E_0274, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0275 = CreateUnit( p, 'n00E', -3254.9, -5146.0, 319.182 )
    call SetUnitState( gg_unit_n00E_0275, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0276 = CreateUnit( p, 'n00E', -2895.7, -5473.7, 133.355 )
    call SetUnitState( gg_unit_n00E_0276, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0277 = CreateUnit( p, 'n00E', -2760.2, -5125.9, 224.828 )
    call SetUnitState( gg_unit_n00E_0277, UNIT_STATE_MANA, 0 )
    set gg_unit_n00E_0278 = CreateUnit( p, 'n00E', -2817.4, -5195.1, 222.822 )
    call SetUnitState( gg_unit_n00E_0278, UNIT_STATE_MANA, 0 )
    set gg_unit_h01I_0280 = CreateUnit( p, 'h01I', -3411.0, -5226.2, 117.546 )
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer8(  )
    call CreateBuildingsForPlayer9(  )
    call CreateBuildingsForPlayer10(  )
    call CreateBuildingsForPlayer11(  )
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreateNeutralPassiveBuildings(  )
    call CreatePlayerBuildings(  )
    call CreateNeutralPassive(  )
    call CreatePlayerUnits(  )
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_Choose = Rect( -7488.0, 5856.0, -5856.0, 7488.0 )
    set we = AddWeatherEffect( gg_rct_Choose, 'SNhs' )
    call EnableWeatherEffect( we, true )
    set gg_rct_Region_002 = Rect( -6976.0, -6176.0, -5056.0, -1856.0 )
    set gg_rct_Region_014 = Rect( 928.0, 5184.0, 4160.0, 7104.0 )
    set gg_rct_Region_015 = Rect( 4160.0, 5184.0, 6976.0, 7104.0 )
    set gg_rct_Region_000 = Rect( -2112.0, -7328.0, 960.0, -3648.0 )
    set gg_rct_Region_001 = Rect( -5056.0, -7328.0, -2112.0, -3648.0 )
    set gg_rct_Region_003 = Rect( -5056.0, -3648.0, -2368.0, -1856.0 )
    set gg_rct_Region_004 = Rect( -6976.0, -1856.0, -2368.0, 704.0 )
    set gg_rct_Region_005 = Rect( -2368.0, -3648.0, -832.0, 704.0 )
    set gg_rct_Region_006 = Rect( -832.0, -3648.0, 1472.0, -1472.0 )
    set gg_rct_Region_007 = Rect( 1472.0, -3648.0, 4160.0, -1472.0 )
    set gg_rct_Region_008 = Rect( 1472.0, -1472.0, 4160.0, 704.0 )
    set gg_rct_Region_009 = Rect( -4288.0, 704.0, -1216.0, 5184.0 )
    set gg_rct_Region_010 = Rect( -1216.0, 704.0, 4160.0, 2880.0 )
    set gg_rct_Region_011 = Rect( 4160.0, -3648.0, 7040.0, 704.0 )
    set gg_rct_Region_012 = Rect( 4160.0, 704.0, 6976.0, 2880.0 )
    set gg_rct_Region_013 = Rect( -1216.0, 2880.0, 6976.0, 5184.0 )
    set gg_rct_Region_016 = Rect( -4928.0, 5184.0, 928.0, 7104.0 )
    set gg_rct_Region_017 = Rect( -6976.0, 704.0, -4288.0, 5184.0 )
    set gg_rct_Region_018 = Rect( 960.0, -7328.0, 4160.0, -3648.0 )
    set gg_rct_Region_024 = Rect( 4160.0, -7328.0, 7040.0, -3648.0 )
    set gg_rct_Region_026 = Rect( -832.0, -1472.0, 1472.0, 704.0 )
    set gg_rct_Start = Rect( -6976.0, -7328.0, -5056.0, -6176.0 )
    set gg_rct_Region_023 = Rect( -8192.0, -7680.0, 7648.0, 8192.0 )
    set gg_rct_Region_025 = Rect( -4928.0, 7104.0, -3680.0, 8000.0 )
    set gg_rct_Region_027 = Rect( -3680.0, 7104.0, -1760.0, 8000.0 )
endfunction

//***************************************************************************
//*
//*  Cameras
//*
//***************************************************************************

function CreateCameras takes nothing returns nothing

    set gg_cam_Camera_001 = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_ROTATION, 148.3, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_ANGLE_OF_ATTACK, 345.7, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_TARGET_DISTANCE, 991.7, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_Camera_001, CAMERA_FIELD_FARZ, 5000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_Camera_001, -6863.5, 6652.6, 0.0 )

    set gg_cam_BuilderSetupCam = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_ROTATION, 89.8, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 299.9, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_TARGET_DISTANCE, 769.7, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderSetupCam, CAMERA_FIELD_FARZ, 8857.8, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_BuilderSetupCam, -4265.2, 7548.9, 0.0 )

    set gg_cam_BuilderBuilderCam = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_ROTATION, 89.8, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 299.9, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_TARGET_DISTANCE, 636.2, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderBuilderCam, CAMERA_FIELD_FARZ, 8857.8, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_BuilderBuilderCam, -3466.2, 7555.0, 0.0 )

    set gg_cam_BlackCam = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_ROTATION, 89.8, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 269.3, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_TARGET_DISTANCE, 699.8, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_FIELD_OF_VIEW, 20.0, 0.0 )
    call CameraSetupSetField( gg_cam_BlackCam, CAMERA_FIELD_FARZ, 101.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_BlackCam, -2996.0, 7450.1, 0.0 )

    set gg_cam_StdCam = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_ROTATION, 90.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 304.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_TARGET_DISTANCE, 1650.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_StdCam, CAMERA_FIELD_FARZ, 5000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_StdCam, -5869.2, -6100.0, 0.0 )

    set gg_cam_BuilderTilesCam = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_ROTATION, 90.1, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 271.5, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_TARGET_DISTANCE, 1024.5, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_BuilderTilesCam, CAMERA_FIELD_FARZ, 5000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_BuilderTilesCam, -2631.2, 7473.1, 0.0 )

endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//TESH.scrollpos=0
//TESH.alwaysfold=0

//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Untitled Trigger 014
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Untitled_Trigger_014_Actions takes nothing returns nothing
    call RemoveUnit( gg_unit_n000_0002 )
    
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_014 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_014 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_014, function Trig_Untitled_Trigger_014_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 004
//===========================================================================
function Trig_Untitled_Trigger_004_Actions takes nothing returns nothing
    call AddSpecialEffectLocBJ( GetRectCenter(GetPlayableMapRect()), "Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl" )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_004 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_004 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_004, function Trig_Untitled_Trigger_004_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 003
//===========================================================================
function Trig_Untitled_Trigger_003_Actions takes nothing returns nothing
    call CreateUbersplatBJ( GetRectCenter(GetPlayableMapRect()), "NGOL", 100, 100, 100, 0, false, false )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_003 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_003 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_003, function Trig_Untitled_Trigger_003_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 001
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Untitled_Trigger_001_Actions takes nothing returns nothing
    call KillUnit( gg_unit_h018_0145 )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_001 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_001 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_001, function Trig_Untitled_Trigger_001_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 013
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Untitled_Trigger_013_Actions takes nothing returns nothing
    call CameraSetupApplyForPlayer( true, gg_cam_Camera_001, Player(0), 0 )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_013 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_013 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_013, function Trig_Untitled_Trigger_013_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 008
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Untitled_Trigger_008_Actions takes nothing returns nothing
    call RemoveUnit( gg_unit_n000_0002 )
    call RemoveUnit( gg_unit_n000_0085 )
    call RemoveUnit( gg_unit_n000_0022 )
    call RemoveUnit( gg_unit_n000_0226 )
    call RemoveUnit( gg_unit_n000_0322 )
    
    call RemoveUnit( gg_unit_n001_0117 )
    call RemoveUnit( gg_unit_n004_0116 )
    call RemoveUnit( gg_unit_n004_0101 )
    call RemoveUnit( gg_unit_n004_0102 )
    call RemoveUnit( gg_unit_n004_0114 )
    call RemoveUnit( gg_unit_n003_0118 )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_008 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_008 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_008, function Trig_Untitled_Trigger_008_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 005
//===========================================================================
function Trig_Untitled_Trigger_005_Actions takes nothing returns nothing
    call MoveRectToLoc( gg_rct_Region_024, GetRectCenter(GetPlayableMapRect()) )
    call MoveRectToLoc( gg_rct_Start, GetRectCenter(GetPlayableMapRect()) )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_005 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_005 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_005, function Trig_Untitled_Trigger_005_Actions )
endfunction

//===========================================================================
// Trigger: Untitled Trigger 002
//===========================================================================
function Trig_Untitled_Trigger_002_Actions takes nothing returns nothing
    call ShowUnitHide( gg_unit_n00C_0061 )
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_002 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_002 = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Untitled_Trigger_002, function Trig_Untitled_Trigger_002_Actions )
endfunction

//===========================================================================
// Trigger: UnitVariables
//===========================================================================
//TESH.scrollpos=81
//TESH.alwaysfold=0
function Trig_UnitVariables_Actions takes nothing returns nothing
    call MoveRectToLoc( gg_rct_Region_026, GetRectCenter(GetPlayableMapRect()) )
    call MoveRectToLoc( gg_rct_Choose, GetRectCenter(GetPlayableMapRect()) )
    // Maze0
    call ShowUnitShow( gg_unit_h015_0018 )
    call ShowUnitShow( gg_unit_h015_0020 )
    call ShowUnitShow( gg_unit_n007_0013 )
    call ShowUnitShow( gg_unit_n007_0014 )
    call ShowUnitShow( gg_unit_h00C_0023 )
    call ShowUnitShow( gg_unit_h00C_0011 )
    call ShowUnitShow( gg_unit_n007_0012 )
    call ShowUnitShow( gg_unit_u00G_0033 )
    call ShowUnitShow( gg_unit_u00G_0034 )
    call ShowUnitShow( gg_unit_n007_0036 )
    // Maze1
    call ShowUnitShow( gg_unit_h00H_0067 )
    call ShowUnitShow( gg_unit_n00D_0121 )
    call ShowUnitShow( gg_unit_n00D_0122 )
    call ShowUnitShow( gg_unit_n00D_0120 )
    call ShowUnitShow( gg_unit_n00D_0125 )
    call ShowUnitShow( gg_unit_n00D_0123 )
    call ShowUnitShow( gg_unit_n00D_0124 )
    call ShowUnitShow( gg_unit_h01H_0127 )
    call ShowUnitShow( gg_unit_h01H_0128 )
    call ShowUnitShow( gg_unit_h01H_0081 )
    call ShowUnitShow( gg_unit_h01H_0080 )
    call ShowUnitShow( gg_unit_h01H_0104 )
    call ShowUnitShow( gg_unit_n00C_0141 )
    // Maze2
    call ShowUnitShow( gg_unit_n00C_0044 )
    call ShowUnitShow( gg_unit_n009_0038 )
    call ShowUnitShow( gg_unit_n009_0039 )
    call ShowUnitShow( gg_unit_n009_0050 )
    call ShowUnitShow( gg_unit_u00G_0053 )
    call ShowUnitShow( gg_unit_u00G_0054 )
    call ShowUnitShow( gg_unit_n00B_0151 )
    call ShowUnitShow( gg_unit_n00B_0152 )
    call ShowUnitShow( gg_unit_n004_0068 )
    call ShowUnitShow( gg_unit_n004_0078 )
    call ShowUnitShow( gg_unit_n004_0066 )
    call ShowUnitShow( gg_unit_n004_0099 )
    call ShowUnitShow( gg_unit_u00I_0100 )
    // Maze3
    call ShowUnitShow( gg_unit_n00E_0263 )
    call ShowUnitShow( gg_unit_n00E_0265 )
    call ShowUnitShow( gg_unit_n00E_0264 )
    call ShowUnitShow( gg_unit_h01I_0266 )
    call ShowUnitShow( gg_unit_n00E_0260 )
    call ShowUnitShow( gg_unit_n00E_0261 )
    call ShowUnitShow( gg_unit_n00E_0268 )
    call ShowUnitShow( gg_unit_h01I_0262 )
    call ShowUnitShow( gg_unit_n00E_0270 )
    call ShowUnitShow( gg_unit_n00E_0218 )
    call ShowUnitShow( gg_unit_n00E_0210 )
    call ShowUnitShow( gg_unit_n00E_0211 )
    call ShowUnitShow( gg_unit_n00E_0219 )
    call ShowUnitShow( gg_unit_n00E_0267 )
    call ShowUnitShow( gg_unit_n00E_0269 )
    call ShowUnitShow( gg_unit_h01I_0280 )
    call ShowUnitShow( gg_unit_n00E_0275 )
    call ShowUnitShow( gg_unit_n00E_0274 )
    call ShowUnitShow( gg_unit_n00E_0271 )
    call ShowUnitShow( gg_unit_n00E_0272 )
    call ShowUnitShow( gg_unit_n00E_0273 )
    call ShowUnitShow( gg_unit_n00E_0276 )
    call ShowUnitShow( gg_unit_n00E_0278 )
    call ShowUnitShow( gg_unit_n00E_0277 )
    call ShowUnitShow( gg_unit_n00E_0214 )
    call ShowUnitShow( gg_unit_n00E_0213 )
    call ShowUnitShow( gg_unit_n00E_0217 )
    call ShowUnitShow( gg_unit_n00E_0216 )
    call ShowUnitShow( gg_unit_n00E_0215 )
    call ShowUnitShow( gg_unit_h01I_0220 )
    call ShowUnitShow( gg_unit_h01I_0225 )
    call ShowUnitShow( gg_unit_n00E_0221 )
    call ShowUnitShow( gg_unit_n00E_0222 )
    call ShowUnitShow( gg_unit_h01M_0258 )
    call ShowUnitShow( gg_unit_h01M_0257 )
    call ShowUnitShow( gg_unit_h01M_0147 )
    call ShowUnitShow( gg_unit_h01M_0212 )
    call ShowUnitShow( gg_unit_n00C_0234 )
    call ShowUnitShow( gg_unit_u00J_0149 )
    call ShowUnitShow( gg_unit_n009_0153 )
    call ShowUnitShow( gg_unit_u00A_0156 )
    call ShowUnitShow( gg_unit_u00A_0157 )
    call ShowUnitShow( gg_unit_u00A_0158 )
    call ShowUnitShow( gg_unit_u00A_0159 )
    call ShowUnitShow( gg_unit_u00A_0160 )
    call ShowUnitShow( gg_unit_h01M_0162 )
    call ShowUnitShow( gg_unit_h01M_0163 )
    call ShowUnitShow( gg_unit_h01M_0161 )
    // Fin
    call ShowUnitShow( gg_unit_n00C_0323 )
    call ShowUnitShow( gg_unit_n00C_0324 )
    call ShowUnitShow( gg_unit_n00C_0058 )
    call ShowUnitShow( gg_unit_n00C_0063 )
    call ShowUnitShow( gg_unit_n00C_0115 )
    call ShowUnitShow( gg_unit_n00C_0143 )
    call ShowUnitShow( gg_unit_n00C_0150 )
endfunction

//===========================================================================
function InitTrig_UnitVariables takes nothing returns nothing
    set gg_trg_UnitVariables = CreateTrigger(  )
    call TriggerAddAction( gg_trg_UnitVariables, function Trig_UnitVariables_Actions )
endfunction

//===========================================================================
// Trigger: Table
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
library Table /* made by Bribe, special thanks to Vexorian & Nestharus, version 4.1.0.1.
    
    One map, one hashtable. Welcome to NewTable 4.1.0.1
    
    This newest iteration of Table introduces the new HashTable struct.
    You can now instantiate HashTables which enables the use of large
    parent and large child keys, just like a standard hashtable. Previously,
    the user would have to instantiate a Table to do this on their own which -
    while doable - is something the user should not have to do if I can add it
    to this resource myself (especially if they are inexperienced).
    
    This library was originally called NewTable so it didn't conflict with
    the API of Table by Vexorian. However, the damage is done and it's too
    late to change the library name now. To help with damage control, I
    have provided an extension library called TableBC, which bridges all
    the functionality of Vexorian's Table except for 2-D string arrays &
    the ".flush(integer)" method. I use ".flush()" to flush a child hash-
    table, because I wanted the API in NewTable to reflect the API of real
    hashtables (I thought this would be more intuitive).
    
    API
    
    ------------
    struct Table
    | static method create takes nothing returns Table
    |     create a new Table
    |    
    | method destroy takes nothing returns nothing
    |     destroy it
    |    
    | method flush takes nothing returns nothing
    |     flush all stored values inside of it
    |    
    | method remove takes integer key returns nothing
    |     remove the value at index "key"
    |    
    | method operator []= takes integer key, $TYPE$ value returns nothing
    |     assign "value" to index "key"
    |    
    | method operator [] takes integer key returns $TYPE$
    |     load the value at index "key"
    |    
    | method has takes integer key returns boolean
    |     whether or not the key was assigned
    |
    ----------------
    struct TableArray
    | static method operator [] takes integer array_size returns TableArray
    |     create a new array of Tables of size "array_size"
    |
    | method destroy takes nothing returns nothing
    |     destroy it
    |
    | method flush takes nothing returns nothing
    |     flush and destroy it
    |
    | method operator size takes nothing returns integer
    |     returns the size of the TableArray
    |
    | method operator [] takes integer key returns Table
    |     returns a Table accessible exclusively to index "key"
*/
    
globals
    private integer less = 0    //Index generation for TableArrays (below 0).
    private integer more = 8190 //Index generation for Tables.
    //Configure it if you use more than 8190 "key" variables in your map (this will never happen though).
    
    private hashtable ht = InitHashtable()
    private key sizeK
    private key listK
endglobals
    
private struct dex extends array
    static method operator size takes nothing returns Table
        return sizeK
    endmethod
    static method operator list takes nothing returns Table
        return listK
    endmethod
endstruct
    
private struct handles extends array
    method has takes integer key returns boolean
        return HaveSavedHandle(ht, this, key)
    endmethod
    method remove takes integer key returns nothing
        call RemoveSavedHandle(ht, this, key)
    endmethod
endstruct
    
private struct agents extends array
    method operator []= takes integer key, agent value returns nothing
        call SaveAgentHandle(ht, this, key, value)
    endmethod
endstruct
    
//! textmacro NEW_ARRAY_BASIC takes SUPER, FUNC, TYPE
private struct $TYPE$s extends array
    method operator [] takes integer key returns $TYPE$
        return Load$FUNC$(ht, this, key)
    endmethod
    method operator []= takes integer key, $TYPE$ value returns nothing
        call Save$FUNC$(ht, this, key, value)
    endmethod
    method has takes integer key returns boolean
        return HaveSaved$SUPER$(ht, this, key)
    endmethod
    method remove takes integer key returns nothing
        call RemoveSaved$SUPER$(ht, this, key)
    endmethod
endstruct
private module $TYPE$m
    method operator $TYPE$ takes nothing returns $TYPE$s
        return this
    endmethod
endmodule
//! endtextmacro
    
//! textmacro NEW_ARRAY takes FUNC, TYPE
private struct $TYPE$s extends array
    method operator [] takes integer key returns $TYPE$
        return Load$FUNC$Handle(ht, this, key)
    endmethod
    method operator []= takes integer key, $TYPE$ value returns nothing
        call Save$FUNC$Handle(ht, this, key, value)
    endmethod
    method has takes integer key returns boolean
        return HaveSavedHandle(ht, this, key)
    endmethod
    method remove takes integer key returns nothing
        call RemoveSavedHandle(ht, this, key)
    endmethod
endstruct
private module $TYPE$m
    method operator $TYPE$ takes nothing returns $TYPE$s
        return this
    endmethod
endmodule
//! endtextmacro
    
//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//! runtextmacro NEW_ARRAY_BASIC("Real", "Real", "real")
//! runtextmacro NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//! runtextmacro NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//! runtextmacro NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    
//! runtextmacro NEW_ARRAY("Player", "player")
//! runtextmacro NEW_ARRAY("Widget", "widget")
//! runtextmacro NEW_ARRAY("Destructable", "destructable")
//! runtextmacro NEW_ARRAY("Item", "item")
//! runtextmacro NEW_ARRAY("Unit", "unit")
//! runtextmacro NEW_ARRAY("Ability", "ability")
//! runtextmacro NEW_ARRAY("Timer", "timer")
//! runtextmacro NEW_ARRAY("Trigger", "trigger")
//! runtextmacro NEW_ARRAY("TriggerCondition", "triggercondition")
//! runtextmacro NEW_ARRAY("TriggerAction", "triggeraction")
//! runtextmacro NEW_ARRAY("TriggerEvent", "event")
//! runtextmacro NEW_ARRAY("Force", "force")
//! runtextmacro NEW_ARRAY("Group", "group")
//! runtextmacro NEW_ARRAY("Location", "location")
//! runtextmacro NEW_ARRAY("Rect", "rect")
//! runtextmacro NEW_ARRAY("BooleanExpr", "boolexpr")
//! runtextmacro NEW_ARRAY("Sound", "sound")
//! runtextmacro NEW_ARRAY("Effect", "effect")
//! runtextmacro NEW_ARRAY("UnitPool", "unitpool")
//! runtextmacro NEW_ARRAY("ItemPool", "itempool")
//! runtextmacro NEW_ARRAY("Quest", "quest")
//! runtextmacro NEW_ARRAY("QuestItem", "questitem")
//! runtextmacro NEW_ARRAY("DefeatCondition", "defeatcondition")
//! runtextmacro NEW_ARRAY("TimerDialog", "timerdialog")
//! runtextmacro NEW_ARRAY("Leaderboard", "leaderboard")
//! runtextmacro NEW_ARRAY("Multiboard", "multiboard")
//! runtextmacro NEW_ARRAY("MultiboardItem", "multiboarditem")
//! runtextmacro NEW_ARRAY("Trackable", "trackable")
//! runtextmacro NEW_ARRAY("Dialog", "dialog")
//! runtextmacro NEW_ARRAY("Button", "button")
//! runtextmacro NEW_ARRAY("TextTag", "texttag")
//! runtextmacro NEW_ARRAY("Lightning", "lightning")
//! runtextmacro NEW_ARRAY("Image", "image")
//! runtextmacro NEW_ARRAY("Ubersplat", "ubersplat")
//! runtextmacro NEW_ARRAY("Region", "region")
//! runtextmacro NEW_ARRAY("FogState", "fogstate")
//! runtextmacro NEW_ARRAY("FogModifier", "fogmodifier")
//! runtextmacro NEW_ARRAY("Hashtable", "hashtable")
    
struct Table extends array
    
    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
    implement realm
    implement integerm
    implement booleanm
    implement stringm
    implement playerm
    implement widgetm
    implement destructablem
    implement itemm
    implement unitm
    implement abilitym
    implement timerm
    implement triggerm
    implement triggerconditionm
    implement triggeractionm
    implement eventm
    implement forcem
    implement groupm
    implement locationm
    implement rectm
    implement boolexprm
    implement soundm
    implement effectm
    implement unitpoolm
    implement itempoolm
    implement questm
    implement questitemm
    implement defeatconditionm
    implement timerdialogm
    implement leaderboardm
    implement multiboardm
    implement multiboarditemm
    implement trackablem
    implement dialogm
    implement buttonm
    implement texttagm
    implement lightningm
    implement imagem
    implement ubersplatm
    implement regionm
    implement fogstatem
    implement fogmodifierm
    implement hashtablem
    
    method operator handle takes nothing returns handles
        return this
    endmethod
    
    method operator agent takes nothing returns agents
        return this
    endmethod
    
    //set this = tb[GetSpellAbilityId()]
    method operator [] takes integer key returns Table
        return LoadInteger(ht, this, key) //return this.integer[key]
    endmethod
    
    //set tb[389034] = 8192
    method operator []= takes integer key, Table tb returns nothing
        call SaveInteger(ht, this, key, tb) //set this.integer[key] = tb
    endmethod
    
    //set b = tb.has(2493223)
    method has takes integer key returns boolean
        return HaveSavedInteger(ht, this, key) //return this.integer.has(key)
    endmethod
    
    //call tb.remove(294080)
    method remove takes integer key returns nothing
        call RemoveSavedInteger(ht, this, key) //call this.integer.remove(key)
    endmethod
    
    //Remove all data from a Table instance
    method flush takes nothing returns nothing
        call FlushChildHashtable(ht, this)
    endmethod
    
    //local Table tb = Table.create()
    static method create takes nothing returns Table
        local Table this = dex.list[0]
        
        if this == 0 then
            set this = more + 1
            set more = this
        else
            set dex.list[0] = dex.list[this]
            call dex.list.remove(this) //Clear hashed memory
        endif
        
        debug set dex.list[this] = -1
        return this
    endmethod
    
    // Removes all data from a Table instance and recycles its index.
    //
    //     call tb.destroy()
    //
    method destroy takes nothing returns nothing
        debug if dex.list[this] != -1 then
            debug call BJDebugMsg("Table Error: Tried to double-free instance: " + I2S(this))
            debug return
        debug endif
        
        call this.flush()
        
        set dex.list[this] = dex.list[0]
        set dex.list[0] = this
    endmethod
    
    //! runtextmacro optional TABLE_BC_METHODS()
endstruct
    
//! runtextmacro optional TABLE_BC_STRUCTS()
    
struct TableArray extends array
    
    //Returns a new TableArray to do your bidding. Simply use:
    //
    //    local TableArray ta = TableArray[array_size]
    //
    static method operator [] takes integer array_size returns TableArray
        local Table tb = dex.size[array_size] //Get the unique recycle list for this array size
        local TableArray this = tb[0]         //The last-destroyed TableArray that had this array size
        
        debug if array_size <= 0 then
            debug call BJDebugMsg("TypeError: Invalid specified TableArray size: " + I2S(array_size))
            debug return 0
        debug endif
        
        if this == 0 then
            set this = less - array_size
            set less = this
        else
            set tb[0] = tb[this]  //Set the last destroyed to the last-last destroyed
            call tb.remove(this)  //Clear hashed memory
        endif
        
        set dex.size[this] = array_size //This remembers the array size
        return this
    endmethod
    
    //Returns the size of the TableArray
    method operator size takes nothing returns integer
        return dex.size[this]
    endmethod
    
    //This magic method enables two-dimensional[array][syntax] for Tables,
    //similar to the two-dimensional utility provided by hashtables them-
    //selves.
    //
    //ta[integer a].unit[integer b] = unit u
    //ta[integer a][integer c] = integer d
    //
    //Inline-friendly when not running in debug mode
    //
    method operator [] takes integer key returns Table
        static if DEBUG_MODE then
            local integer i = this.size
            if i == 0 then
                call BJDebugMsg("IndexError: Tried to get key from invalid TableArray instance: " + I2S(this))
                return 0
            elseif key < 0 or key >= i then
                call BJDebugMsg("IndexError: Tried to get key [" + I2S(key) + "] from outside TableArray bounds: " + I2S(i))
                return 0
            endif
        endif
        return this + key
    endmethod
    
    //Destroys a TableArray without flushing it; I assume you call .flush()
    //if you want it flushed too. This is a public method so that you don't
    //have to loop through all TableArray indices to flush them if you don't
    //need to (ie. if you were flushing all child-keys as you used them).
    //
    method destroy takes nothing returns nothing
        local Table tb = dex.size[this.size]
        
        debug if this.size == 0 then
            debug call BJDebugMsg("TypeError: Tried to destroy an invalid TableArray: " + I2S(this))
            debug return
        debug endif
        
        if tb == 0 then
            //Create a Table to index recycled instances with their array size
            set tb = Table.create()
            set dex.size[this.size] = tb
        endif
        
        call dex.size.remove(this) //Clear the array size from hash memory
        
        set tb[this] = tb[0]
        set tb[0] = this
    endmethod
    
    private static Table tempTable
    private static integer tempEnd
    
    //Avoids hitting the op limit
    private static method clean takes nothing returns nothing
        local Table tb = .tempTable
        local integer end = tb + 0x1000
        if end < .tempEnd then
            set .tempTable = end
            call ForForce(bj_FORCE_PLAYER[0], function thistype.clean)
        else
            set end = .tempEnd
        endif
        loop
            call tb.flush()
            set tb = tb + 1
            exitwhen tb == end
        endloop
    endmethod
    
    //Flushes the TableArray and also destroys it. Doesn't get any more
    //similar to the FlushParentHashtable native than this.
    //
    method flush takes nothing returns nothing
        debug if this.size == 0 then
            debug call BJDebugMsg("TypeError: Tried to flush an invalid TableArray instance: " + I2S(this))
            debug return
        debug endif
        set .tempTable = this
        set .tempEnd = this + this.size
        call ForForce(bj_FORCE_PLAYER[0], function thistype.clean)
        call this.destroy()
    endmethod
    
endstruct
    
//NEW: Added in Table 4.0. A fairly simple struct but allows you to do more
//than that which was previously possible.
struct HashTable extends array

    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    method operator [] takes integer index returns Table
        local Table t = Table(this)[index]
        if t == 0 then
            set t = Table.create()
            set Table(this)[index] = t //whoops! Forgot that line. I'm out of practice!
        endif
        return t
    endmethod

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    method remove takes integer index returns nothing
        local Table t = Table(this)[index]
        if t != 0 then
            call t.destroy()
            call Table(this).remove(index)
        endif
    endmethod
    
    //Added in version 4.1
    method has takes integer index returns boolean
        return Table(this).has(index)
    endmethod
    
    //HashTables are just fancy Table indices.
    method destroy takes nothing returns nothing
        call Table(this).destroy()
    endmethod
    
    //Like I said above...
    static method create takes nothing returns thistype
        return Table.create()
    endmethod

endstruct

endlibrary
 //===========================================================================
// Trigger: StringHashEx
//===========================================================================
//TESH.scrollpos=2
//TESH.alwaysfold=0
library StringHashEx requires Table

    globals
        private constant integer REHASH = 1222483
        private key tbKey
        private Table t = tbKey //allowed due to the way Table works
    endglobals

    function StringHashEx takes string key returns integer
        local integer sh = StringHash(key)
        loop
            if not t.string.has(sh) then
                set t.string[sh] = key
                exitwhen true
            endif
            exitwhen t.string[sh] == key
            set sh = sh + REHASH
        endloop
        return sh
    endfunction

endlibrary
//===========================================================================
// Trigger: Sync
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
library Sync requires SyncInteger, optional PlayerUtils
/***************************************************************
*
*   v1.2.4, by TriggerHappy
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*
*   This library allows you to quickly synchronize async data such as,
*   camera position, or a the contents of a local file, to all players
*   in the map by using the game cache.
*
*   Full Documentation: -http://www.hiveworkshop.com/forums/pastebin.php?id=p4f84s
*
*   _________________________________________________________________________
*   1. Installation
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*   Copy the script to your map and save it (requires JassHelper *or* JNGP)
*   _________________________________________________________________________
*   2. API
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*       struct SyncData
*
*           method start takes nothing returns nothing
*           method startChunk takes integer i, integer end returns nothing
*           method refresh takes nothing returns nothing
*           method destroy takes nothing returns nothing
*
*           method addInt takes integer i returns nothing
*           method addReal takes integer i returns nothing
*           method addString takes string s, integer len returns nothing
*           method addBool takes booleanflag returns nothing
*
*           method readInt takes integer index returns integer
*           method readReal takes integer index returns integer
*           method readString takes integer index returns string
*           method readBool takes integer index returns boolean
*
*           method hasInt takes nothing returns boolean
*           method hasReal takes nothing returns boolean
*           method hasString takes nothing returns boolean
*           method hasBool takes nothing returns boolean
*
*           method isPlayerDone takes player p returns boolean
*           method isPlayerIdDone takes integer pid returns boolean
*
*           method addEventListener takes filterfunc func returns nothing
*
*           ---------
*
*           filterfunc onComplete
*           filterfunc onError
*           filterfunc onUpdate
*           trigger trigger
*
*           readonly player from
*
*           readonly real timeStarted
*           readonly real timeFinished
*           readonly real timeElapsed
*
*           readonly integer intCount
*           readonly integer boolCount
*           readonly integer strCount
*           readonly integer realCount
*           readonly integer playersDone
*
*           readonly boolean buffering
*
*           readonly static integer last
*           readonly static player LocalPlayer
*           readonly static boolean Initialized
*
*           static method create takes player from returns SyncData
*           static method destroy takes nothing returns nothing
*           static method gameTime takes nothing returns real
*
*       function GetSyncedData takes nothing returns SyncData
*
***************************************************************/

    globals
        // characters that can be synced (ascii)
        private constant string ALPHABET                    = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

        // safe characters for use in game cache keys
        // (case sensitive)
        private constant string SAFE_KEYS                   = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`{|}~"

        // how fast the buffer updates
        private constant real UPDATE_PERIOD                 = 0.03125

        // automatically recycle indices when the syncing player leaves
        private constant boolean AUTO_DESTROY_ON_LEAVE      = true

        // automatically stop buffering when an error occurs
        private constant boolean STOP_BUFFERING_ON_ERROR    = true

        // preload game cache key strings on init
        private constant boolean PRELOAD_STR_CACHE          = true

        // size of the alphabet
        private constant integer ALPHABET_BASE              = StringLength(ALPHABET)

        // stop reading the string buffer when reaching this char
        private constant string TERM_CHAR                   = "`"

        // maximum number of strings *per instance*
        private constant integer MAX_STRINGS                = 8192

        // filenames for gc (short names have faster sync time)
        private constant string CACHE_FILE                  = "i.w3v"
        private constant string CACHE_FILE_STR              = "s.w3v"

        // don't edit below this line
        constant integer EVENT_SYNC_CACHE       = 3
        constant integer SYNC_ERROR_TIMEOUT     = 1
        constant integer SYNC_ERROR_PLAYERLEFT  = 2
    endglobals

    //**************************************************************

    function GetSyncedData takes nothing returns SyncData
        return SyncData(SyncData.Last)
    endfunction

    public function I2Char takes string alphabet, integer i returns string
        return SubString(alphabet, i, i + 1)
    endfunction

    public function Char2I takes string alphabet, string c returns integer
        local integer i = 0
        local string s
        local integer l = StringLength(alphabet)
        loop
            set s = I2Char(alphabet, i)
            exitwhen i == l
            if (s == c) then
                return i
            endif
            set i = i + 1
        endloop
        return 0
    endfunction

    public function ConvertBase takes string alphabet, integer i returns string
        local integer b
        local string s = ""
        local integer l = StringLength(alphabet)
        if i < l then
            return I2Char(alphabet, i)
        endif
        loop
            exitwhen i <= 0
            set b = i - ( i / l ) * l
            set s = I2Char(alphabet, b) + s
            set i = i / l
        endloop
        return s
    endfunction

    public function PopulateString takes string s, integer makeLen returns string
        local integer i = 0
        local integer l = StringLength(s)
        if (l == makeLen) then
            return s
        endif
        set l = makeLen-l
        loop
            exitwhen i > l
            set s = s + TERM_CHAR
            set i = i + 1
        endloop
        return s
    endfunction

    //**************************************************************

    globals
        // string table keys
        private constant integer KEY_STR_POS = (0*MAX_STRINGS)
        private constant integer KEY_STR_LEN = (1*MAX_STRINGS)

        // pending data storage space
        private constant integer KEY_STR_CACHE = (2*MAX_STRINGS)
    endglobals

    struct SyncData

        real timeout
        filterfunc onComplete
        filterfunc onError
        filterfunc onUpdate
        trigger trigger

        readonly integer lastError

        readonly player from

        readonly real timeStarted
        readonly real timeFinished
        readonly real timeElapsed

        readonly integer intCount
        readonly integer boolCount
        readonly integer strCount
        readonly integer realCount
        readonly integer playersDone

        readonly boolean buffering

        readonly static boolean Initialized = false
        readonly static integer Last        = 0
        readonly static player LocalPlayer
        readonly static integer LocalPlayerID

        private static integer Running   = 0
        private static real timeCounter  = 0.00
        private static trigger EventTrig = CreateTrigger()

        private static hashtable Table
        private static hashtable CharTable
        private static gamecache array Cache
        private static integer array PendingCount
        private static timer Elapsed
        private static timer BufferTimer
        private static integer AlphaHash
     
        private integer strBufferLen
        private trigger eventTrig
        private string mkey
        private boolean localFinished

        private thistype next
        private thistype prev
     
        static method bool2I takes boolean b returns integer // requires preloading cache with data
            if (b) then
                return 1
            endif
            return 0
        endmethod
     
        private static method hashString takes string c returns integer
            return StringHash(I2S(bool2I(StringCase(c, true) == c)) + c)
        endmethod

        static method char2I takes string alphabet, string c returns integer // requires preloading table with data
            return LoadInteger(SyncData.CharTable, .AlphaHash, .hashString(c))
        endmethod

        private method resetVars takes nothing returns nothing
            set this.intCount       = 0
            set this.strCount       = 0
            set this.boolCount      = 0
            set this.realCount      = 0
            set this.playersDone    = 0
            set this.strBufferLen   = 0
            set this.timeStarted    = 0
            set this.timeFinished   = 0
            set this.lastError      = 0
            set this.onComplete     = null
            set this.onError        = null
            set this.onUpdate       = null
            set this.timeout        = 0.00
            set this.buffering      = false
            set this.localFinished  = false
            set this.trigger        = null
        endmethod

        private static method getKey takes integer pos returns string
            local string position=""
   
            if (HaveSavedString(Table, KEY_STR_CACHE, pos)) then
                return LoadStr(Table, KEY_STR_CACHE, pos)
            endif
   
            set position = ConvertBase(SAFE_KEYS, pos)
            call SaveStr(Table, KEY_STR_CACHE, pos, position)
   
            return position
        endmethod

        static method create takes player from returns thistype
            local thistype this

            // Player has to be playing because of GetLocalPlayer use.
            if (GetPlayerController(from) != MAP_CONTROL_USER or GetPlayerSlotState(from) != PLAYER_SLOT_STATE_PLAYING) then
                return 0
            endif

            set this = thistype.allocate()
 
            set this.from   = from
            set this.mkey   = getKey(this-1)

            call this.resetVars()

            set thistype(0).next.prev = this
            set this.next = thistype(0).next
            set thistype(0).next = this

            set this.prev = 0

            return this
        endmethod

        method refresh takes nothing returns nothing
            local integer i = 0
            local integer p = 0
       
            loop
                static if (LIBRARY_PlayerUtils) then
                    exitwhen i == User.AmountPlaying
                    set p = User.fromPlaying(i).id
                else
                    exitwhen i == bj_MAX_PLAYER_SLOTS
                    set p = i
                endif

                call RemoveSavedInteger(Table, this, KEY_STR_POS + p)
                call RemoveSavedInteger(Table, this, KEY_STR_LEN + p)
                call RemoveSavedBoolean(Table, p, this) // playerdone

                set i = i + 1
            endloop

            call FlushStoredMission(Cache[0], this.mkey)
            call FlushStoredMission(Cache[1], this.mkey)

            call this.resetVars()
        endmethod

        method destroy takes nothing returns nothing
            if (this.eventTrig != null) then
                call DestroyTrigger(this.eventTrig)
                set this.eventTrig=null
            endif

            call this.refresh()

            set this.next.prev = this.prev
            set this.prev.next = this.next

            call this.deallocate()
        endmethod

        method hasInt takes integer index returns boolean
            return HaveStoredInteger(Cache[0], this.mkey, getKey(index))
        endmethod

        method hasReal takes integer index returns boolean
            return HaveStoredReal(Cache[0], this.mkey, getKey(index))
        endmethod

        method hasBool takes integer index returns boolean
            return HaveStoredBoolean(Cache[0], this.mkey, getKey(index))
        endmethod

        method hasString takes integer index returns boolean
            local integer i = LoadInteger(Table, this, KEY_STR_POS+index)
            if (index > 0 and i == 0) then
                return false
            endif
            return HaveStoredInteger(Cache[1], this.mkey, getKey(i + LoadInteger(Table, this, KEY_STR_LEN+index)))
        endmethod

        method addInt takes integer i returns nothing
            local string position=getKey(intCount)
   
            if (LocalPlayer == this.from) then
                call StoreInteger(Cache[0], this.mkey, position, i)
            endif
   
            set intCount=intCount+1
        endmethod

        method addReal takes real i returns nothing
            local string position=getKey(realCount)
   
            if (LocalPlayer == this.from) then
                call StoreReal(Cache[0], this.mkey, position, i)
            endif
   
            set realCount=realCount+1
        endmethod

        method addBool takes boolean flag returns nothing
            local string position=getKey(boolCount)
   
            if (LocalPlayer == this.from) then
                call StoreBoolean(Cache[0], this.mkey, position, flag)
            endif
   
            set boolCount=boolCount+1
        endmethod

        // SyncStoredString doesn't work
        method addString takes string s, integer length returns nothing
            local string position
            local integer i = 0
            local integer strPos = 0
            local integer strLen = 0

            if (StringLength(s) < length) then
                set s = PopulateString(s, length)
            endif
 
            // store the string position in the table
            if (strCount == 0) then
                call SaveInteger(Table, this, KEY_STR_POS, 0)
            else
                set strLen = LoadInteger(Table, this, KEY_STR_LEN + (strCount-1)) + 1
                set strPos = LoadInteger(Table, this, KEY_STR_POS + (strCount-1)) + strLen

                call SaveInteger(Table, this, KEY_STR_POS + strCount, strPos)
            endif

            // convert each character in the string to an integer
            loop
                exitwhen i > length

                set position = getKey(strPos + i)

                if (LocalPlayer == this.from) then
                    call StoreInteger(Cache[1], this.mkey, position, .char2I(ALPHABET, SubString(s, i, i + 1)))
                endif

                set i = i + 1
            endloop

            set strBufferLen = strBufferLen + length
            call SaveInteger(Table, this, KEY_STR_LEN+strCount, length) // store the length as well
            set strCount=strCount+1
        endmethod

        method readInt takes integer index returns integer
            return GetStoredInteger(Cache[0], this.mkey, getKey(index))
        endmethod

        method readReal takes integer index returns real
            return GetStoredReal(Cache[0], this.mkey, getKey(index))
        endmethod

        method readBool takes integer index returns boolean
            return GetStoredBoolean(Cache[0], this.mkey, getKey(index))
        endmethod

        method readString takes integer index returns string
            local string s = ""
            local string c
            local integer i = 0
            local integer strLen = LoadInteger(Table, this, KEY_STR_LEN+index)
            local integer strPos
   
            if (not hasString(index)) then
                return null
            endif

            set strLen = LoadInteger(Table, this, KEY_STR_LEN+index)
            set strPos = LoadInteger(Table, this, KEY_STR_POS+index)
   
            loop
                exitwhen i > strLen
       
                set c = I2Char(ALPHABET, GetStoredInteger(Cache[1], this.mkey, getKey(strPos + i)))

                if (c == TERM_CHAR) then
                    return s
                endif

                set s = s + c
                set i = i + 1
            endloop

            return s
        endmethod

        private method fireListeners takes nothing returns nothing
            set Last = this

            if (this.eventTrig != null) then
                call TriggerEvaluate(this.eventTrig)
            endif

            if (this.trigger != null and TriggerEvaluate(this.trigger)) then
                call TriggerExecute(this.trigger)
            endif
        endmethod

        private method fireEvent takes filterfunc func returns nothing
            set Last = this

            call TriggerAddCondition(EventTrig, func)
            call TriggerEvaluate(EventTrig)
            call TriggerClearConditions(EventTrig)
        endmethod

        method addEventListener takes filterfunc func returns nothing
            if (this.eventTrig == null) then
                set this.eventTrig = CreateTrigger()
            endif
            call TriggerAddCondition(this.eventTrig, func)
        endmethod

        public static method gameTime takes nothing returns real
            return timeCounter + TimerGetElapsed(Elapsed)
        endmethod

        private method error takes integer errorId returns nothing
            set this.lastError = errorId

            if (this.onError != null) then
                call this.fireEvent(this.onError)
            endif

            call this.fireListeners()

            static if (STOP_BUFFERING_ON_ERROR) then
                set this.buffering = false
            endif
        endmethod

        private static method readBuffer takes nothing returns nothing
            local boolean b = true
            local integer i = 0
            local thistype data = thistype(0).next

            loop
                exitwhen data == 0

                // find the nearest instance that is still buffering
                loop
                    exitwhen data.buffering or data == 0
                    set data=data.next
                endloop

                // if none are found, exit
                if (not data.buffering) then
                    return
                endif

                set data.timeElapsed = data.timeElapsed + UPDATE_PERIOD

                if (data.onUpdate != null) then
                    call data.fireEvent(data.onUpdate)
                endif

                if (data.timeout > 0 and data.timeElapsed > data.timeout) then
                    call data.error(SYNC_ERROR_TIMEOUT)
                endif

                // if the player has left, destroy the instance
                if (GetPlayerSlotState(data.from) != PLAYER_SLOT_STATE_PLAYING) then
                    call data.error(SYNC_ERROR_PLAYERLEFT)
                    static if (AUTO_DESTROY_ON_LEAVE) then
                        call data.destroy()
                    endif
                endif

                set b = true

                // make sure all integers have been synced
                if (data.intCount > 0 and  not data.hasInt(data.intCount-1)) then
                    set b = false
                endif

                // make sure all reals have been synced
                if (data.realCount > 0 and not data.hasReal(data.realCount-1)) then
                    set b = false
                endif

                // check strings too
                if (data.strCount > 0 and not data.hasString(data.strCount-1)) then
                    set b = false
                endif

                // and booleans
                if (data.boolCount > 0 and not data.hasBool(data.boolCount-1)) then
                    set b = false
                endif

                // if everything has been synced
                if (b) then

                    if (not data.localFinished) then // async
                        set data.localFinished = true

                        // notify everyone that the local player has recieved all of the data
                        call SyncInteger(LocalPlayer, data)
                    endif
               
                endif

                set data = data.next
            endloop
        endmethod

        method startChunk takes integer i, integer end returns nothing
            local integer n = 0
            local integer j = 0
            local integer p = 0
            local string position

            // Begin syncing
            loop
                exitwhen i > end

                set position = LoadStr(Table, KEY_STR_CACHE, i)
     
                if (i < intCount and LocalPlayer == this.from) then
                    call SyncStoredInteger(Cache[0], this.mkey, position)
                endif
                if (i < realCount and LocalPlayer == this.from) then
                    call SyncStoredReal(Cache[0], this.mkey, position)
                endif
                if (i < boolCount and LocalPlayer == this.from) then
                    call SyncStoredBoolean(Cache[0], this.mkey, position)
                endif
     
                if (i < strCount and LocalPlayer == this.from) then
                    set n = LoadInteger(Table, this, KEY_STR_LEN + i)
                    set p = LoadInteger(Table, this, KEY_STR_POS + i)
         
                    set j = 0
         
                    loop
                        exitwhen j > n
             
                        set position = LoadStr(Table, KEY_STR_CACHE, p + j)

                        if (LocalPlayer == this.from) then
                            call SyncStoredInteger(Cache[1], this.mkey, position)
                        endif

                        set j = j + 1
                    endloop
                endif
     
                set i = i + 1
            endloop
   
            if (this.timeStarted != 0.00) then
                return
            endif

            set this.timeStarted = gameTime()
            set this.playersDone = 0
            set this.buffering   = true
            set this.timeElapsed = (UPDATE_PERIOD - TimerGetElapsed(BufferTimer)) * -1
   
            if (Running==0) then
                call TimerStart(BufferTimer, UPDATE_PERIOD, true, function thistype.readBuffer)
            endif

            set Running=Running+1
        endmethod

        method start takes nothing returns nothing
            local integer l = intCount

            // Find the highest count
            if (l < realCount) then
                set l = realCount
            endif
            if (l < strCount) then
                set l = strCount
            endif
            if (l < boolCount) then
                set l = boolCount
            endif

            call startChunk(0, l)
        endmethod

        method isPlayerIdDone takes integer pid returns boolean
            return LoadBoolean(Table, pid, this)
        endmethod

        method isPlayerDone takes player p returns boolean
            return isPlayerIdDone(GetPlayerId(p))
        endmethod

        private static method updateStatus takes nothing returns boolean
            local integer i = 0
            local integer p = GetSyncedPlayerId()
            local boolean b = true
            local boolean c = true
            local thistype data = GetSyncedInteger()
            local triggercondition tc

            if (not data.buffering) then
                return false
            endif
     
            set data.playersDone = data.playersDone + 1
            call SaveBoolean(Table, p, data, true) // set playerdone

            // check if everyone has received the data
            loop
                static if (LIBRARY_PlayerUtils) then
                    exitwhen i == User.AmountPlaying
                    set p = User.fromPlaying(i).id
                    set c = User.fromPlaying(i).isPlaying
                else
                    exitwhen i == bj_MAX_PLAYER_SLOTS
                    set p = i
                    set c = (GetPlayerController(Player(p)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(p)) == PLAYER_SLOT_STATE_PLAYING)
                endif
       
                if (c and not data.isPlayerIdDone(p)) then
                    set b = false // someone hasn't
                endif

                set i = i + 1
            endloop

            // if everyone has recieved the data
            if (b) then
                set Running = Running-1

                if (Running == 0) then
                    call PauseTimer(BufferTimer)
                endif
     
                set data.buffering    = false
                set data.timeFinished = gameTime()
                set data.timeElapsed  = data.timeFinished - data.timeStarted
         
                // fire events
                if (data.onComplete != null) then
                    call data.fireEvent(data.onComplete)
                endif

                call data.fireListeners()
                call SyncInteger_FireEvents(EVENT_SYNC_CACHE)
            endif

            return false
        endmethod

        private static method trackTime takes nothing returns nothing
            set timeCounter = timeCounter + 10
        endmethod

        private static method preloadChar2I takes nothing returns nothing
            local integer i = 0
            local string c
         
            set .AlphaHash = .hashString(ALPHABET)
         
            loop
                exitwhen i >= ALPHABET_BASE

                set c = I2Char(ALPHABET, i)

                call SaveInteger(SyncData.CharTable, .AlphaHash, .hashString(c), Char2I(ALPHABET, c))

                set i = i + 1
            endloop
        endmethod

        private static method onInit takes nothing returns nothing
            set Table = InitHashtable()
            set CharTable = InitHashtable()
         
            set Cache[0] = InitGameCache(CACHE_FILE)
            set Cache[1] = InitGameCache(CACHE_FILE_STR)

            set Elapsed     = CreateTimer()
            set BufferTimer = CreateTimer()

            static if (LIBRARY_PlayerUtils) then
                set LocalPlayer   = User.Local
                set LocalPlayerID = User.fromLocal().id
            else
                set LocalPlayer   = GetLocalPlayer()
                set LocalPlayerID = GetPlayerId(LocalPlayer)
            endif

            call OnSyncInteger(Filter(function thistype.updateStatus))
            call TimerStart(Elapsed, 10., true, function thistype.trackTime)
   
            static if (PRELOAD_STR_CACHE) then
                loop
                    exitwhen Last == ALPHABET_BASE
                    call getKey(Last)
                    set Last = Last + 1
                endloop
                set Last = 0
            endif
   
            call preloadChar2I()

            set Initialized = true
        endmethod

    endstruct

endlibrary//===========================================================================
// Trigger: SyncInteger
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
library SyncInteger initializer Init uses optional UnitDex /*or any unit indexer*/, optional GroupUtils, optional xebasic, optional PlayerUtils
/***************************************************************
*
*   v1.1.0, by TriggerHappy
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*
*   This library allows you to send integers to all other players.
*
*   _________________________________________________________________________
*   1. Installation
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*   Copy the script to your map and save it (requires JassHelper *or* JNGP)
*   _________________________________________________________________________
*   2. How it works
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*       1. Creates {DUMMY_COUNT} units and assigns {BASE} of them an integer from 0-{BASE}.
*          The 2nd to last dummy is used to signal when the sequence of numbers is over and
*          the last dummy signifies a negative number.
*
*       2. Breaks down the number you want to sync to one or more {BASE} integers,
*          then selects each dummy unit assoicated with that integer.
*
*       4. The selection event fires for all players when the selection has been sycned
*
*       5. The ID of the selected unit is one of the {BASE} numbers. The current
*          total (starts at 0) is multiplied by {BASE} and the latest synced integer is
*          added to that. The process will repeat until it selects the 2nd to last dummy,
*          and the total is our result.
*   _________________________________________________________________________
*   3. Proper Usage
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*       - Avoid the SyncSelections native. It may cause the thread to hang or
*         make some units un-able to move.
*
*       - Dummies must be select-able (no locust)
*
*       - Run the script in debug mode while testing
*   _________________________________________________________________________
*   4. Function API
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*       function SyncInteger takes integer playerId, integer number returns boolean
*
*       function GetSyncedInteger takes nothing returns integer
*       function GetSyncedPlayer takes nothing returns player
*       function GetSyncedPlayerId takes nothing returns integer
*       function IsPlayerSyncing takes player p returns boolean
*       function IsSyncEnabled takes nothing returns boolean
*       function SyncIntegerToggle takes boolean flag returns nothing
*       function SyncIntegerEnable takes nothing returns nothing
*       function SyncIntegerDisable takes nothing returns nothing
*
*       function OnSyncInteger takes code func returns triggercondition
*       function RemoveSyncEvent takes triggercondition action returns nothing
*       function TriggerRegisterSyncEvent takes trigger t, integer eventtype returns nothing
*
*       function SyncInitialize takes nothing returns nothing
*       function SyncTerminate takes boolean destroyEvent returns nothing
*
*       function SyncNotify takes integer pid, unit dummy returns nothing
*       function SyncNotifyAddUnit takes unit dummy returns nothing
*
*   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
*   -http://www.hiveworkshop.com/threads/syncinteger.278674/
*
*/
        globals
            // calls SyncInitialize automatically
            public constant boolean AUTO_INIT          = true
     
            // owner of the dummy units
            public constant player DUMMY_PLAYER        = Player(PLAYER_NEUTRAL_PASSIVE)
     
            // dummy can *not* have locust (must be selectabe)
            // basically anything should work (like 'hfoo')
            public constant integer DUMMY_ID           = 'hfoo' // XE_DUMMY_UNITID
     
            // dummy ghost ability
            public constant integer DUMMY_ABILITY      = 'Aeth'

            // debug mode
            public constant boolean ALLOW_DEBUGGING    = true
     
            // higher == more dummies but faster
            public constant integer BASE               = 10

            // don't need to change this
            public constant integer DUMMY_COUNT        = BASE+2
     
            // endconfig
            constant integer EVENT_SYNC_INTEGER = 1
     
            private trigger OnSelectTrigger = CreateTrigger()
            private trigger EventTrig       = CreateTrigger()
            private trigger NotifyTrig      = CreateTrigger()
            private real FireEvent          = 0
     
            private group SelectionGroup

            private integer array SyncedInt
            private integer LastPlayer
            private integer LastSync
            private unit array SyncIntegerDummy
            private integer array AttachedInteger
            private player LocalPlayer
            private unit array NotifyUnit
            private integer NotifyCount = 0
            private integer array NotifyIndex
            private real DUMMY_X = 0
            private real DUMMY_Y = 0
        endglobals
 
        function GetSyncedInteger takes nothing returns integer
            return LastSync
        endfunction
 
        function GetSyncedPlayer takes nothing returns player
            return Player(LastPlayer)
        endfunction
       
        function GetSyncedPlayerId takes nothing returns integer
            return LastPlayer
        endfunction
 
        function IsPlayerSyncing takes player p returns boolean
            return (SyncedInt[GetPlayerId(p)] != -1)
        endfunction
 
        function IsPlayerIdSyncing takes integer pid returns boolean
            return (SyncedInt[pid] != -1)
        endfunction

        function IsSyncEnabled takes nothing returns boolean
            return IsTriggerEnabled(OnSelectTrigger)
        endfunction
 
        function SyncIntegerEnable takes nothing returns nothing
            call EnableTrigger(OnSelectTrigger)
        endfunction
 
        function SyncIntegerDisable takes nothing returns nothing
            call DisableTrigger(OnSelectTrigger)
        endfunction
 
        function SyncIntegerToggle takes boolean flag returns nothing
            if (flag) then
                call EnableTrigger(OnSelectTrigger)
            else
                call DisableTrigger(OnSelectTrigger)
            endif
        endfunction
 
        function OnSyncInteger takes filterfunc func returns triggercondition
            return TriggerAddCondition(EventTrig, func)
        endfunction
 
        function OnSyncNotify takes filterfunc func returns nothing
            call TriggerAddCondition(NotifyTrig, func)
        endfunction
       
        function RemoveNotifyEvent takes triggercondition action returns nothing
           call TriggerRemoveCondition(NotifyTrig, action)
        endfunction
       
        function SyncNotify takes player p, integer notifyId returns nothing
            local player p2
           
            static if (LIBRARY_PlayerUtils) then
                set p2 = User.Local
            else
                set p2 = GetLocalPlayer()
            endif
           
            if (p == p2) then
                call SelectUnit(NotifyUnit[notifyId], true)
                call SelectUnit(NotifyUnit[notifyId], false)
            endif
        endfunction
       
        public function FireEvents takes real eventtype returns nothing
            set FireEvent = eventtype
            set FireEvent = 0
        endfunction
       
        private function Debug takes boolean b, string s returns nothing
            static if (ALLOW_DEBUGGING and DEBUG_MODE) then
                if (b) then
                    call DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 60, "|c00FF0000" + SCOPE_PREFIX + s + "|r")
                endif
            endif
        endfunction
       
        function SyncNotifyCreate takes nothing returns integer
            local unit u = CreateUnit(DUMMY_PLAYER, DUMMY_ID, DUMMY_X, DUMMY_Y, 270)
            local integer uid = GetUnitUserData(u)
           
            set NotifyCount = NotifyCount + 1
           
            if (uid == 0) then
                call SetUnitUserData(u, NotifyCount)
                set uid = NotifyCount
            endif
           
            call Debug(uid == 0, "No unit indexer found.")
           
            set NotifyUnit[NotifyCount] = u
            set NotifyIndex[uid] = NotifyCount
           
            return NotifyCount
        endfunction
       
        function SyncInteger takes player p, integer number returns boolean
            local integer x = number
            local integer i = 0
            local integer d = BASE
            local integer j = 0
            local integer n = 0
            local integer l = 0
            local integer playerId = GetPlayerId(p)
            local unit u
            local unit last

            call Debug(OnSelectTrigger == null, "SyncInteger: OnSelectTrigger is destroyed.")
            call Debug(IsSyncEnabled() == false, "SyncInteger: OnSelectTrigger is disabled.")
     
            if (not IsSyncEnabled()) then
                return false
            endif
     
            // check if the number is negative
            if (number < 0) then
                set d = DUMMY_COUNT-1
                set number = number * -1
            endif
 
            loop
                set x = x/(BASE)
                exitwhen x==0
                set i=i+1
            endloop
     
            // Count how many units are selected
            call GroupEnumUnitsSelected(SelectionGroup, p, null)
            set bj_groupCountUnits = 0

            set u = FirstOfGroup(SelectionGroup)
            loop
                exitwhen u == null
                set last = u
                call GroupRemoveUnit(SelectionGroup, u)
                set bj_groupCountUnits = bj_groupCountUnits + 1
                set u = FirstOfGroup(SelectionGroup)
            endloop
         
            // If the queue is full, de-select the last unit which
            // will allow us to select a dummy, and hopefully
            // avoid a flickering effect.
            if (bj_groupCountUnits >= 12 and LocalPlayer == p) then
                call SelectUnit(last, false)
            endif

            set j=R2I(Pow(BASE, i))

            loop
                set n = j
                set x = number/n
                set j = j / BASE
             
                if (LocalPlayer == p) then
                    call SelectUnit(SyncIntegerDummy[x], true)
                    call SelectUnit(SyncIntegerDummy[x], false)
                endif
         
                set number = number-x*n

                exitwhen i == 0
         
                set i = i - 1
            endloop
 
            if (LocalPlayer == p) then
                call SelectUnit(SyncIntegerDummy[d], true)
                call SelectUnit(SyncIntegerDummy[d], false)
               
                if (bj_groupCountUnits >= 12) then
                    call SelectUnit(last, true)
                endif
            endif

            set u = null
            set last = null

            return true
        endfunction
 
        //this cleans up all dummies and triggers created by the system
        function SyncTerminate takes boolean destroyEvents returns nothing
            local integer i = 0
     
            if (destroyEvents) then
                call DestroyTrigger(OnSelectTrigger)
                call DestroyTrigger(EventTrig)
                call DestroyTrigger(NotifyTrig)
                set OnSelectTrigger = null
                set EventTrig = null
                set NotifyTrig = null
               
                static if not LIBRARY_GroupUtils then
                    call DestroyGroup(SelectionGroup)
                    set SelectionGroup = null
                endif
            else
                call SyncIntegerDisable()
            endif
     
            loop
                exitwhen i >= DUMMY_COUNT
                call RemoveUnit(SyncIntegerDummy[i])
                set SyncIntegerDummy[i] = null
                set i = i + 1
            endloop
           
            set i = 0
           
            loop
                exitwhen i >= NotifyCount
                call RemoveUnit(NotifyUnit[i])
                set NotifyUnit[i] = null
                set i = i + 1
            endloop
        endfunction
 
        function SyncInitialize takes nothing returns nothing
            local integer i = 0
            local integer uid
           
            call Debug(OnSelectTrigger == null, "SyncInitialize: OnSelectTrigger is null and has no events attached to it.")
            call Debug(SyncIntegerDummy[i] != null, "SyncInitialize: Already initialized.")

            loop
                exitwhen i >= DUMMY_COUNT
                set SyncIntegerDummy[i]=CreateUnit(DUMMY_PLAYER, DUMMY_ID, DUMMY_X, DUMMY_Y, i)
         
                set uid = GetUnitUserData(SyncIntegerDummy[i])
               
                if (uid == 0) then
                    call SetUnitUserData(SyncIntegerDummy[i], i + 1)
                    set uid = i + 1
                endif
               
                call Debug((i == 0) and (SyncIntegerDummy[i] == null), "SyncInitialize: Dummy unit is null (check DUMMY_ID).")
                call Debug((i == 0) and (GetUnitAbilityLevel(SyncIntegerDummy[i], 'Aloc') > 0), "SyncInitialize: Dummy units must be selectable (detected locust).")
                call Debug((i == 0) and (uid == 0), "No unit indexer found.")
               
                //call BJDebugMsg(I2S(uid))
               
                set AttachedInteger[uid] = i + 1

                call UnitAddAbility(SyncIntegerDummy[i], DUMMY_ABILITY)
                call PauseUnit(SyncIntegerDummy[i], true)
               
                set i = i + 1
            endloop
        endfunction

        private function OnSelect takes nothing returns boolean
            local unit u        = GetTriggerUnit()
            local player p      = GetTriggerPlayer()
            local integer id    = GetPlayerId(p)
            local boolean isNeg = (SyncIntegerDummy[DUMMY_COUNT-1] == u)
            local integer udata = GetUnitUserData(u)
            local integer index = AttachedInteger[udata] - 1

            // check for notifications
            if (NotifyUnit[NotifyIndex[udata]] == u) then
               
                set LastPlayer = id
                set LastSync = NotifyIndex[udata]
           
                call TriggerEvaluate(NotifyTrig)
               
                return false
            endif
           
            if (index == -1 or SyncIntegerDummy[index] != u) then
                set u = null
                return false
            endif
           
            call Debug(OnSelectTrigger == null, "SyncInteger: OnSelectTrigger is null.")
     
            if (isNeg) then
                set SyncedInt[id] = SyncedInt[id]*-1
            endif

            if (isNeg or SyncIntegerDummy[DUMMY_COUNT-2] == u) then
                // fire events
                set LastPlayer = id
                set LastSync = SyncedInt[id]

                set FireEvent = EVENT_SYNC_INTEGER
                call TriggerEvaluate(EventTrig)
                set FireEvent = 0
           
                set SyncedInt[id] = -1
            else
                if (SyncedInt[id]==-1)then
                    set SyncedInt[id]=0
                endif
                set SyncedInt[id] = SyncedInt[id] * BASE + index
            endif
     
            set u = null
     
            return false
        endfunction
       
        private function OnMapStart takes nothing returns nothing
            call DestroyTimer(GetExpiredTimer())
            call SyncInitialize()
        endfunction

        //===========================================================================
        private function Init takes nothing returns nothing
            local integer i = 0
            local integer j
     
            loop
                call TriggerRegisterPlayerUnitEvent(OnSelectTrigger, Player(i), EVENT_PLAYER_UNIT_SELECTED, null)
         
                set SyncedInt[i] = -1
         
                set i = i + 1
                exitwhen i==bj_MAX_PLAYER_SLOTS
            endloop

            call TriggerAddCondition(OnSelectTrigger, Filter(function OnSelect))
     
            static if (AUTO_INIT) then
                call TimerStart(CreateTimer(), 0., false, function OnMapStart)
            endif
     
            static if (LIBRARY_GroupUtils) then
                set SelectionGroup=ENUM_GROUP
            else
                set SelectionGroup=CreateGroup()
            endif

            static if (LIBRARY_PlayerUtils) then
                set LocalPlayer=User.Local
            else
                set LocalPlayer=GetLocalPlayer()
            endif
           
            set DUMMY_X = GetCameraBoundMaxX() + 500
            set DUMMY_Y = GetCameraBoundMaxY() + 500
        endfunction

endlibrary//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    call InitTrig_Untitled_Trigger_014(  )
    call InitTrig_Untitled_Trigger_004(  )
    call InitTrig_Untitled_Trigger_003(  )
    call InitTrig_Untitled_Trigger_001(  )
    call InitTrig_Untitled_Trigger_013(  )
    call InitTrig_Untitled_Trigger_008(  )
    call InitTrig_Untitled_Trigger_005(  )
    call InitTrig_Untitled_Trigger_002(  )
    call InitTrig_UnitVariables(  )
    call InitTrig_Table(  )
    call InitTrig_StringHashEx(  )
    call InitTrig_Sync(  )
    call InitTrig_SyncInteger(  )
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation( Player(0), 0 )
    call ForcePlayerStartLocation( Player(0), 0 )
    call SetPlayerColor( Player(0), ConvertPlayerColor(0) )
    call SetPlayerRacePreference( Player(0), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(0), false )
    call SetPlayerController( Player(0), MAP_CONTROL_USER )

    // Player 1
    call SetPlayerStartLocation( Player(1), 1 )
    call ForcePlayerStartLocation( Player(1), 1 )
    call SetPlayerColor( Player(1), ConvertPlayerColor(1) )
    call SetPlayerRacePreference( Player(1), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(1), false )
    call SetPlayerController( Player(1), MAP_CONTROL_USER )

    // Player 2
    call SetPlayerStartLocation( Player(2), 2 )
    call ForcePlayerStartLocation( Player(2), 2 )
    call SetPlayerColor( Player(2), ConvertPlayerColor(2) )
    call SetPlayerRacePreference( Player(2), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(2), false )
    call SetPlayerController( Player(2), MAP_CONTROL_USER )

    // Player 3
    call SetPlayerStartLocation( Player(3), 3 )
    call ForcePlayerStartLocation( Player(3), 3 )
    call SetPlayerColor( Player(3), ConvertPlayerColor(3) )
    call SetPlayerRacePreference( Player(3), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(3), false )
    call SetPlayerController( Player(3), MAP_CONTROL_USER )

    // Player 4
    call SetPlayerStartLocation( Player(4), 4 )
    call ForcePlayerStartLocation( Player(4), 4 )
    call SetPlayerColor( Player(4), ConvertPlayerColor(4) )
    call SetPlayerRacePreference( Player(4), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(4), false )
    call SetPlayerController( Player(4), MAP_CONTROL_USER )

    // Player 5
    call SetPlayerStartLocation( Player(5), 5 )
    call ForcePlayerStartLocation( Player(5), 5 )
    call SetPlayerColor( Player(5), ConvertPlayerColor(5) )
    call SetPlayerRacePreference( Player(5), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(5), false )
    call SetPlayerController( Player(5), MAP_CONTROL_USER )

    // Player 6
    call SetPlayerStartLocation( Player(6), 6 )
    call ForcePlayerStartLocation( Player(6), 6 )
    call SetPlayerColor( Player(6), ConvertPlayerColor(6) )
    call SetPlayerRacePreference( Player(6), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(6), false )
    call SetPlayerController( Player(6), MAP_CONTROL_USER )

    // Player 7
    call SetPlayerStartLocation( Player(7), 7 )
    call ForcePlayerStartLocation( Player(7), 7 )
    call SetPlayerColor( Player(7), ConvertPlayerColor(7) )
    call SetPlayerRacePreference( Player(7), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(7), false )
    call SetPlayerController( Player(7), MAP_CONTROL_USER )

    // Player 8
    call SetPlayerStartLocation( Player(8), 8 )
    call ForcePlayerStartLocation( Player(8), 8 )
    call SetPlayerColor( Player(8), ConvertPlayerColor(8) )
    call SetPlayerRacePreference( Player(8), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(8), false )
    call SetPlayerController( Player(8), MAP_CONTROL_USER )

    // Player 9
    call SetPlayerStartLocation( Player(9), 9 )
    call ForcePlayerStartLocation( Player(9), 9 )
    call SetPlayerColor( Player(9), ConvertPlayerColor(9) )
    call SetPlayerRacePreference( Player(9), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(9), false )
    call SetPlayerController( Player(9), MAP_CONTROL_USER )

    // Player 10
    call SetPlayerStartLocation( Player(10), 10 )
    call ForcePlayerStartLocation( Player(10), 10 )
    call SetPlayerColor( Player(10), ConvertPlayerColor(10) )
    call SetPlayerRacePreference( Player(10), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(10), false )
    call SetPlayerController( Player(10), MAP_CONTROL_USER )

    // Player 11
    call SetPlayerStartLocation( Player(11), 11 )
    call ForcePlayerStartLocation( Player(11), 11 )
    call SetPlayerColor( Player(11), ConvertPlayerColor(11) )
    call SetPlayerRacePreference( Player(11), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(11), false )
    call SetPlayerController( Player(11), MAP_CONTROL_USER )

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_1230
    call SetPlayerTeam( Player(0), 0 )
    call SetPlayerState( Player(0), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(1), 0 )
    call SetPlayerState( Player(1), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(2), 0 )
    call SetPlayerState( Player(2), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(3), 0 )
    call SetPlayerState( Player(3), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(4), 0 )
    call SetPlayerState( Player(4), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(5), 0 )
    call SetPlayerState( Player(5), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(6), 0 )
    call SetPlayerState( Player(6), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(7), 0 )
    call SetPlayerState( Player(7), PLAYER_STATE_ALLIED_VICTORY, 1 )

    //   Allied
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(6), true )

    //   Shared Vision
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(6), true )

    // Force: TRIGSTR_1231
    call SetPlayerTeam( Player(8), 1 )
    call SetPlayerState( Player(8), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(9), 1 )
    call SetPlayerState( Player(9), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(10), 1 )
    call SetPlayerState( Player(10), PLAYER_STATE_ALLIED_VICTORY, 1 )
    call SetPlayerTeam( Player(11), 1 )
    call SetPlayerState( Player(11), PLAYER_STATE_ALLIED_VICTORY, 1 )

    //   Allied
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(9), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(10), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(11), true )
    call SetPlayerAllianceStateAllyBJ( Player(9), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(9), Player(10), true )
    call SetPlayerAllianceStateAllyBJ( Player(9), Player(11), true )
    call SetPlayerAllianceStateAllyBJ( Player(10), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(10), Player(9), true )
    call SetPlayerAllianceStateAllyBJ( Player(10), Player(11), true )
    call SetPlayerAllianceStateAllyBJ( Player(11), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(11), Player(9), true )
    call SetPlayerAllianceStateAllyBJ( Player(11), Player(10), true )

endfunction

function InitAllyPriorities takes nothing returns nothing

    call SetStartLocPrioCount( 0, 11 )
    call SetStartLocPrio( 0, 0, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 1, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 3, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 4, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 1, 11 )
    call SetStartLocPrio( 1, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 1, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 3, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 4, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 2, 11 )
    call SetStartLocPrio( 2, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 3, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 4, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 3, 11 )
    call SetStartLocPrio( 3, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 3, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 4, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 4, 11 )
    call SetStartLocPrio( 4, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 4, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 4, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 5, 11 )
    call SetStartLocPrio( 5, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 5, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 5, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 6, 11 )
    call SetStartLocPrio( 6, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 6, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 6, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 7, 11 )
    call SetStartLocPrio( 7, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 6, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 7, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 7, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 8, 11 )
    call SetStartLocPrio( 8, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 6, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 7, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 8, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 8, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 9, 11 )
    call SetStartLocPrio( 9, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 6, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 7, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 8, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 9, 10, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 9, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 10, 11 )
    call SetStartLocPrio( 10, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 6, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 7, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 8, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 9, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 10, 10, 11, MAP_LOC_PRIO_HIGH )

    call SetStartLocPrioCount( 11, 11 )
    call SetStartLocPrio( 11, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 2, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 3, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 4, 4, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 5, 5, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 6, 6, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 7, 7, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 8, 8, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 9, 9, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 11, 10, 10, MAP_LOC_PRIO_HIGH )
endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds( -7424.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -7680.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 7424.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 7936.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -7424.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 7936.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 7424.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -7680.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM) )
    call SetDayNightModels( "Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl" )
    call NewSoundEnvironment( "Default" )
    call SetAmbientDaySound( "IceCrownDay" )
    call SetAmbientNightSound( "IceCrownNight" )
    call SetMapMusic( "Music", true, 0 )
    call CreateRegions(  )
    call CreateCameras(  )
    call CreateAllItems(  )
    call CreateAllUnits(  )
    call InitBlizzard(  )
    call InitGlobals(  )
    call InitCustomTriggers(  )

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName( "TRIGSTR_001" )
    call SetMapDescription( "TRIGSTR_003" )
    call SetPlayers( 12 )
    call SetTeams( 12 )
    call SetGamePlacement( MAP_PLACEMENT_TEAMS_TOGETHER )

    call DefineStartLocation( 0, -128.0, -64.0 )
    call DefineStartLocation( 1, -128.0, -64.0 )
    call DefineStartLocation( 2, -128.0, -64.0 )
    call DefineStartLocation( 3, -128.0, -64.0 )
    call DefineStartLocation( 4, -128.0, -64.0 )
    call DefineStartLocation( 5, -128.0, -64.0 )
    call DefineStartLocation( 6, -128.0, -64.0 )
    call DefineStartLocation( 7, -128.0, -64.0 )
    call DefineStartLocation( 8, -128.0, -64.0 )
    call DefineStartLocation( 9, -128.0, -64.0 )
    call DefineStartLocation( 10, -128.0, -64.0 )
    call DefineStartLocation( 11, -128.0, -64.0 )

    // Player setup
    call InitCustomPlayerSlots(  )
    call InitCustomTeams(  )
    call InitAllyPriorities(  )
endfunction

