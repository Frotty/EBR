package EscaperClasses
import Sensor
import FxEntity
import Escaper
import Assets
import ChannelAbilityPreset
import Key

constant REINCARNATION_ID = 'A02X'
constant PORTAL_CREATE_ID = 'A08K'
constant SPEEDWAVE_ID = 'A06P'
constant STAGNANCYSHIELD_ID = 'A008'
constant SLOWWAVE_ID = 'A088'
constant TEMP_REV_ID = 'A07Z'
constant INNER_STRENGTH_ID = 'A08L'
int HP_GAIN_50
int HP_GAIN_75
int HP_GAIN_100

public class HolyEscaper extends Escaper

	construct( vec3 pos, player owner)
		super( pos, owner, 'H00B')
		
	override function onCast(int id)
		super.onCast(id)
		if id == REINCARNATION_ID
			if poisoned or onLava or sliding
				actor.resetAbilityCooldown(REINCARNATION_ID)
				createTTEx(pos, vec2(0,.08), "canceled!", 8.5, 2, colorA(255,0,0,255), owner)
			else
				if revivetomb != null
					revivetomb.remove()
				revivetomb = createUnit(owner, TOMB_DUMMY_ID, pos, angle(0))
		else if id == TEMP_REV_ID
			if poisoned or onLava or sliding
				actor.resetAbilityCooldown(TEMP_REV_ID)
				createTTEx(pos, vec2(0,.08), "canceled!", 8.5, 2, colorA(255,0,0,255), owner)
				
			

public class Portal extends FxEntity
	use Sensor

	vec2 destiny = ZERO2
	FastEscaper es = null
	int duration
	real lerpy = 0.
	Fx targetFx = null

	construct(FastEscaper es, int duration) 
		super(es.owner, es.getPos(), 28, angle(0), "PulseTC_fix4.mdx")
		silent = true
		this.duration = duration
		this.es = es
		deactivate()
		fx.setColor(colorA(145,145,145,145))
		addSensorListener(this, (UnitEntity source, UnitEntity target) -> begin
			if destiny != ZERO2 and target instanceof Escaper
				var teleport = true
				for i = 0 to 5
					let ie = UnitItemInSlot(target.actor, i).getEntity()
					if ie != null and ie instanceof Key
						teleport = false
						break
				if teleport
					target.setPos(destiny.withZ(target.pos.z))
					flashEffect(Other.blinkcaster, pos)
					flashEffect(Other.blinktarget, destiny)
					if not es.camlock and es.selectatrevive
						PanCameraToTimedForPlayer(target.actor.getOwner(), destiny.x, destiny.y, 0.03 )

		end)

	override function update()
		if destiny != ZERO2 and fx.getColor() != COLOR_WHITE
			lerpy = lerpy.lerp(1.05, 0.045)
			fx.setColor(colorA(145,145,145,145).mix(COLOR_WHITE, lerpy))
		else
			deactivate()

	override function slowUpdate()
		if destiny != ZERO2
			super.slowUpdate()
		if idleSeconds >= duration
			terminate()

	function setDestiny(vec2 tpos)
		this.destiny = tpos
		if tpos != ZERO2
			if targetFx == null
				targetFx = new Fx(tpos.withZ(0),"PulseTC_tgt.mdx")
				targetFx.setScale(0.75)
				targetFx.setOwner(owner, true)
			targetFx.setColor(COLOR_WHITE)
			targetFx.setXY(destiny)
			activate()
		else
			targetFx.setColor(COLOR_BLACK)
			fx.setColor(colorA(90,90,90,90))

	ondestroy
		es.portal = null
		if targetFx != null
			targetFx.hiddenDestroy()
			targetFx = null

public class FastEscaper extends Escaper
	Portal portal = null

	construct(vec3 pos, player owner)
		super(pos, owner, 'H00D')
		
	override function onCast(int id)
		super.onCast(id)
		if id == PORTAL_CREATE_ID
			if sliding or poisoned or onLava or flying
				actor.resetAbilityCooldown(PORTAL_CREATE_ID)
				createTTEx(pos, vec2(0,.08), "canceled!", 8.5, 2, colorA(255,0,0,255), owner)
				return
			if portal == null
				portal = new Portal(this, 20 + actor.getAbilityLevel(PORTAL_CREATE_ID) * 10)
				actor.resetAbilityCooldown(PORTAL_CREATE_ID)
			else
				if portal.destiny != ZERO2
					portal..setPos(getPos())..setDestiny(ZERO2)
					actor.resetAbilityCooldown(PORTAL_CREATE_ID)
				else
					portal.setDestiny(getPos().toVec2())
					

public class IceEscaper extends Escaper
	
	construct(vec3 pos, player owner)
		super(pos, owner, 'H00E')
		
	override function onCast(int id)
		super.onCast(id)
		if id == SPEEDWAVE_ID
			if sliding
				var angl = actor.getFacing()
				var value = 10 + GetUnitAbilityLevel(actor,SPEEDWAVE_ID)*2.5
				DestroyEffect( AddSpecialEffect("Abilities\\Spells\\Other\\CrushingWave\\CrushingWaveDamage.mdl", pos.x, pos.y))
				addVel( vec3(value * Cos(angl * DEGTORAD),value * Sin(angl * DEGTORAD),0.))
		else if id == SLOWWAVE_ID
			let lvl = actor.getAbilityLevel(id) / 4.
			if sliding
				speedFactor = 0.9 + lvl
				addEffect(Other.impaletargetdust, pos).destr()
		
	
public class StrongEscaper extends Escaper
	boolean invulnerable = false
	effect shieldeffect = null
	vec2 shieldPos = vec2(0,0)
	real shieldtimer = 0.
	
	construct(vec3 pos, player owner)
		super(pos, owner, 'H003')
		EventListener.add(actor, EVENT_PLAYER_HERO_SKILL, () -> onSkill())

	function onSkill()
		let learnedId = GetLearnedSkill()
		let lvl = GetLearnedSkillLevel()
		if learnedId == INNER_STRENGTH_ID
			if lvl == 1
				actor..addAbility(HP_GAIN_50)
			else if lvl == 2
				actor..removeAbility(HP_GAIN_50)..addAbility(HP_GAIN_75)
			else if lvl == 3
				actor..removeAbility(HP_GAIN_75)..addAbility(HP_GAIN_100)
		
	override function update()
		super.update()
		if invulnerable
			shieldtimer -= ANIMATION_PERIOD
			if pos.distanceTo2dSq(shieldPos) > 32*32 or shieldtimer <= 0
				if shieldtimer > 0
					createTTEx(pos, vec2(0,.08), "canceled!", 8.5, 2, colorA(255,0,0,255), owner)
				shieldtimer = 0
				actor.removeAbility('Avul')
				invulnerable = false
				shieldeffect.destr()
				
	override function kill(UnitEntity entity)
		if not invulnerable
			super.kill(entity)
		else
			addEffect(Other.spellshieldcaster, pos).destr()
				
				
	override function onCast(int id)
		super.onCast(id)
		if id == STAGNANCYSHIELD_ID
			invulnerable = true
			shieldtimer = 1 + GetUnitAbilityLevel(actor, id)*2.
			if shieldtimer > 5
				shieldtimer = 5
			actor.addAbility('Avul')
			actor.setPos(pos.toVec2())
			shieldPos = pos.toVec2()
			shieldeffect = addEffect("Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", shieldPos)

	

@objectgen function gen()
	HP_GAIN_50 = ABIL_ID_GEN.next()
	HP_GAIN_75 = ABIL_ID_GEN.next()
	HP_GAIN_100 = ABIL_ID_GEN.next()

	if compiletime
		new AbilityDefinitionMaxLifeBonusLeast(HP_GAIN_50)
		..setMaxLifeGained(1, 50)

		new AbilityDefinitionMaxLifeBonusLeast(HP_GAIN_75)
		..setMaxLifeGained(1, 75)

		new AbilityDefinitionMaxLifeBonusLeast(HP_GAIN_100)
		..setMaxLifeGained(1, 100)