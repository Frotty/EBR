package Escaper
	import PhysicsEntity
	import Vectors
	import Physics
	import Terrain
	import TimerUtils
	import RegionData
	import BuilderConstants
	import ItemObject
	import Key
	import Revivepoint
	import LinkedList
	import EscaperClasses
	
	public Table escaperTable = new Table()
	
	constant real COLL_RADIUS = 32.
	constant real SLIDE_ADD = 3.3
	
	constant string POISON_EFFECT  = "Abilities\\Weapons\\PoisonSting\\PoisonStingTarget.mdl"
	constant string LAVA_EFFECT    = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl"

	
	real time = 0.
	
	public LinkedList<Escaper> escapers = new LinkedList<Escaper>()
	
	public class Escaper extends PhysicsUnitEntity
		int deaths 		= 0
		boolean flying = false
		boolean sliding = false
		boolean onUnwalkable = false
		boolean poisoned = false
		boolean onLava = false
		
		effect lavaEffect
		effect poisonEffect
		
		vec3 slideVelocity = vec3(0,0,0)
		vec3 trackVelocity = vec3(0,0,0)
		vec3 vortexVelocity = vec3(0,0,0)
		
		RegionData currentRegion

		boolean alive = true

		
		construct( vec3 pos, player owner, int typ )
			super(pos, CreateUnit(owner, typ, pos.x, pos.y, 0.) )
			actor.addAbility('Aloc')
			.hide()
    		.removeAbility('Aloc')
    		.show()
    		
			affectedByGravity = true
    		
			TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_POINT_ORDER )
			TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )
			TriggerRegisterUnitEvent( pickupTrig, actor, EVENT_UNIT_PICKUP_ITEM )
			TriggerRegisterUnitEvent( dropTrig, actor, EVENT_UNIT_DROP_ITEM )
			escaperTable.saveInt(GetHandleId(actor), this castTo int)
			currentRegion = regions[0]
			escapers.add(this)

		override function inAir()
			super.inAir()
			if not flying
				flying = true
				SetUnitPropWindow(actor, 0.)
				
				
		override function onGround()
			if flying
				flying = false
				SetUnitPropWindow(actor, 60.)
				vel *= 0.25
				vel.z = 0.
				pos.z = terrainZ
				
				
			var ttype = GetTerrainType(pos.x, pos.y)
				
			// pathing
			//if not isTerrainWalkable(pos.x, pos.y)
				//vel = vec3(0.,0.,vel.z)
			
			if ttype == CONTROLLABLEICE or ttype == UNCONTROLLABLEICE or ttype == REVICE
				let angle = actor.getFacing()
				slideVelocity = vec3(Cos(angle*DEGTORAD) * currentRegion.slidespeed * SLIDE_ADD, Sin(angle*DEGTORAD) * currentRegion.slidespeed * SLIDE_ADD, 0 )
				sliding = true
			else
				slideVelocity *= 0.8
				sliding = false

				
			// ebr (un)walkable
			if ttype == currentRegion.unwalkableTile or ttype == 'Ibkb' or ttype == RUNES
				onUnwalkable = true
				setLava(false)
				setPoison(false)
				if alive
					kill()
			else 
				onUnwalkable = false
				if ttype == 1147958883 and not onLava
					setLava(true)
				else if ttype == POISON
					setLava(false)
					if not poisoned
						setPoison(true)
				else
					setLava(false)

					
			if onLava
				var hp = actor.getHP()
				if hp > .405
					actor.setHP(hp-currentRegion.lavaDmg)
				else
					kill()
			if poisoned
				var hp2 = actor.getHP()
				if hp2 > .405
					actor.setHP(hp2-currentRegion.poisonDmg)
				else
					kill()

			vel *= 0.95

		function setLava(boolean add)
			if add and not onLava
				lavaEffect = AddSpecialEffectTarget(LAVA_EFFECT, actor, "origin")
				onLava = true
			else if not add and onLava
				lavaEffect.destr()
				onLava = false
				
		function setPoison(boolean add)
			if add and not poisoned
				poisonEffect = AddSpecialEffectTarget(POISON_EFFECT, actor, "chest")
				poisoned = true
			else if not add and poisoned
				poisonEffect.destr()
				poisoned = false
				
		function kill()
			debugPrint("died", 1)
			if owner.getId() >= 8
				debugPrint("is builder", 1)
				getTimer().setData(this castTo int).start(.1, function Escaper.revive)
				debugPrint("started", 1)
			else
				getTimer().start(3., function Escaper.revive).setData(this castTo int)
			actor.kill()
			alive = false
			setPoison(false)
			setLava(false)
			flying = false
		
		override function update()
			terrainZ = getTerrainZ( pos.x, pos.y )
			pos.x = actor.getX()
			pos.y = actor.getY()
			if pos.z <= terrainZ + .2
				onGround()
			else
				inAir()

			pos += vel
			
			pos += slideVelocity
			pos += trackVelocity
			trackVelocity = vec3(0,0,0)
			pos += vortexVelocity
			vortexVelocity = vec3(0,0,0)

			if sliding
				actor.setPos(pos.x, pos.y)

			else
				actor.setXY(pos.x, pos.y)
			SetUnitFlyHeight( actor, pos.z - terrainZ, .0 )
            
		static function revive()
			debugPrint("rev", 1)
			var t = GetExpiredTimer()
			Escaper e = t.getData() castTo Escaper
			var revX = currentRevivepoint.pos.x
			var revY = currentRevivepoint.pos.y
			if e instanceof Holy_Escaper
				var he = e castTo Holy_Escaper
				if he.revivetomb != null
					revX = he.revivetomb.getX()
					revY = he.revivetomb.getY()
					if e.owner.getId() < 8
						RemoveUnit(he.revivetomb)
						he.revivetomb = null
			ReviveHero(e.actor, revX, revY, false)
			if e.owner.getId() < 8
				if (GetLocalPlayer() == e.owner)
					PanCameraToTimed(revX, revY, 0)
					ClearSelection()
					SelectUnit(e.actor, true)
				
			e.currentRegion = getRegionData(e.pos.x, e.pos.y)
			e.alive = true
			t.release()
            
		static function changeAngle()
			var u = GetTriggerUnit()
			Escaper e = u.getUserData() castTo Escaper
			var w = GetOrderTarget()
			unit tu = GetOrderTargetUnit()
			real x2 = GetOrderPointX()
			real y2 = GetOrderPointY()
			real x3 = GetWidgetX(w)
			real y3 = GetWidgetY(w)
			var ttype = GetTerrainType(e.pos.x, e.pos.y)
            
			if ttype == CONTROLLABLEICE
				if w == null
					e.actor.setFacing(angleBetweenCoordsD(e.pos.x,e.pos.y,x2,y2))
				else
					e.actor.setFacing(angleBetweenCoordsD(e.pos.x,e.pos.y,x3,y3))
			else if ttype == REVICE
				if w == null
					e.actor.setFacing(angleBetweenCoordsD(e.pos.x,e.pos.y,x2,y2)-180)
				else
					e.actor.setFacing(angleBetweenCoordsD(e.pos.x,e.pos.y,x3,y3)-180)
					
		static function pickupItem()
			var pickedItem = GetManipulatedItem()
			var escaper = GetTriggerUnit().getUserData() castTo Escaper
			var idata = pickedItem.getUserData() castTo ItemObject
			
			if idata instanceof Key
				var kdata = idata castTo Key
				kdata.pickedUp(escaper)
				
		static function dropItem()
			var pickedItem = GetManipulatedItem()
			var escaper = GetTriggerUnit().getUserData() castTo Escaper
			var idata = pickedItem.getUserData() castTo ItemObject
			
			if idata instanceof Key
				var kdata = idata castTo Key
				dropTrig.disable()
				RemoveItem(kdata.actorItem)
				kdata.dropped()
				dropTrig.enable()

			
	trigger slideAssist
	trigger pickupTrig
	public trigger dropTrig
			
	init
		slideAssist = CreateTrigger()
		slideAssist.addAction(function Escaper.changeAngle)
		pickupTrig = CreateTrigger()
		pickupTrig.addAction( function Escaper.pickupItem )
		dropTrig = CreateTrigger()
		dropTrig.addAction( function Escaper.dropItem )
		
endpackage 