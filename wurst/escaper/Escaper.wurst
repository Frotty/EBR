package Escaper
import PhysicsEntity
import Assets
import public Entity
import Vectors
import TimerUtils
import RegionData
import BuilderConstants
import LinkedList
import RevivePointModifier
import ClosureTimers
import TerrainBlocker
import TerrainUtils

constant real COLL_RADIUS = 32.
constant real SLIDE_ADD = 3.3

constant string POISON_EFFECT  = "Abilities\\Weapons\\PoisonSting\\PoisonStingTarget.mdl"
constant string LAVA_EFFECT    = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl"
constant JUMP_SPELL = 'A062'

real time = 0.

public LinkedList<Escaper> escapers = new LinkedList<Escaper>()

public class Escaper extends UnitEntity	
	use PhysicsModule
	RevivePointModifier revmod
	boolean onUnwalkable = false
	boolean sliding = false
	boolean poisoned = false
	boolean onLava = false
	boolean camlock = false
	int deaths = 0
	effect lavaEffect
	effect poisonEffect
	vec2 slideVelocity = vec2(0,0)
	vec2 trackVelocity = vec2(0,0)
	vec2 vortexVelocity = vec2(0,0)

	boolean alive = true
	boolean selectatrevive = true

	
	construct( vec3 pos, player owner, int typ )
		super(pos, 32, CreateUnit(owner, typ, pos.x, pos.y, 0.) )
		actor..addAbility('Aloc')
		..hide()
		..removeAbility('Aloc')
		..show()
		SetUnitPropWindow(actor, 60.)
		// TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_POINT_ORDER )
		// TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )
		TriggerRegisterUnitEvent( neutralDeathTrig, actor, EVENT_UNIT_DEATH)
		spellTrig.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		updateRegionData()
		escapers.add(this)
	

	function setLava(boolean add)
		if add and not onLava
			lavaEffect = AddSpecialEffectTarget(LAVA_EFFECT, actor, "origin")
			onLava = true
		else if not add and onLava
			lavaEffect.destr()
			onLava = false
			
	function setPoison(boolean add)
		if add and not poisoned
			poisonEffect = AddSpecialEffectTarget(POISON_EFFECT, actor, "chest")
			poisoned = true
		else if not add and poisoned
			poisonEffect.destr()
			poisoned = false
	
	function kill()
		if alive
			if isBuilder(owner)
				doAfter(.1, () -> revive())
			else
				doAfter(3., () -> revive())
			actor.kill()
			alive = false
			setPoison(false)
			setLava(false)
			flying = false
			sliding = false
			deaths++
			
	function stop()
		sliding = false
		slideVelocity = vec2(0,0)
		vel = vec3(0,0,0)
		trackVelocity = vec2(0,0)
		vortexVelocity = vec2(0,0)
		
	
	override function onGroundHit()
		if bitset(tileModifierMap.loadInt((pos.x / 128).round(), (pos.y / 128).round())).contains(TileModifiers.BLUGOO castTo int) and vel.z.abs() > 5
			vel.z = -vel.z
			return
		actor.setPropWindow(60.)
		pos.z = .1
		vel *= 0.20
		vel.z = 0.
		
	override function onEscapeGround()
		actor.setPropWindow(0)
		sliding = false
	
	override function inAir()
		slideVelocity *= 0.99
			
	override function onGround()
		var ttype = GetTerrainType(pos.x, pos.y)
		onUnwalkable = true
		if ttype == currentRegion.getTypeSet().unwalkableId or ttype == 'Ibkb' or ttype == RUNES
			onUnwalkable = true
			if alive
				kill()
		else if ttype == CONTROLLABLEICE or ttype == UNCONTROLLABLEICE or ttype == REVICE
			let angl = actor.getFacingAngle()
			slideVelocity = vec2(angl.cos() * currentRegion.slidespeed * SLIDE_ADD, angl.sin() * currentRegion.slidespeed * SLIDE_ADD)
			sliding = true
			setLava(false)
		else
			vel *= 0.96
			slideVelocity *= 0.8
			sliding = false
			setLava(false)
			if ttype == 1147958883 and not onLava
				setLava(true)
			else if ttype == POISON
				if not poisoned
					setPoison(true)
						
		if onLava
			var hp = actor.getHP()
			if hp > .405
				actor.setHP(hp-currentRegion.lavaDmg)
			else if alive
				kill()
		if poisoned
			var hp2 = actor.getHP()
			if hp2 > .405
				actor.setHP(hp2-currentRegion.poisonDmg)
			else if alive
				kill()
		
		pos += trackVelocity
		trackVelocity = vec2(0,0)
		pos += vortexVelocity
		vortexVelocity = vec2(0,0)
	
	override function update()
		if currentRegion != null
			pos.x = actor.getX()
			pos.y = actor.getY()
			physicsUpdate(this)
			pos += vel
			pos += slideVelocity
			if sliding
				setPos(pos)
			else
				setXY(pos)
		
	function getRealVel() returns vec3
		return vel + slideVelocity + trackVelocity + vortexVelocity

	function revive()
		printLog(Loglevel.DEBUG, "revive start")
		sliding = false
		stop()
		let rev = currentRevivepoint
		if revmod == null
			ReviveHero(actor, rev.x, rev.y, false)
			setPos(vec3(rev.x, rev.y, 32.))
		else
			ReviveHero(actor, revmod.pos.x, revmod.pos.y, false)
			setPos(vec3(revmod.pos.x, revmod.pos.y, 32.))
		actor.setPropWindow(60.)
		CameraClearNoiseForPlayer(owner)
		if selectatrevive
			if (GetLocalPlayer() == owner)
				PanCameraToTimed(rev.x, rev.y, 0)
				ClearSelection()
				SelectUnit(actor, true)
		updateRegionData()
		alive = true
		setPoison(false)
		setLava(false)
		if camlock
			SetCameraTargetControllerNoZForPlayer(owner, actor, 0,0,true)
			
	function updateRegionData()
		currentRegion = getRegionData(pos)
		if currentRegion.jumpAvailable
			actor.addAbility(JUMP_SPELL)
		else 
			actor.removeAbility(JUMP_SPELL)
        
	static function changeAngle()
		var u = GetTriggerUnit()
		Escaper e = u.getUserData() castTo Escaper
		var w = GetOrderTarget()
		let orderPos = getOrderPos()
		let widgetPos = w.getPos()
		var ttype = GetTerrainType(e.pos.x, e.pos.y)
        
		if ttype == CONTROLLABLEICE
			print("assisted")
			if w == null
				e.actor.setFacing(e.pos.angleTo2d(orderPos))
			else
				e.actor.setFacing(e.pos.angleTo2d(widgetPos))
		else if ttype == REVICE
			print("assisted")
			if w == null
				e.actor.setFacing(e.pos.angleTo2d(orderPos)-(180).asAngleDegrees())
			else
				e.actor.setFacing(e.pos.angleTo2d(widgetPos)-(180).asAngleDegrees())
				
	static function neutralDeath()
		var escaper = GetTriggerUnit().getUserData() castTo Escaper
		if GetKillingUnit() != null
			escaper.kill()
			
	static function onCastEvent()
		let data = GetTriggerUnit().getUserData() castTo Escaper
		data.onCast(GetSpellAbilityId())
		
	function onCast(int id)
		if id == JUMP_SPELL
			if not flying
				addPos(vec3(0,0,1))
				let angl = pos.angleTo2d(getSpellTargetPos())
				addEffect(Other.aneucaster, pos).destr()
				if sliding
					addVel(vec3(3* angl.cos(), 3 * angl.sin(), 12))
				else
					addVel(vec3(8* angl.cos(), 8 * angl.sin(), 12))
		else if id == CREATE_REV_MOD_ID
			revmod = new RevivePointModifier(pos.toVec2(), owner)
			UnitRemoveAbility( actor, CREATE_REV_MOD_ID )
			UnitAddAbility( actor, REMOVE_REV_MOD_ID )
		else if id == REMOVE_REV_MOD_ID
			if revmod != null
				destroy revmod
			UnitRemoveAbility( actor, REMOVE_REV_MOD_ID )
			UnitAddAbility( actor, CREATE_REV_MOD_ID )
			
	ondestroy
		lavaEffect.destr()
		poisonEffect.destr()
		actor.remove()
		escapers.remove(this)
				
public vec2 currentRevivepoint = gg_unit_n000_0002.getPos()
		
trigger slideAssist
trigger neutralDeathTrig
trigger spellTrig

function correctRegion()
	for e in escapers
		e.updateRegionData()
		
init
	slideAssist = CreateTrigger()
	slideAssist.addAction(function Escaper.changeAngle)
	neutralDeathTrig = CreateTrigger()
	neutralDeathTrig.addAction(function Escaper.neutralDeath)
	getTimer().startPeriodic(1., function correctRegion)
	spellTrig = CreateTrigger()
	spellTrig.addAction(function Escaper.onCastEvent)
