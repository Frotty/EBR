package Escaper
import PhysicsEntity
import Assets
import public Entity
import public BuilderConstants
import public GameConstants
import RevivePointModifier
import TerrainBlocker
import initlater Weapon
import initlater ReviveManager
import public initlater RegionData
import Projectile
import ErrorHandling

constant real COLL_RADIUS = 32.
constant real SLIDE_ADD = 3.3

constant string POISON_EFFECT  = "Abilities\\Weapons\\PoisonSting\\PoisonStingTarget.mdl"
constant string LAVA_EFFECT    = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl"
public constant JUMP_SPELL = 'A062'
public constant ORB_SPELL = 'A08A'
public constant JAUNT_SPELL = 'A08D'

real time = 0.

public LinkedList<Escaper> escapers = new LinkedList<Escaper>()

public abstract class Escaper extends UnitEntity	
	use PhysicsModule
	RevivePointModifier revmod = null
	boolean onUnwalkable = false
	boolean sliding = false
	boolean poisoned = false
	boolean onLava = false
	boolean camlock = false
	int deaths = 0
	effect lavaEffect
	effect poisonEffect
	vec2 walkVel = vec2(0,0)
	vec2 slideVelocity = vec2(0,0)
	vec2 otherVel = vec2(0,0)
	WeaponObject weapon = null
	effect weaponAttach = null

	boolean alive = true
	boolean selectatrevive = true
	boolean left = false

	
	construct( vec3 pos, player owner, int typ )
		super(createUnit(owner, typ, pos, angle(0)))
		actor..addAbility('Aloc')
		..hide()
		..removeAbility('Aloc')
		..show()
		SetUnitPropWindow(actor, 60.)
		TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_POINT_ORDER )
		TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )
		EventListener.add(actor, EVENT_PLAYER_UNIT_DEATH, () -> kill())
		spellTrig.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		updateRegionData()
		escapers.add(this)

	override function inAir(Entity e)
		if not e.flying
			e.flying = true
			onEscapeGround()
		if affectedByGravity
			e.addVel(this.getCurrentRegion().gravity)

	function setLava(boolean add)
		if add and not onLava
			lavaEffect = AddSpecialEffectTarget(LAVA_EFFECT, actor, "origin")
			onLava = true
		else if not add and onLava
			lavaEffect.destr()
			onLava = false
			
	function setPoison(boolean add)
		if add and not poisoned
			poisonEffect = AddSpecialEffectTarget(POISON_EFFECT, actor, "chest")
			poisoned = true
		else if not add and poisoned
			poisonEffect.destr()
			poisoned = false
	
	function kill()
		if alive
			alive = false
			actor.kill()
			manageRevive(this)
			setPoison(false)
			setLava(false)
			flying = false
			sliding = false
			deaths++
			
	function stop()
		sliding = false
		slideVelocity = vec2(0,0)
		vel = vec3(0,0,0)
		otherVel = vec2(0,0)

	override function setNewActor(unit u)
		error("Don't do this..")
	
	override function onGroundHit()
		if bitset(tileModifierMap.loadInt((pos.x / 128).round(), (pos.y / 128).round())).contains(TileModifiers.BLUGOO castTo int) and vel.z.abs() > 5
			vel.z = -vel.z
			return
		actor.setPropWindow(60.)
		pos.z = .1
		vel *= 0.175
		vel.z = 0.
		
	override function onEscapeGround()
		actor.setPropWindow(0)
		sliding = false
	
	override function onGround(Entity e)
		if e.flying
			e.flying = false
			onGroundHit()
		// If the Entity is moving towards
		e.scaleVel(surfaceFriction)
		var ttype = GetTerrainType(pos.x, pos.y)
		onUnwalkable = false
		let rdata = this.getCurrentRegion()
		slideVelocity *= 0.99
		if ttype == rdata.getTypeSet().unwalkableId or ttype == 'Ibkb' or ttype == RUNES
			onUnwalkable = true
			if alive
				kill()
		else if ttype == CONTROLLABLEICE or ttype == UNCONTROLLABLEICE or ttype == REVICE
			let angl = actor.getFacingAngle()
			slideVelocity = vec2(angl.cos() * rdata.slidespeed * SLIDE_ADD, angl.sin() * rdata.slidespeed * SLIDE_ADD)
			if not sliding
				speedFactor = 1
				sliding = true
			setLava(false)
		else
			if bitset(tileModifierMap.loadInt((pos.x / 128).round(), (pos.y / 128).round())).contains(TileModifiers.ORANGEGOO castTo int)
				vel += walkVel
				vel *= 1.0075
			vel *= 0.96
			sliding = false
			setLava(false)
			if ttype == 1147958883 and not onLava
				setLava(true)
			else if ttype == POISON
				if not poisoned
					setPoison(true)
		if sliding
			speedFactor *= 0.9
		else
			slideVelocity *= 0.8		
		if onLava
			var hp = actor.getHP()
			if hp > .405
				actor.setHP(hp-this.getCurrentRegion().lavaDmg)
			else if alive
				kill()
		if poisoned
			var hp2 = actor.getHP()
			if hp2 > .405
				actor.setHP(hp2-this.getCurrentRegion().poisonDmg)
			else if alive
				kill()
		
		pos += otherVel
		otherVel = vec2(0,0)
	
	override function update()
		let newPos = actor.getPos()
		walkVel = newPos-pos.toVec2()
		pos = newPos.withZ(pos.z)
		physicsUpdate(this)
		pos += vel
		pos += slideVelocity * (1-speedFactor)
		if sliding
			setPos(pos)
		else
			setXY(pos)
		
	override function setXY(vec3 tpos)
		if tpos.inPlayable()
			pos = tpos
			actor.setXYZ(pos)
		else 
			setPos(currentRevivepoint.toVec3())
			kill()

	function getRealVel() returns vec3
		return vel + slideVelocity + otherVel + walkVel

	function revive()
		if not alive
			stop()
			let rev = currentRevivepoint
			if revmod == null
				if actor == null
					printLog(Loglevel.ERROR, "why this happening :(")
					super.setNewActor(createUnit(owner, 1, rev, angle(0)))
				else
					ReviveHero(actor, rev.x, rev.y, false)
				setXY(vec3(rev.x, rev.y, 32.))
			else
				if actor == null
					super.setNewActor(createUnit(owner, 1, revmod.pos, angle(0)))
				else
					ReviveHero(actor, revmod.pos.x, revmod.pos.y, false)
				setXY(vec3(revmod.pos.x, revmod.pos.y, 32.))
			alive = true
			actor.setPropWindow(60.)
			updateRegionData()
			setPoison(false)
			setLava(false)
			if left
				terminate()
				return

			CameraClearNoiseForPlayer(owner)
			if selectatrevive
				if (GetLocalPlayer() == owner)
					PanCameraToTimed(rev.x, rev.y, 0)
					ClearSelection()
					SelectUnit(actor, true)
			if camlock
				SetCameraTargetControllerNoZForPlayer(owner, actor, 0,0,true)
	
	override function setTarget(vec3 tpos, real speed)
		var t = pos.distanceTo2d(tpos) / speed
		let tangle = pos.angleTo2d(tpos)
		if t < 1.
			t = 1./speed
		
		let startZVelocity = ((-this.getCurrentRegion().gravity.z * t) / 2 - pos.z/t)
		this.setVel( vec3( Cos(tangle.radians()) * speed, Sin(tangle.radians()) * speed, startZVelocity) )
			
	function updateRegionData()
		let currentReg = this.getCurrentRegion()
		this.setCurrentRegion()
		let newReg = this.getCurrentRegion()
		if newReg != null and newReg != currentReg
			currentReg.removeEscaper(this)
			newReg.addEscaper(this)
			actor.removeAbility(currentReg.specialAbil)
			if newReg.specialAbil > 0
				actor.addAbility(newReg.specialAbil)
				if isEscaper(actor.getOwner())
					printTimedToPlayer("|cffFFCC00>> |rYou were granted a |cff0884BDspecial ability |rin this region |r(use with hotkey |cffFFCC00T|r)", 10, actor.getOwner())
			else 
				actor.removeAbility(JUMP_SPELL)
			actor.setTurnSpeed(newReg.turnSpeed)

	static function changeAngle()
		var u = GetTriggerUnit()
		let id = GetIssuedOrderId()
		Escaper e = u.getUserData() castTo Escaper
		var w = GetOrderTarget()
		let orderPos = getOrderPos()
		let widgetPos = w.getPos()
		var ttype = GetTerrainType(e.pos.x, e.pos.y)
		if ttype == CONTROLLABLEICE
			if w == null
				e.actor.setFacing(e.pos.angleTo2d(orderPos))
			else
				e.actor.setFacing(e.pos.angleTo2d(widgetPos))
		else if ttype == REVICE
			if OrderId2String(id) == "lightningshield"
				e.actor.setFacing(e.pos.angleTo2d(orderPos))
			else
				if w == null
					e.actor.setFacing(e.pos.angleTo2d(orderPos)-(180).asAngleDegrees())
				else
					e.actor.setFacing(e.pos.angleTo2d(widgetPos)-(180).asAngleDegrees())
				
	static function neutralDeath()
		var escaper = GetTriggerUnit().getUserData() castTo Escaper
		if GetKillingUnit() != null
			escaper.kill()
			
	static function onCastEvent()
		let data = GetTriggerUnit().getUserData() castTo Escaper
		data.onCast(GetSpellAbilityId())

	OrbProjectile orb = null
		
	function onCast(int id)
		actor.setAnimation("spell")
		if id == JUMP_SPELL
			if not flying
				addPos(vec3(0,0,1))
				let angl = pos.angleTo2d(getSpellTargetPos())
				addEffect(Other.aneucaster, pos).destr()
				if sliding
					addVel(vec3(3* angl.cos(), 3 * angl.sin(), 12))
				else
					addVel(vec3(8* angl.cos(), 8 * angl.sin(), 12))
		else if id == ORB_SPELL
			orb = new OrbProjectile(this, getSpellTargetPos())
			actor..removeAbility(ORB_SPELL)..addAbility(JAUNT_SPELL)
		else if id == JAUNT_SPELL
			if orb != null
				setXY(orb.getPos())
				flashEffect(Other.polymorphtarget, pos)
				orb.terminate()
		else if id == CREATE_REV_MOD_ID
			revmod = new RevivePointModifier(pos.toVec2(), owner)
			UnitRemoveAbility( actor, CREATE_REV_MOD_ID )
			UnitAddAbility( actor, REMOVE_REV_MOD_ID )
		else if id == REMOVE_REV_MOD_ID
			if revmod != null
				destroy revmod
				revmod = null
			UnitRemoveAbility( actor, REMOVE_REV_MOD_ID )
			UnitAddAbility( actor, CREATE_REV_MOD_ID )
		else if id == ATTACK_MELEE or id == ATTACK_RANGED
			weapon.onUse(this)
			actor.setAnimation("attack")
			
	ondestroy
		lavaEffect.destr()
		poisonEffect.destr()
		escapers.remove(this)
				
class OrbProjectile extends Projectile
	Escaper e

	construct(Escaper e, vec2 target)
		super(e.getPos() + vec3(0,0,32), 16, e.owner, e.pos.angleTo2d(target), "TC_EnergyBolt.mdx")
		this.e = e
		setRanged(360)
		setSpeed(8.5)

	ondestroy
		e.orb = null
		e.actor..removeAbility(JAUNT_SPELL)..addAbility(e.getCurrentRegion().specialAbil)
		

public vec2 currentRevivepoint = gg_unit_n000_0002.getPos()
		
trigger slideAssist
trigger neutralDeathTrig
trigger spellTrig

function correctRegion()
	for e in escapers
		e.updateRegionData()
		
init
	slideAssist = CreateTrigger()
	slideAssist.addAction(function Escaper.changeAngle)
	neutralDeathTrig = CreateTrigger()
	neutralDeathTrig.addAction(function Escaper.neutralDeath)
	getTimer().startPeriodic(1., function correctRegion)
	spellTrig = CreateTrigger()
	spellTrig.addAction(function Escaper.onCastEvent)
