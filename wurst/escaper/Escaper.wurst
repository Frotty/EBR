package Escaper
import PhysicsEntity
import public Entity
import Vectors
import TimerUtils
import RegionData
import BuilderConstants
import LinkedList
import RevivePointModifier
import PhysicsConstants
import ClosureTimers
import TerrainBlocker
import TerrainUtils
import BasicSpells

constant real COLL_RADIUS = 32.
constant real SLIDE_ADD = 3.3

constant string POISON_EFFECT  = "Abilities\\Weapons\\PoisonSting\\PoisonStingTarget.mdl"
constant string LAVA_EFFECT    = "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl"


real time = 0.

public LinkedList<Escaper> escapers = new LinkedList<Escaper>()

public class Escaper extends UnitEntity	
	use PhysicsModule
	RevivePointModifier revmod
	boolean sliding = false
	boolean onUnwalkable = false
	boolean poisoned = false
	boolean onLava = false
	effect lavaEffect
	effect poisonEffect
	
	vec2 slideVelocity = vec2(0,0)
	vec2 trackVelocity = vec2(0,0)
	vec2 vortexVelocity = vec2(0,0)
	
	RegionData currentRegion

	boolean alive = true
	boolean selectatrevive = true

	
	construct( vec3 pos, player owner, int typ )
		super(pos, 32, CreateUnit(owner, typ, pos.x, pos.y, 0.) )
		actor..addAbility('Aloc')
		..hide()
		..removeAbility('Aloc')
		..show()
		
		TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_POINT_ORDER )
		TriggerRegisterUnitEvent( slideAssist, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )
		TriggerRegisterUnitEvent( neutralDeathTrig, actor, EVENT_UNIT_DEATH)
		spellTrig.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		currentRegion = regions[0]
		escapers.add(this)

	

	function setLava(boolean add)
		if add and not onLava
			lavaEffect = AddSpecialEffectTarget(LAVA_EFFECT, actor, "origin")
			onLava = true
		else if not add and onLava
			lavaEffect.destr()
			onLava = false
			
	function setPoison(boolean add)
		if add and not poisoned
			poisonEffect = AddSpecialEffectTarget(POISON_EFFECT, actor, "chest")
			poisoned = true
		else if not add and poisoned
			poisonEffect.destr()
			poisoned = false
	
	function kill()
		if owner.getId() >= 8
			doAfter(.1, () -> revive())
		else
			doAfter(3., () -> revive())
		actor.kill()
		alive = false
		setPoison(false)
		setLava(false)
		flying = false
	
	override function onGroundHit()
		if bitset(tileModifierMap.loadInt((pos.x / 128).round(), (pos.y / 128).round())).contains(TileModifiers.GOO castTo int) and vel.z.abs() > 5
			vel.z = -vel.z
			return
		SetUnitPropWindow(actor, 60.)
		vel *= 0.20
		vel.z = 0.
		
	override function onEscapeGround()
		SetUnitPropWindow(actor,0.)
	
	override function inAir()
		slideVelocity *= 0.99
			
	override function onGround()		
		pos.z = globalTerrainZ+.1		
		var ttype = GetTerrainType(pos.x, pos.y)
		
		if ttype == CONTROLLABLEICE or ttype == UNCONTROLLABLEICE or ttype == REVICE
			let angl = actor.getFacing()
			slideVelocity = vec2(angl.cos() * currentRegion.slidespeed * SLIDE_ADD, angl.sin() * currentRegion.slidespeed * SLIDE_ADD)
			sliding = true
			vel *= 0.99
		else
			vel *= 0.96
			slideVelocity *= 0.8
			sliding = false
			if not ttype == currentRegion.getTypeSet().walkableId
				if ttype == currentRegion.getTypeSet().unwalkableId or ttype == 'Ibkb' or ttype == RUNES
					onUnwalkable = true
					setLava(false)
					setPoison(false)
					if alive
						kill()
				else 
					onUnwalkable = false
					if ttype == 1147958883 and not onLava
						setLava(true)
					else if ttype == POISON
						setLava(false)
						if not poisoned
							setPoison(true)
					else
						setLava(false)
				
		if onLava
			var hp = actor.getHP()
			if hp > .405
				actor.setHP(hp-currentRegion.lavaDmg)
			else if alive
				kill()
		if poisoned
			var hp2 = actor.getHP()
			if hp2 > .405
				actor.setHP(hp2-currentRegion.poisonDmg)
			else if alive
				kill()
		
		pos += trackVelocity
		trackVelocity = vec2(0,0)
		pos += vortexVelocity
		vortexVelocity = vec2(0,0)
	
	override function update()
		pos.x = actor.getX()
		pos.y = actor.getY()
		physicsUpdate(this)
		pos += vel
		pos += slideVelocity
		if sliding
			actor.setPos(pos.toVec2())
		else
			actor.setXY(pos)
		SetUnitFlyHeight( actor, pos.z - globalTerrainZ, .0 )

        
	function revive()
		sliding = false
		let rev = currentRevivepoint
		if revmod == null
			ReviveHero(actor, rev.x, rev.y, false)
		else
			ReviveHero(actor, revmod.pos.x, revmod.pos.y, false)
		setVel(vec3(0,0,0))
		slideVelocity = vec2(0,0)
		CameraClearNoiseForPlayer(owner)
		if selectatrevive
			if (GetLocalPlayer() == owner)
				PanCameraToTimed(rev.x, rev.y, 0)
				ClearSelection()
				SelectUnit(actor, true)
			
		currentRegion = getRegionData(pos)
		alive = true
		setPoison(false)
		setLava(false)
//		if pData[owner.getId()].camLock
//			SetCameraTargetControllerNoZForPlayer(owner, actor, 0,0,true)
        
	static function changeAngle()
		var u = GetTriggerUnit()
		Escaper e = u.getUserData() castTo Escaper
		var w = GetOrderTarget()
		let orderPos = getOrderPos()
		let widgetPos = w.getPos()
		var ttype = GetTerrainType(e.pos.x, e.pos.y)
        
		if ttype == CONTROLLABLEICE
			if w == null
				e.actor.setFacing(e.pos.angleTo2d(orderPos))
			else
				e.actor.setFacing(e.pos.angleTo2d(widgetPos))
		else if ttype == REVICE
			if w == null
				e.actor.setFacing(e.pos.angleTo2d(orderPos)-(180).asAngleDegrees())
			else
				e.actor.setFacing(e.pos.angleTo2d(widgetPos)-(180).asAngleDegrees())
				
	static function neutralDeath()
		var escaper = GetTriggerUnit().getUserData() castTo Escaper
		if GetKillingUnit() != null
			escaper.kill()
			
	static function onCastEvent()
		let data = GetTriggerUnit().getUserData() castTo Escaper
		data.onCast(GetSpellAbilityId())
		
	function onCast(int id)
//		if id == ATTACK_MELEE_ID
//			for int i = 0 to 5
//				var data = UnitItemInSlot(actor, i).getUserData() castTo ItemObject
//				if data instanceof Weapon
//					var w = data castTo Weapon
//					if weapon[w.wpid].atype == ATTACK_TYPE.MELEE
//						w.attackm()
//						actor.queueAnimation("attack")
//						return
//		else if id == ATTACK_RANGED_ID
//			for int i = 0 to 5
//				var data = UnitItemInSlot(actor, i).getUserData() castTo ItemObject
//				if data instanceof Weapon
//					var w = data castTo Weapon
//					if weapon[w.wpid].atype == ATTACK_TYPE.RANGED
//						w.attackr(pos,GetSpellTargetX(), GetSpellTargetY())
//						actor.queueAnimation("cast")
//						return
		if id == CREATE_REV_MOD_ID
			revmod = new RevivePointModifier(pos.toVec2(), owner)
			UnitRemoveAbility( actor, CREATE_REV_MOD_ID )
			UnitAddAbility( actor, REMOVE_REV_MOD_ID )
		else if id == REMOVE_REV_MOD_ID
			if revmod != null
				destroy revmod
			UnitRemoveAbility( actor, REMOVE_REV_MOD_ID )
			UnitAddAbility( actor, CREATE_REV_MOD_ID )
			
	ondestroy
		lavaEffect.destr()
		poisonEffect.destr()
		actor.remove()
		escapers.remove(this)
		
public vec2 currentRevivepoint = gg_unit_n000_0002.getPos()
		
trigger slideAssist
trigger neutralDeathTrig
trigger spellTrig

function correctRegion()
	for e in escapers
		e.currentRegion = getRegionData(e.pos)
		
init
	slideAssist = CreateTrigger()
	slideAssist.addAction(function Escaper.changeAngle)
	neutralDeathTrig = CreateTrigger()
	neutralDeathTrig.addAction(function Escaper.neutralDeath)
	getTimer().startPeriodic(1., function correctRegion)
	spellTrig = CreateTrigger()
	spellTrig.addAction(function Escaper.onCastEvent)
