package Key
import ItemObject
import ClosureTimers
import Fx
import ChannelAbilityPreset

public constant KEY_DUMMY_ID = compiletime(UNIT_ID_GEN.next())

public let keyIds = ['I009','I00C','I004','I008','I00J','I005','I00O','I00B','I006']

constant DYN_ID = 'A00M'
constant STATIC_ID = 'A01O'

constant KEY_COLOR = "c"

public class Key extends ItemObject
	var col = EBRColor.WHITE
	var picked = false
	var followWalkable = true
	effect returnSfx = null
	Escaper holder
	Fx fx

	construct(vec2 pos, player owner)
		super( pos, createItem(keyIds[0], pos), createUnit(owner, KEY_DUMMY_ID, pos, 0 .fromDeg()) )
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())

	function recolor()
		actorItem.remove()
		actorItem = createItem(keyIds[col castTo int], pos)..setEntity(this)

	override function onUse(Escaper user)

	override function onPickup(Escaper holder)
		if isEscaper(holder.owner) or this.owner == holder.owner
			picked = true
			this.holder = holder
			fx = new Fx(pos, "war3mapImported\\Key_ITEM.mdx")
			..setColor(col.toColor())
			..setXYZ(holder.getPos()+vec3(0,0,128))
			setup.hide()
			activate()
		else
			picked = false
			holder.actor.removeItem(actorItem)
			actorItem.setPos(pos.toVec2())
			setup.setXY(pos.toVec2())
			setup.show()
			this.holder = null

	override function onDrop(Escaper e)
		picked = false
		holder = null
		if fx != null
			fx.hiddenDestroy()
			fx = null
		setup.setXY(pos.toVec2())
		setup.show()
		nullTimer() ->
			actorItem..setEntity(null)
			..remove()
			actorItem = createItem(keyIds[col castTo int], pos)
			actorItem.setEntity(this)

	override function update()
		if picked
			fx.setXYZ(holder.getPos()+vec3(0,0,128))
			if followWalkable and not holder.flying and not holder.sliding and not holder.onUnwalkable
				pos = holder.getPos()
		else
			super.update()

	function onCast() returns boolean
		let id = GetSpellAbilityId()
		for i = 0 to 8
			if colorSpells[i] == id
				col = i castTo EBRColor
				break
		switch id
			case DYN_ID
				followWalkable = false
				setup..removeAbility(DYN_ID)..addAbility(STATIC_ID)
				returnSfx = AddSpecialEffect("XTex.mdx", pos.x, pos.y)
			case STATIC_ID
				followWalkable = true
				setup..removeAbility(STATIC_ID)..addAbility(DYN_ID)
				if returnSfx != null
					returnSfx.destr()
		recolor()
		return false

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property(KEY_TYPE, KEY_INDEX.toString()))
		json.addProperty(new Property(KEY_COLOR, (col castTo int).toString()))
		return json

	override function deserialize(Json json)
		col = json.getInt(KEY_COLOR) castTo EBRColor
		recolor()

	ondestroy
		if fx != null
			fx.hiddenDestroy()
		holder = null
		if returnSfx != null
			returnSfx.destr()

@objectgen public function genKey()
	new UnitDefinition(KEY_DUMMY_ID, 'hfoo')
	..setAttacksEnabled(0)
	..setTargetedAs("structure")
	..setAnimationBlendTimeseconds(0)
	..setAnimationCastBackswing(0)
	..setAnimationCastPoint(0)
	..setScalingValue(0.55)
	..setShadowImageUnit("")
	..setShadowImageCenterX(0)
	..setShadowImageCenterY(0)
	..setShadowImageWidth(0)
	..setShadowImageHeight(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGhostKey.blp")
	..setModelFile("models\\tcBox.mdl")
	..setSelectionScale(0.55)
	..setSpeedBase(0)
	..setTurnRate(0)
	..setMovementType(MovementType.None)
	..setUnitSoundSet("")
	..setCollisionSize(0)
	..setNormalAbilities(commaList('A00M', 'A05R', REMOVE_OBJECT_ID, GHOST_INVIS_ID, INVULNERABILITY_ID))
	..setName("Key Dummy")
	..setUpgradesUsed("")
	..setBuildTime(1)
	..setUnitClassification("mechanical")
	..setHitPointsMaximumBase(100000000)
	..setHideMinimapDisplay(true)
	..setIsaBuilding(true)
	..setShadowImageUnit("")
