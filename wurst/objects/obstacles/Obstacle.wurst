package Obstacle
import EscaperKillers

constant EVENT_RADIUS_SMALL	= 32.
constant EVENT_RADIUS_BIG	= 64.
constant EVENT_RADIUS_V	= 256.
constant VOLCANO_ID = 'n00K'

public class Obstacle extends EscaperSensorSetup
	construct(unit existing, real radius )
		super(existing, radius, radius)
		setup.addAbility(REMOVE_ID)

	construct(vec2 pos, player owner, int id, real radius )
		super(pos.toVec3(), owner, id, GetRandomReal(0,360).asAngleDegrees(), radius, radius)
		setup.addAbility(REMOVE_ID)

public class SmallObstacle extends Obstacle
	
	construct(unit existing)
		super(existing, EVENT_RADIUS_SMALL)

	construct(vec2 pos, player owner )
		super(pos, owner, getRegionData(pos).getTypeSet().smallObstacleId, EVENT_RADIUS_SMALL)

	override function serialize() returns Json
		let json = super.serialize()
		json..addProperty(new Property(KEY_TYPE, SMALLOBS_INDEX.toString()))
		return json

public class BigObstacle extends Obstacle
	construct(unit existing)
		super(existing, EVENT_RADIUS_BIG)

	construct(vec2 pos, player owner)
		super(pos, owner, getRegionData(pos).getTypeSet().bigObstacleId, EVENT_RADIUS_BIG)

	override function serialize() returns Json
		let json = super.serialize()
		json..addProperty(new Property(KEY_TYPE, BIGOBS_INDEX.toString()))
		return json

public class VolcanoObstacle extends Obstacle
	construct(unit existing)
		super(existing, EVENT_RADIUS_V)

	construct( vec2 pos, player owner )
		super(pos, owner, VOLCANO_ID, EVENT_RADIUS_V)

	override function serialize() returns Json
		let json = super.serialize()
		json..addProperty(new Property(KEY_TYPE, VOLCANO_INDEX.toString()))
		return json