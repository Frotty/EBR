package EscaperKillers
import public EscaperSensor
import Escaper

public constant COLL_SIZE_SK = 72.
public constant COLL_SIZE_BK = 92.
public constant COLL_SIZE_SRK = 68.
public constant COLL_SIZE_BRK = 88.
public constant COLL_SIZE_TANK = 80.
public constant COLL_SIZE_GLAIVE = 54.
public constant COLL_SIZE_AIR_Z = 78.
public constant COLL_SIZE_AIR_XY = 52.
public constant COLL_SIZE_FIRE = 8.
public constant AIR_HEIGHT = 200.

public constant SMALL_RANDOM_KILLER_ID = 'u006'
public constant BIG_RANDOM_KILLER_ID = 'u008'
public constant TANK_KILLER_ID = 'h001'
public constant GLAIVE_KILLER_ID = 'u00A'
public constant AIR_KILLER_ID = 'u00J'
public constant FIRE_KILLER_ID = 'u00P'

public class SmallKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().smallKillerId, facing, COLL_SIZE_SK, COLL_SIZE_SK + 4)

	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().smallKillerId, COLL_SIZE_SK, COLL_SIZE_SK + 4)
	
	construct(unit existing)
		super(existing, COLL_SIZE_SK, COLL_SIZE_SK + 16)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, SMALLKILL_INDEX.toString()))
		return json
		
public class SmallRandomKiller extends EscaperSensorSetup
	
	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, SMALL_RANDOM_KILLER_ID, facing, COLL_SIZE_SRK, COLL_SIZE_SRK)
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, SMALL_RANDOM_KILLER_ID, COLL_SIZE_SRK, COLL_SIZE_SRK)
	
	construct(unit existing)
		super(existing, COLL_SIZE_SRK, COLL_SIZE_SRK)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, SMALLRANDKILL_INDEX.toString()))
		return json
	
public class BigKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().bigKillerId, facing, COLL_SIZE_BK, COLL_SIZE_BK * 0.75)
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().bigKillerId, COLL_SIZE_BK, COLL_SIZE_BK * 0.75)
	
	construct(unit existing)
		super(existing, COLL_SIZE_BK, COLL_SIZE_BK)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, BIGKILL_INDEX.toString()))
		return json
		
public class BigRandomKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, BIG_RANDOM_KILLER_ID, facing, COLL_SIZE_BRK, COLL_SIZE_BRK)
		
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, BIG_RANDOM_KILLER_ID, COLL_SIZE_BRK, COLL_SIZE_BRK)
	
	construct(unit existing)
		super(existing, COLL_SIZE_BRK, COLL_SIZE_BRK)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, BIGRANDKILL_INDEX.toString()))
		return json

public class TankKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, TANK_KILLER_ID, facing, COLL_SIZE_TANK, COLL_SIZE_TANK)
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, TANK_KILLER_ID, COLL_SIZE_TANK, COLL_SIZE_TANK)
	
	construct(unit existing)
		super(existing, COLL_SIZE_TANK, COLL_SIZE_TANK)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, TANKKILL_INDEX.toString()))
		return json
		
public class GlaiveKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, GLAIVE_KILLER_ID, facing, COLL_SIZE_GLAIVE, COLL_SIZE_GLAIVE)
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, GLAIVE_KILLER_ID, COLL_SIZE_GLAIVE, COLL_SIZE_GLAIVE)

	construct(unit existing)
		super(existing, COLL_SIZE_GLAIVE, COLL_SIZE_GLAIVE)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, GLAIVEKILL_INDEX.toString()))
		return json

public class AirKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.withZ(200), owner, AIR_KILLER_ID, facing, COLL_SIZE_AIR_XY, COLL_SIZE_AIR_Z)
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, AIR_KILLER_ID, COLL_SIZE_AIR_XY, COLL_SIZE_AIR_Z)
	
	construct(unit existing)
		super(existing, COLL_SIZE_AIR_XY, COLL_SIZE_AIR_Z)

	override function onSensor(UnitEntity source, UnitEntity target)
		if target instanceof Escaper
			let zdelta = AIR_HEIGHT - target.pos.z
			if zdelta - COLL_SIZE_AIR_Z <= sensorHeight and zdelta > 0
				let escaper = target castTo Escaper
				escaper.kill(this)

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, AIRKILL_INDEX.toString()))
		return json

public class FireKiller extends EscaperSensorSetup

	construct(vec2 pos, player owner, angle facing)
		super(pos.withZ(256), owner, FIRE_KILLER_ID, facing, COLL_SIZE_FIRE, 64)
		actor.issueImmediateOrder("immolation")
		setup.removeAbility('A08I')
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, FIRE_KILLER_ID, COLL_SIZE_FIRE, COLL_SIZE_FIRE)
		actor.issueImmediateOrder("immolation")
		setup.removeAbility('A08I')
	
	construct(unit existing)
		super(existing, COLL_SIZE_FIRE, COLL_SIZE_FIRE)
		actor.issueImmediateOrder("immolation")
		setup.removeAbility('A08I')
		
	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, FIREKILL_INDEX.toString()))
		return json