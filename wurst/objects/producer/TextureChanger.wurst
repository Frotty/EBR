package TextureChanger
import SetupObject
import TerrainBlocker
import BuilderConstants
import Preloader

constant int TEXTURECHANGER_ID	= 'n01E'

constant int TERRAIN_O_WALKABLE_ID = 'A02G'
constant int TERRAIN_O_UNWALKABLE_ID = 'A02C'
constant int TERRAIN_O_ICE_ID = 'A02B'
constant int TERRAIN_O_UNICE_ID = 'A02E'
constant int TERRAIN_I_WALKABLE_ID = 'A02H'
constant int TERRAIN_I_UNWALKABLE_ID = 'A02F'
constant int TERRAIN_I_ICE_ID = 'A02A'
constant int TERRAIN_I_UNICE_ID = 'A02D'
constant int TERRAIN_INC_H_ID = 'A01K'
constant int TERRAIN_INC_V_ID = 'A01M'
constant int TERRAIN_DEC_H_ID = 'A01U'
constant int TERRAIN_DEC_V_ID = 'A01T'


public class TextureChanger extends SetupObject
	ConfigValue sizeX = new ConfigValue(1, 1, "Width")
	ConfigValue sizeY = new ConfigValue(1, 1, "Height")
	matrixpos mp = matrixpos(0,0)
	int innerTile = '0000'
	int outerTile = '0001'

	construct(vec2 pos, player owner)
		super(createUnit(owner, TEXTURECHANGER_ID, pos, angle(0)), createUnit(owner, TEXTURECHANGER_ID, pos, angle(0)), 0)
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		innerTile = this.getCurrentRegion().getTypeSet().walkableId
		outerTile = this.getCurrentRegion().getTypeSet().unwalkableId
		sleeps = false
		
	override function update()
		super.update()
		var tX = (pos.x/128).round()
		var tY = (pos.y/128).round()
		RegionData data
		int tileID
		let sizeXI = sizeX.getInt()
		let sizeYI = sizeY.getInt()
		if tX != mp.x or tY != mp.y
			// Clear old terrain
			if tX < mp.x
				for i = -(sizeYI) to sizeYI
					if not bitset(tileModifierMap.loadInt(tX+sizeXI+1, tY+i)).contains(TileModifiers.BLOCK castTo int)
						SetTerrainType((tX+sizeXI+1)*128., (tY + i)*128., outerTile, -1, 1, 1 )
			else if tX > mp.x
				for i = -(sizeYI) to sizeYI
					if not bitset(tileModifierMap.loadInt(tX-sizeXI-1, tY+i)).contains(TileModifiers.BLOCK castTo int)
						SetTerrainType((tX-sizeXI-1)*128., (tY + i)*128., outerTile, -1, 1, 1 )
				
			if tY < mp.y
				for j = -(sizeXI) to sizeXI
					if not bitset(tileModifierMap.loadInt(tX+j, tY + sizeYI+1)).contains(TileModifiers.BLOCK castTo int)
						SetTerrainType((tX+j)*128., (tY + sizeYI+1)*128., outerTile, -1, 1, 1 )
			else if tY > mp.y
				for j = -(sizeXI) to sizeXI
					if not bitset(tileModifierMap.loadInt(tX+j, tY - sizeYI-1)).contains(TileModifiers.BLOCK castTo int)
						SetTerrainType((tX+j)*128., (tY - sizeYI-1)*128., outerTile, -1, 1, 1 )
			// Make new
			mp.x = tX
			mp.y = tY
			for i = -(sizeYI) to sizeYI
				for j = -(sizeXI) to sizeXI
					if not bitset(tileModifierMap.loadInt(tX+j, tY+i)).contains(TileModifiers.BLOCK castTo int)
						var x = (tX+j)*128.
						var y = (tY+i)*128.
						tileID = innerTile
						data = getRegionData(vec2(x,y))
						if data != null 
							if data.canBuild(owner) 
								if GetTerrainType(x, y) != tileID
									SetTerrainType(x, y, tileID, -1, 1, 1 )
							
	
	function onCast()
		let i = GetSpellAbilityId()
		
		switch i
			case TERRAIN_INC_H_ID
				sizeX.increment(this, 3)
			case TERRAIN_INC_V_ID
				sizeY.increment(this, 4)
			case TERRAIN_DEC_H_ID
				sizeX.decrement(this, 3)
			case TERRAIN_DEC_V_ID
				sizeY.decrement(this, 3)
			case TERRAIN_I_WALKABLE_ID
				innerTile = this.getCurrentRegion().getTypeSet().walkableId
			case TERRAIN_I_UNWALKABLE_ID
				innerTile = this.getCurrentRegion().getTypeSet().unwalkableId
			case TERRAIN_I_ICE_ID
				innerTile = CONTROLLABLEICE
			case TERRAIN_I_UNICE_ID
				innerTile = UNCONTROLLABLEICE
			case TERRAIN_O_WALKABLE_ID
				outerTile = this.getCurrentRegion().getTypeSet().walkableId
			case TERRAIN_O_UNWALKABLE_ID
				outerTile = this.getCurrentRegion().getTypeSet().unwalkableId
			case TERRAIN_O_ICE_ID
				outerTile = CONTROLLABLEICE
			case TERRAIN_O_UNICE_ID
				outerTile = UNCONTROLLABLEICE
		mp.x = -1
		update()
					
			
init
	preloadAbility(TERRAIN_O_WALKABLE_ID)
	preloadAbility(TERRAIN_O_UNWALKABLE_ID)
	preloadAbility(TERRAIN_O_ICE_ID)
	preloadAbility(TERRAIN_O_UNICE_ID)
	preloadAbility(TERRAIN_I_WALKABLE_ID)
	preloadAbility(TERRAIN_I_UNWALKABLE_ID)
	preloadAbility(TERRAIN_I_ICE_ID)
	preloadAbility(TERRAIN_I_UNICE_ID)
	preloadAbility(TERRAIN_INC_H_ID)
	preloadAbility(TERRAIN_INC_V_ID)
	preloadAbility(TERRAIN_DEC_H_ID)
	preloadAbility(TERRAIN_DEC_V_ID)

