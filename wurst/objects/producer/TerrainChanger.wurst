package TerrainChanger
import SetupObject
import TerrainBlocker
import Preloader

constant TEXTURECHANGER_ID	= 'n01E'
constant TERRAIN_O_WALKABLE_ID = 'A02G'
constant TERRAIN_O_UNWALKABLE_ID = 'A02C'
constant TERRAIN_O_ICE_ID = 'A02B'
constant TERRAIN_O_UNICE_ID = 'A02E'
constant TERRAIN_I_WALKABLE_ID = 'A02H'
constant TERRAIN_I_UNWALKABLE_ID = 'A02F'
constant TERRAIN_I_ICE_ID = 'A02A'
constant TERRAIN_I_UNICE_ID = 'A02D'
constant TERRAIN_INC_H_ID = 'A01K'
constant TERRAIN_INC_V_ID = 'A01M'
constant TERRAIN_DEC_H_ID = 'A01U'
constant TERRAIN_DEC_V_ID = 'A01T'


public class TerrainChanger extends SetupObject
	ConfigValue sizeX = new ConfigValue(1, 1, "Width")
	ConfigValue sizeY = new ConfigValue(1, 1, "Height")
	matrixpos mp = matrixpos(0,0)
	int innerTile = '0000'
	int outerTile = '0001'

	construct(vec2 pos, player owner)
		super(getUnit(owner, TEXTURECHANGER_ID, pos, angle(0), this), getUnit(owner, TEXTURECHANGER_ID, pos, angle(0), this), 0)
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		innerTile = this.getCurrentRegion().getTypeSet().walkableId
		outerTile = this.getCurrentRegion().getTypeSet().unwalkableId
		sleeps = false
		
	override function update()
		super.update()
		var tX = (pos.x/128).round()
		var tY = (pos.y/128).round()
		let rdata = getRegionData(pos)
		if not rdata.canBuild(owner)
			return
		int tileID
		let sizeXI = sizeX.getInt()
		let sizeYI = sizeY.getInt()
		if tX != mp.x or tY != mp.y
			// Clear old terrain
			var xoffset = 0
			var yoffset = 0
			if tX < mp.x
				xoffset = (sizeXI*2)
				for i = -(sizeYI) to sizeYI
					checkAndSetTile(rdata, tX+sizeXI+1, tY+i, outerTile)
			else if tX > mp.x
				xoffset = (-sizeXI*2)
				for i = -(sizeYI) to sizeYI
					checkAndSetTile(rdata, tX-sizeXI-1, tY+i, outerTile)
			if tY < mp.y
				yoffset = (sizeYI*2)
				for j = -(sizeXI) to sizeXI
					checkAndSetTile(rdata, tX+j, tY + sizeYI+1, outerTile)
			else if tY > mp.y
				yoffset = (-sizeYI*2)
				for j = -(sizeXI) to sizeXI
					checkAndSetTile(rdata, tX+j, tY - sizeYI-1, outerTile)
			if xoffset != 0 and yoffset != 0
				checkAndSetTile(rdata, tX+xoffset, tY+yoffset, outerTile)
				
			// Make new
			mp.x = tX
			mp.y = tY
			for i = -(sizeYI) to sizeYI
				for j = -(sizeXI) to sizeXI
					if not bitset(tileModifierMap.loadInt(tX+j, tY+i)).contains(TileModifiers.BLOCK castTo int)
						var x = (tX+j)*128.
						var y = (tY+i)*128.
						tileID = innerTile
						if rdata.theRect.contains(vec2(x,y))
							if GetTerrainType(x, y) != tileID
								SetTerrainType(x, y, tileID, -1, 1, 1 )
	
	function checkAndSetTile(RegionData rdata, int x, int y, int id)
		if not bitset(tileModifierMap.loadInt(x, y)).contains(TileModifiers.BLOCK castTo int)
			let newP = vec2(x*128., y*128.)
			if rdata.theRect.contains(newP)
				SetTerrainType(newP.x, newP.y, id, -1, 1, 1)

	function cleanArea()
		let tin = innerTile
		let tout = outerTile
		mp.x = -99999
		mp.y = -99999
		innerTile = this.getCurrentRegion().getTypeSet().unwalkableId
		outerTile = this.getCurrentRegion().getTypeSet().unwalkableId
		update()
		innerTile = tin
		outerTile = tout

	function onCast()
		let i = GetSpellAbilityId()
		switch i
			case TERRAIN_INC_H_ID
				sizeX.increment(this, 3)
			case TERRAIN_INC_V_ID
				sizeY.increment(this, 3)
			case TERRAIN_DEC_H_ID
				cleanArea()
				sizeX.decrement(this, 0)
			case TERRAIN_DEC_V_ID
				cleanArea()
				sizeY.decrement(this, 0)
			case TERRAIN_I_WALKABLE_ID
				innerTile = this.getCurrentRegion().getTypeSet().walkableId
			case TERRAIN_I_UNWALKABLE_ID
				innerTile = this.getCurrentRegion().getTypeSet().unwalkableId
			case TERRAIN_I_ICE_ID
				innerTile = CONTROLLABLEICE
			case TERRAIN_I_UNICE_ID
				innerTile = UNCONTROLLABLEICE
			case TERRAIN_O_WALKABLE_ID
				outerTile = this.getCurrentRegion().getTypeSet().walkableId
			case TERRAIN_O_UNWALKABLE_ID
				outerTile = this.getCurrentRegion().getTypeSet().unwalkableId
			case TERRAIN_O_ICE_ID
				outerTile = CONTROLLABLEICE
			case TERRAIN_O_UNICE_ID
				outerTile = UNCONTROLLABLEICE
			
		update()

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, TC_INDEX.toString()))
		return json
				
	override function setEnabled(boolean b)
			
init
	preloadAbility(TERRAIN_O_WALKABLE_ID)
	preloadAbility(TERRAIN_O_UNWALKABLE_ID)
	preloadAbility(TERRAIN_O_ICE_ID)
	preloadAbility(TERRAIN_O_UNICE_ID)
	preloadAbility(TERRAIN_I_WALKABLE_ID)
	preloadAbility(TERRAIN_I_UNWALKABLE_ID)
	preloadAbility(TERRAIN_I_ICE_ID)
	preloadAbility(TERRAIN_I_UNICE_ID)
	preloadAbility(TERRAIN_INC_H_ID)
	preloadAbility(TERRAIN_INC_V_ID)
	preloadAbility(TERRAIN_DEC_H_ID)
	preloadAbility(TERRAIN_DEC_V_ID)

