package Powernode
import Escaper
import SetupObject
import ChannelAbilityPreset
import Assets

constant LINK_ID = 'A051'
constant LINK_BOUNCE_ID = 'A07Q'
constant LINK_DIODE_ID = 'A061'
constant LINK_TETHER_ID = 'A07D'
constant LINK_ORB_ID = 'A08E'
constant EFFECT_STRING = "DRAM"
constant EFFECT_BOUNCE_STRING = "LGRO"
constant EFFECT_DIODE_STRING = "LONE"
constant EFFECT_TETHER_BOTH_STRING = "LBOT"
constant EFFECT_TETHER_AIR_STRING = "BAIR"
constant EFFECT_ORB_STRING = "LORB"
constant KILL_EFFECT = "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl"
constant ACTIVATION_DIST = 22.
public constant INCREASE_BOUNCE_ID = compiletime(ABIL_ID_GEN.next())
public constant DECREASE_BOUNCE_ID = compiletime(ABIL_ID_GEN.next())
public constant LINK_AIR_ID = compiletime(ABIL_ID_GEN.next())

enum LinkType
	KILL
	BOUNCE
	BOUNCE_DIODE
	AIRTETHER
	BOTHTETHER
	ORBTETHER

class Link
	Link next = null
	Link prev = null
	LinkType ltype
	Powernode parent
	Powernode target
	lightning sfx
	
	construct(Powernode parent, Powernode target, lightning sfx, LinkType ltype)
		this.parent = parent
		this.target = target
		this.sfx = sfx
		this.ltype = ltype
		if parent.firstLink != null
			next = parent.firstLink
			parent.firstLink.prev = this
		parent.firstLink = this
		
	ondestroy
		if prev != null
			prev.next = next
		if next != null
			next.prev = prev
		if parent.firstLink == this
			parent.firstLink = next

		DestroyLightning(sfx)


public class Powernode extends SetupObject
	private ConfigValue bounciness = new ConfigValue(0.75, 0.25, "Bounciness")
	protected Link firstLink = null

	construct(vec2 pos, player owner)
		super(getUnit(owner, POWER_NODE_ID, pos, angle(0), this), getUnit(owner, POWER_NODE_ID, pos, angle(0), this), 0.)
		setup..addAbility(LINK_BOUNCE_ID)..addAbility(LINK_DIODE_ID)
		..addAbility(INCREASE_BOUNCE_ID)..addAbility(DECREASE_BOUNCE_ID)..addAbility(TURN_OFF_ID)
		sleeps = false
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		
	function link( Powernode p, LinkType ltype )
		switch ltype
			case LinkType.KILL
				new Link(this, p, AddLightning(EFFECT_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
			case LinkType.BOUNCE
				new Link(this, p, AddLightning(EFFECT_BOUNCE_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
			case LinkType.BOUNCE_DIODE
				new Link(this, p, AddLightning(EFFECT_DIODE_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
			case BOTHTETHER
				new Link(this, p, AddLightning(EFFECT_TETHER_BOTH_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
			case AIRTETHER
				new Link(this, p, AddLightning(EFFECT_TETHER_AIR_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
			case ORBTETHER
				new Link(this, p, AddLightning(EFFECT_ORB_STRING, false, pos.x, pos.y, p.pos.x, p.pos.y), ltype)
		
	override function update()
		super.update()
		var l = firstLink
		while l != null
			if l.target.done 
				destroy l
			else
				MoveLightning(l.sfx, false, pos.x, pos.y, l.target.pos.x, l.target.pos.y)
				for Escaper e from this.getCurrentRegion().getEscapers()
					if l.ltype == LinkType.ORBTETHER
						if e.orb != null and e.orb.pos.toVec2().distanceToSegmentSq(pos.toVec2(), l.target.pos.toVec2() ) < ACTIVATION_DIST.squared()
							flashEffect(Other.spellbreakerattack, e.orb.pos)
							e.orb.terminate()
					else if e.alive and e.pos.toVec2().distanceToSegmentSq(pos.toVec2(), l.target.pos.toVec2() ) < ACTIVATION_DIST.squared()
						if e.pos.z < 24 or l.ltype == LinkType.AIRTETHER
							switch l.ltype
								case LinkType.KILL
									AddSpecialEffect( KILL_EFFECT , e.pos.x, e.pos.y ).destr()
									e.kill(this)
								case LinkType.BOUNCE
									calBounce(l.target.pos,e, (2.00 + bounciness.get()))
								case LinkType.BOUNCE_DIODE
									calBounceD(l.target.pos,e, (1.00 + bounciness.get()))	
								case LinkType.AIRTETHER
									if e.pos.z > 10
										addEffect(Other.dispelmagictarget, e.getPos()).destr()
										calBounceAir(l.target.pos,e, (1.00 + bounciness.get()))	
								case BOTHTETHER
									if e.pos.z > 20
										addEffect(Other.dispelmagictarget, e.getPos()).destr()
									calBounceAir(l.target.pos,e, (1.00 + bounciness.get()))	
								case LinkType.ORBTETHER
									
			l = l.next

	override function setEnabled(boolean b)
		super.setEnabled(b)
		let v = b.toInt().toReal()
		var l = firstLink
		while l != null
			SetLightningColor(l.sfx, v, v, v, v)
			l = l.next
			
				
	function getNormal(vec2 la, vec2 lb, vec2 pos) returns vec3
		let dx = lb.x - la.x
		let dy = lb.y - la.y
		if ((lb.x - la.x)*(pos.y - la.y) - (lb.y - la.y)*(pos.x - la.x)) > 0
			return vec2(-dy,dx).norm().withZ(0)
		return vec2(dy,-dx).norm().withZ(0)
				
	function calBounce(vec3 lpos, Escaper e, real bounceFactor)
		let normal = getNormal(lpos.toVec2(), pos.toVec2(), e.pos.toVec2())
		var b = getBounceVec(e.getRealVel(), normal.toVec2(), bounceFactor)
		if b.lengthSquared() < 75
			b = getBounceVec(normal, normal.toVec2(), -bounceFactor) * 3
		e.setPos(e.pos+b)
		e.setVel(b)
		
	function calBounceD(vec3 lpos, Escaper e, real bounceFactor)
		let dx = lpos.x - e.pos.x
		let dy = lpos.y - e.pos.y
		let normal = vec2(-dy,dx).norm().toVec3()
		var b = getBounceVec(normal, normal.toVec2(), -bounceFactor) * 3
		e.setPos(e.pos+b)
		e.setVel(b)

	function calBounceAir(vec3 lpos, Escaper e, real bounceFactor)
		let normal = getNormal(lpos.toVec2(), pos.toVec2(), e.pos.toVec2())
		var b = getBounceVec(normal, normal.toVec2(), -bounceFactor) * 3
		e.setPos(e.pos+b)
		e.setVel(b)
		
		
	function getBounceVec(vec3 vel3, vec2 nor2, real bounceFactor) returns vec3
		vec3 nor3 = nor2.toVec3()
		vec3 pv3 = vel3.project(nor3)
		vec2 pv2 = pv3.toVec2()
		pv2 *= (-bounceFactor)
		return vel3 + pv2
	
	ondestroy
		var l = firstLink
		while l != null
			destroy l
			l = l.next
	
	function onCast()
		var id = GetSpellAbilityId()
		var target = GetSpellTargetUnit()
		var node = GetTriggerUnit().getUserData() castTo Powernode
		if id == LINK_ID or id == LINK_BOUNCE_ID or id == LINK_DIODE_ID	or id == LINK_TETHER_ID	or id == LINK_ORB_ID
			var data = target.getEntity()
			if data instanceof Powernode
				var pdata = data castTo Powernode
				var isNew = true
				var l = node.firstLink
				while l != null
					if l.target == pdata
						destroy l
						isNew = false
						break
					l = l.next
				if isNew
					if id == LINK_ID
						node.link(data castTo Powernode, LinkType.KILL)
					else if id == LINK_BOUNCE_ID
						node.link(data castTo Powernode, LinkType.BOUNCE)
					else if id == LINK_DIODE_ID	
						node.link(data castTo Powernode, LinkType.BOUNCE_DIODE)
					else if id == LINK_TETHER_ID	
						node.link(data castTo Powernode, LinkType.AIRTETHER)
					else if id == LINK_ORB_ID	
						node.link(data castTo Powernode, LinkType.ORBTETHER)
		else if id == INCREASE_BOUNCE_ID
			node.bounciness.increment(node, 8)
			var link = node.firstLink
			while link != null
				if link.target != this
					link.target.bounciness.setVal(node.bounciness.get())
				link = link.next
				
		else if id == DECREASE_BOUNCE_ID
			node.bounciness.decrement(node, 0)
			var link = node.firstLink
			while link != null
				if link.target != this
					link.target.bounciness.setVal(node.bounciness.get())
				link = link.next
		else if id == TURN_ON_ID
			setEnabled(true)
		else if id == TURN_OFF_ID
			setEnabled(false)

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property(KEY_TYPE, POWERNODE_INDEX.toString()))
		return json

@objectgen function genPowerNode()
	let inc_spell = new ChannelAbilityPreset(INCREASE_BOUNCE_ID, 1, true)
	inc_spell..presetManaCost((int lvl) -> 0)
	..setHeroAbility(false)
	..presetCooldown((int lvl) -> 0)
	..setName("Increase Bounciness")
	..presetIcon("ReplaceableTextures\\CommandButtons\\BTNReplay-Speedup.blp")
	..presetHotkey("C")
	..presetTooltipNormal((int lvl) -> "Increase Bounciness [|cffFFCC00C|r]")
	..presetTooltipNormalExtended((int lvl) -> "")
	..presetButtonPosNormal(2, 2)

	let dec_spell = new ChannelAbilityPreset(DECREASE_BOUNCE_ID, 1, true)
	dec_spell..presetManaCost((int lvl) -> 0)
	..setHeroAbility(false)
	..presetCooldown((int lvl) -> 0)
	..setName("Decrease Bounciness")
	..presetIcon("ReplaceableTextures\\CommandButtons\\BTNReplay-Speeddown.blp")
	..presetHotkey("D")
	..presetTooltipNormal((int lvl) -> "Decrease Bounciness [|cffFFCC00D|r]")
	..presetTooltipNormalExtended((int lvl) -> "")
	..presetButtonPosNormal(2, 1)

	new UnitDefinition(POWER_NODE_ID, 'hfoo')  
	..setAttacksEnabled(0)
	..setTargetedAs("ground")
	..setAnimationBlendTimeseconds(0)
	..setAnimationCastBackswing(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNLightningShield.blp")
	..setButtonPositionX(3)
	..setButtonPositionY(1)
	..setModelFile("units\\orc\\WatcherWard\\WatcherWard.mdl")
	..setTintingColorBlue(200)
	..setTintingColorGreen(100)
	..setTintingColorRed(100)
	..setSelectionScale(0.2)
	..setSpeedBase(180)
	..setTurnRate(3)
	..setMovementType(MovementType.Foot)
	..setUnitSoundSet("")
	..setCollisionSize(0)
	..setNormalAbilities(int2fourchar('A07E') + "," +
	int2fourchar('A01H') + "," +
	int2fourchar('A01E') + "," +
	int2fourchar(REMOVE_OBJECT_ID) + "," +
	int2fourchar(GHOST_VIS_ID) + "," +
	int2fourchar(INVULNERABILITY_ID))
	..setHotkey("F")
	..setName("|cff9CA5EFPower Node")
	..setTooltipBasic("|cffFFCC00Build |cff9CA5EFPower Node [F]")
	..setTooltipExtended("Can be linked to other Powernodes to create an electrical circuit." +
	"\nThe resulting lightning kills Escapers if they try to pass it.")
	..setUpgradesUsed("")
	..setBuildTime(1)
	..setUnitClassification("ancient")
	..setHitPointsMaximumBase(100000000)
	..setSightRadiusDay(0)
	..setSightRadiusNight(0)
	..setFoodCost(0)
	..setGoldCost(0)
	..setLumberCost(0)
	..setIsaBuilding(false)
	new ChannelAbilityPreset(LINK_AIR_ID, 1, true)
	..presetManaCost((int lvl) -> 0)
	..setHeroAbility(false)
	..presetCooldown((int lvl) -> 0)
	..setName("Link Air")
	..presetIcon("BTNStasisTrap.blp")
	..presetHotkey("S")
	..presetTooltipNormal((int lvl) -> "Add/Remove Link [|cffFFCC00S|r]")
	..presetTooltipNormalExtended((int lvl) -> "Add or remove this type of link from another powernode.\n"
		+ "Blocks escapers only when they are in air.")
	..presetButtonPosNormal(2, 1)
