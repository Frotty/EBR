package Door
import SetupObject
import Key
import PlayerData
import ChannelAbilityPreset

constant int DOORORDER_ID = 'dor2'
constant int DOORPATH = compiletime(UNIT_ID_GEN.next())
constant int DOORPATH_O = compiletime(UNIT_ID_GEN.next())
constant int DOOROPEN_ABILITY_ID = 'A00J'
constant int DOORTURN_ABILITY_ID = 'A01W'
constant int DOORPLACEKEY_ABILITY_ID = 'Av42'
constant real EVENT_RADIUS = 192
//Item type ids

int array KEY_COLOR_ID
constant KEY_COLOR = "c"
constant KEY_ROTATION = "d"

public class Door extends StaticSetupObject
	unit pathing
	EBRColor col = EBRColor.WHITE
	
	boolean vertical = false
	boolean opened = false

	construct(unit existing)
		super(createUnit(existing.getOwner(), DOORDUMMY_ID, existing.getPos(), (270).asAngleDegrees()), existing, EVENT_RADIUS, function Door.keyopen )
		pathing = createUnit(this.owner, DOORPATH, pos, (270).asAngleDegrees())
	
	construct( vec2 pos, player owner )
		super(createUnit(owner,DOORDUMMY_ID, pos, (270).asAngleDegrees()), 
							CreateUnit(owner,DOORORDER_ID, pos.x, pos.y, 0), EVENT_RADIUS, function Door.keyopen )
		pathing = CreateUnit( this.owner, DOORPATH, pos.x, pos.y, 270 )
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
	
	static function keyopen() //open with item and color conditions
		unit source = GetTriggeringTrigger().getSource()
		unit u = GetTriggerUnit()
		Entity e = u.getEntity()
		Door door = source.getUserData() castTo Door
		if not door.opened and e instanceof Escaper
			var es = e castTo Escaper
			if es.pos.z < 64
				if UnitHasItemOfTypeBJ( u, KEY_COLOR_ID[door.col castTo int] ) //WARNING BJ function//
					var kdata = GetItemOfTypeFromUnitBJ( u, KEY_COLOR_ID[door.col castTo int] ).getUserData() castTo Key
					if kdata != null
						kdata.terminate()
						door.openDoor()
						let pd = pData[e.owner.getId()]
						pd.addXp(10, false)

	function changeColor( int id )
		switch id
			case colorSpells[0]
				col = EBRColor.WHITE
			case colorSpells[1]
				col = EBRColor.RED
			case colorSpells[2]
				col = EBRColor.BLUE
			case colorSpells[3]
				col = EBRColor.TEAL
			case colorSpells[4]
				col = EBRColor.PURPLE
			case colorSpells[5]
				col = EBRColor.YELLOW
			case colorSpells[6]
				col = EBRColor.ORANGE
			case colorSpells[7]
				col = EBRColor.GREEN
			case colorSpells[8]
				col = EBRColor.PINK
		actor.setVertexColor(col.toColor())
				
	function toggleOpen()
		if opened
			closeDoor()
		else
			openDoor()
			
	
	function closeDoor()
		SetUnitAnimation( actor, "stand" )
		pathing.remove()
		opened = false
		if vertical
			pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
		else
			pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )

	function openDoor()
		SetUnitAnimation( actor, "Death Alternate" )
		pathing.remove()
		opened = true
		if vertical
			pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
		else
			pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
			
	function turn()
		if vertical
			pathing.remove()
			vertical = false
			if opened
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 ))
				SetUnitAnimation( actor, "Death Alternate" )
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
			else
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 ))
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )
			
		else
			pathing.remove()
			vertical = true
			if opened 
				setNewActor(CreateUnit(owner, DOORDUMMY_ID , pos.x, pos.y, 0 ))
				SetUnitAnimation( actor, "Death Alternate" )
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
			else
				printLog(Loglevel.DEBUG, "yes " + GetPlayerId(owner).toString())
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 0 ))
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
		actor.setVertexColor(col.toColor())
		
	ondestroy
		pathing.setEntity(null)
		pathing.remove()

	function onCast() returns boolean
		int id = GetSpellAbilityId()
		switch id 
			case DOOROPEN_ABILITY_ID
				toggleOpen()
			case DOORTURN_ABILITY_ID
				turn()
			default 
				changeColor(id)
		return false

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property(KEY_TYPE, DOOR_INDEX.toString()))
		json.addProperty(new Property(KEY_COLOR, (col castTo int).toString()))
		json.addProperty(new Property(KEY_ROTATION, (vertical.toInt()).toString()))
		return json

	override function deserialize(Json json)
		super.deserialize(json)
		col = json.getInt(KEY_COLOR) castTo EBRColor
 		actor.setVertexColor(col.toColor())
		if json.getInt(KEY_ROTATION) == 1
			turn()
	

@init1 function init_Door()
	//color id		unit id
	KEY_COLOR_ID[0] = 'I009' //white
	KEY_COLOR_ID[1] = 'I00C' //red
	KEY_COLOR_ID[2] = 'I004' //blue
	KEY_COLOR_ID[3] = 'I008' //teal
	KEY_COLOR_ID[4] = 'I00J' //purple
	KEY_COLOR_ID[5] = 'I005' //yellow
	KEY_COLOR_ID[6] = 'I00O' //orange
	KEY_COLOR_ID[7] = 'I00B' //green
	KEY_COLOR_ID[8] = 'I006' //pink


@objectgen function genDoor()	
	new BuildingDefinition(DOORPATH, 'hhou')  
	..setScalingValue(0.55)
	..setRequiredAnimationNames("second")
	..setButtonPositionX(0)
	..setButtonPositionY(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGateDoor.blp")
	..setGroundTexture("")
	..setShadowTextureBuilding("")
	..setModelFile(".mdl")
	..setSelectionScale(6)
	..setUnitSoundSet("")
	..setPathingMap("war3mapImported\\Doorpathing.tga")
	..setPlacementPreventedBy("")
	..setCollisionSize(140)
	..setCanDropItemsOnDeath(false)
	..setNormalAbilities(int2fourchar(INVULNERABILITY_ID))
	..setName("Doorpathing")
	..setHotkey("D")
	..setTooltipBasic("|cFFFFFF00D|roor Horizontal/Vertical")
	..setTooltipExtended("Can be opened by using a |cFF00FFFFKey|r")
	..setBuildTime(1)
	..setHitPointsMaximumBase(1000000)
	..setFoodProduced(0)
	..setGoldCost(0)
	..setLumberCost(0)

	new BuildingDefinition(DOORPATH_O, 'hhou')  
	..setScalingValue(0.55)
	..setRequiredAnimationNames("second")
	..setButtonPositionX(0)
	..setButtonPositionY(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGateDoor.blp")
	..setGroundTexture("")
	..setShadowTextureBuilding("")
	..setModelFile(".mdl")
	..setSelectionScale(6)
	..setUnitSoundSet("")
	..setPathingMap("war3mapImported\\DoorpathingOpen.tga")
	..setPlacementPreventedBy("")
	..setCollisionSize(140)
	..setCanDropItemsOnDeath(false)
	..setNormalAbilities(int2fourchar(INVULNERABILITY_ID))
	..setName("DoorpathingOpen")
	..setHotkey("D")
	..setTooltipBasic("|cFFFFFF00D|roor Horizontal/Vertical")
	..setTooltipExtended("Can be opened by using a |cFF00FFFFKey|r")
	..setBuildTime(1)
	..setHitPointsMaximumBase(1000000)
	..setFoodProduced(0)
	..setGoldCost(0)
	..setLumberCost(0)

	new BuildingDefinition(DOORDUMMY_ID, 'hhou')  
	..setScalingValue(0.55)
	..setRequiredAnimationNames("second")
	..setButtonPositionX(0)
	..setButtonPositionY(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGateDoor.blp")
	..setGroundTexture("")
	..setShadowTextureBuilding("")
	..setModelFile("Doodads\\LordaeronSummer\\Terrain\\ElfGate\\ElfGate.mdl")
	..setSelectionScale(6)
	..setUnitSoundSet("")
	..setPathingMap("war3mapImported\\Doorpathing.tga")
	..setPlacementPreventedBy("")
	..setCollisionSize(140)
	..setCanDropItemsOnDeath(false)
	..setNormalAbilities(int2fourchar('Aloc'))
	..setName("|cffFF9421Door")
	..setHotkey("Q")
	..setTooltipBasic("|cffFFCC00Build |cffFF9421Door [Q]")
	..setTooltipExtended("Doors can be opened by keys and executers." + 
	"\nThey can be rotated and recolored. Doors of a certain color can only be opened by a key with that same color." +
	"\nYou can drop keys using the item in your builder's inventory.")
	..setBuildTime(1)
	..setHitPointsMaximumBase(1000000)
	..setFoodProduced(0)
	..setGoldCost(0)
	..setLumberCost(0)
	..setUnitClassification("ancient,mechanical")

	new BuildingDefinition(DOORORDER_ID, 'hhou')  
	..setScalingValue(0.75)
	..setRequiredAnimationNames("second")
	..setButtonPositionX(0)
	..setButtonPositionY(0)
	..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGateDoor.blp")
	..setGroundTexture("")
	..setShadowTextureBuilding("")
	..setModelFile("models\\tcBox.mdl")
	..setSelectionScale(1)
	..setUnitSoundSet("")
	..setPathingMap("")
	..setPlacementPreventedBy("")
	..setCollisionSize(0)
	..setCanDropItemsOnDeath(false)
	..setNormalAbilities(int2fourchar('A05R') + "," +
	int2fourchar('A01W') + "," +
	int2fourchar('A00J') + "," +
	int2fourchar(REMOVE_OBJECT_ID) + "," +
	int2fourchar(INVULNERABILITY_ID) + "," +
	int2fourchar(GHOST_ID))
	..setName("|cFFFF8000Door|r ")
	..setHotkey("D")
	..setTooltipBasic("Dummy")
	..setBuildTime(1)
	..setHitPointsMaximumBase(1000000)
	..setFoodProduced(0)
	..setGoldCost(0)
	..setLumberCost(0)
	..setUnitClassification("ancient,mechanical")