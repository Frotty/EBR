package Door
import SetupObject
import BuilderConstants
import Key
import PlayerData

constant int DOORDUMMY_ID = 'h002'
constant int DOORORDER_ID = 'h00C'
constant int DOORPATH = 'h006'
constant int DOORPATH_O = 'h00F'
constant int DOOROPEN_ABILITY_ID = 'A00J'
constant int DOORTURN_ABILITY_ID = 'A01W'
constant int DOORPLACEKEY_ABILITY_ID = 'Av42'
constant real EVENT_RADIUS = 192
//Item type ids

int array KEY_COLOR_ID


public class Door extends StaticSetupObject
	unit pathing
	COLOR col = COLOR.WHITE
	
	boolean vertical = false
	boolean opened = false

	construct(unit existing)
		super(createUnit(existing.getOwner(), DOORDUMMY_ID, existing.getPos(), (270).asAngleDegrees()), existing, EVENT_RADIUS, function Door.keyopen )
		pathing = createUnit(this.owner, DOORPATH, pos, (270).asAngleDegrees())
	
	construct( vec2 pos, player owner )
		super(createUnit(owner,DOORDUMMY_ID, pos, (270).asAngleDegrees()), 
							CreateUnit(owner,DOORORDER_ID, pos.x, pos.y, 0), EVENT_RADIUS, function Door.keyopen )
		pathing = CreateUnit( this.owner, DOORPATH, pos.x, pos.y, 270 )
		EventListener.add(setup, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())

	
	static function keyopen() //open with item and color conditions
		unit source = GetTriggeringTrigger().getSource()
		unit u = GetTriggerUnit()
		Entity e = u.getEntity()
		Door door = source.getUserData() castTo Door
		if not door.opened and e instanceof Escaper
			var es = e castTo Escaper
			if es.pos.z < 48
				if UnitHasItemOfTypeBJ( u, KEY_COLOR_ID[door.col castTo int] ) //WARNING BJ function//
					var kdata = GetItemOfTypeFromUnitBJ( u, KEY_COLOR_ID[door.col castTo int] ).getUserData() castTo Key
					if kdata != null
						kdata.terminate()
						door.openDoor()
						let pd = pData[e.owner.getId()]
						pd.addXp(10, false)
				
	function changeColor( int id )
		switch id
			case colorSpells[0]
				col = COLOR.WHITE
			case colorSpells[1]
				col = COLOR.RED
			case colorSpells[2]
				col = COLOR.BLUE
			case colorSpells[3]
				col = COLOR.TEAL
			case colorSpells[4]
				col = COLOR.PURPLE
			case colorSpells[5]
				col = COLOR.YELLOW
			case colorSpells[6]
				col = COLOR.ORANGE
			case colorSpells[7]
				col = COLOR.GREEN
			case colorSpells[8]
				col = COLOR.PINK
		if col == COLOR.WHITE
			actor.setVertexColor(COLOR_WHITE)
		else	
			actor.setVertexColor(playercolors[col castTo int - 1])
				
	function toggleOpen()
		if opened
			closeDoor()
		else
			openDoor()
			
	
	function closeDoor()
		SetUnitAnimation( actor, "stand" )
		pathing.remove()
		opened = false
		if vertical
			pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
		else
			pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )

	function openDoor()
		SetUnitAnimation( actor, "Death Alternate" )
		pathing.remove()
		opened = true
		if vertical
			pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
		else
			pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
			
	function turn()
		if vertical
			pathing.remove()
			vertical = false
			if opened
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 ))
				SetUnitAnimation( actor, "Death Alternate" )
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
			else
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 ))
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )
			
		else
			pathing.remove()
			vertical = true
			if opened 
				setNewActor(CreateUnit(owner, DOORDUMMY_ID , pos.x, pos.y, 0 ))
				SetUnitAnimation( actor, "Death Alternate" )
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
			else
				printLog(Loglevel.DEBUG, "yes " + GetPlayerId(owner).toString())
				setNewActor(CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 0 ))
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
		if col == COLOR.WHITE
			actor.setVertexColor(COLOR_WHITE)
		else	
			actor.setVertexColor(playercolors[col castTo int - 1])
		
	ondestroy
		pathing.setEntity(null)
		pathing.remove()

	function onCast() returns boolean
		int id = GetSpellAbilityId()
		switch id 
			case DOOROPEN_ABILITY_ID
				toggleOpen()
			case DOORTURN_ABILITY_ID
				turn()
			default 
				changeColor(id)
		return false

	

@init1 function init_Door()
	//color id		unit id
	KEY_COLOR_ID[0] = 'I009' //white
	KEY_COLOR_ID[1] = 'I00C' //red
	KEY_COLOR_ID[2] = 'I004' //blue
	KEY_COLOR_ID[3] = 'I008' //teal
	KEY_COLOR_ID[4] = 'I00J' //purple
	KEY_COLOR_ID[5] = 'I005' //yellow
	KEY_COLOR_ID[6] = 'I00O' //orange
	KEY_COLOR_ID[7] = 'I00B' //green
	KEY_COLOR_ID[8] = 'I006' //pink

