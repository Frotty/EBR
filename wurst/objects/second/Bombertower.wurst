package Bombertower
import BaseObject
import Attackspeed
import ClosureTimers

constant int 	BOMBERTOWER_ID   = 'h019'
constant int	ATTACK_ORDER = 851983
constant int	ATTACK_GROUND_ORDER = 851984
constant int	STOP_ORDER = 851972

public class Bombertower extends StaticBaseObject
	unit dummy
	boolean skipOrder = false

	construct( vec2 pos, player owner )
		super( pos, getUnit(owner, BOMBERTOWER_ID, pos, angle(0), this), 0., CODE_NULL, CODE_NULL )
		actor..addAbility(GHOST_VIS_ID)..addAbility(LOCUST_ID)
		dummy = getUnit(owner, BOMBERTOWER_ID, pos, angle(0), this)
		dummy..addAbility(GHOST_INVIS_ID)..setEntity(this)..setScale(0.5)
		EventListener.add(dummy, EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> checkOrder())
		EventListener.add(dummy, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> checkOrder())
		EventListener.add(dummy, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> checkOrder())
		SetUnitPathing(dummy, true)

		
	override function onCast()
		super.onCast()
		let id = GetSpellAbilityId()
		onAttackspeedCast(id, actor)
		
	ondestroy
		dummy.remove()

	override function serialize() returns Json
		let json = super.serialize()
		json
		..addProperty(new Property(KEY_TYPE, BOMBTOWER_INDEX.toString()))
		return json	

	function checkOrder()
		var i = GetIssuedOrderId()
		var e = GetOrderedUnit().getEntity()
		var tpos = getOrderPos()
		if tpos != ZERO2 and not getRegionData(tpos).canBuild(owner)
			print("abort")
			GetOrderedUnit().abortOrder()
			return
		if e instanceof Bombertower 
			var obj = e castTo Bombertower
			if obj.skipOrder
				obj.skipOrder = false
				return
			if GetOrderedUnit() == obj.dummy
				obj.clearQuestionmark()
				if i == ATTACK_GROUND_ORDER
					IssuePointOrderById(obj.actor,i, GetOrderPointX(),GetOrderPointY())
					obj.skipOrder = true
					doAfter(0.1,() -> obj.dummy.issueImmediateOrder("stop"))
				else if i == ATTACK_ORDER
					IssueTargetOrderById(obj.actor,i, GetOrderTargetUnit())
					obj.skipOrder = true
					doAfter(0.1,() -> obj.dummy.issueImmediateOrder("stop"))
				else if i == STOP_ORDER 
					IssueImmediateOrderById(obj.actor, STOP_ORDER)
			
			
		
