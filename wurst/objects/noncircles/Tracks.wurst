package Tracks
import Entity
import Escaper
import EventHandling
import LinkedList
import Texttag

int array TRACKS

constant int TRACK_ID 			= 'n01S'
constant int INC_ID		  	= 'A04S'
constant int DEC_ID		  	= 'A04T'
constant int LEFT_ID		 	= 'A04L'
constant int RIGHT_ID	   	= 'A04U'
constant int INCLENGTH_ID   	= 'A04H'
constant int DECLENGTH_ID		= 'A050'

public class Tracks extends UnitEntity
	unit setup
	
	real speed = 2
	int size = 0
	int height = 0
	int width  = 0
	int angle = 0
	
	construct( vec2 pos, player owner )
		super( pos.toVec3(), CreateUnit(owner, TRACKS[0], pos.x, pos.y, 0) )
		setup = CreateUnit(owner, TRACK_ID, pos.x, pos.y, 0 )
		setup.registerCastEvent(Condition(function Tracks.onCast))
		setup.setUserData(this castTo int)
		
		
	override function update()
		for escaper in escapers
			if ( escaper.pos.x > pos.x - width * 128 - 64 and escaper.pos.x < pos.x + width * 128 + 64 
				and escaper.pos.y > pos.y - height * 128 - 64 and escaper.pos.y < pos.y + height * 128 + 64 )
				
				escaper.trackVelocity += vec3(Cos((angle+90) * DEGTORAD) * speed, Sin((angle+90) * DEGTORAD) * speed, 0. )
		
				
	function recreateDummy()
		actor.remove()
		actor = CreateUnit(owner, TRACKS[size], pos.x, pos.y, angle.toReal())
		
	ondestroy
		setup.remove()
		setup.unregisterCastEvent()
		actor.remove()
				
	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var tracks = GetSpellAbilityUnit().getUserData() castTo Tracks
		switch id
			case INC_ID
				if tracks.speed < 20.
					tracks.speed++
					createTTEx(tracks.pos, vec2(0,0.05), "Speed : " + tracks.speed.toString(), 12,  2., colorRGBA(255,255,255,0), tracks.owner  )
			case DEC_ID
				if tracks.speed > 1.
					tracks.speed--
					createTTEx(tracks.pos, vec2(0,0.05), "Speed : " + tracks.speed.toString(), 12,  2., colorRGBA(255,255,255,0), tracks.owner  )
			case INCLENGTH_ID
				if tracks.size < 2
					tracks.size++
					if tracks.angle == 0 or tracks.angle == 180
						tracks.height++
					else
						tracks.width++
					tracks.recreateDummy()
			case DECLENGTH_ID
				if tracks.size > 0
					tracks.size--
					if tracks.angle == 0 or tracks.angle == 180
						tracks.height--
					else
						tracks.width--
					tracks.recreateDummy()
			case LEFT_ID
				tracks.angle += 90
				var temp1 = tracks.height
				tracks.height = tracks.width
				tracks.width = temp1
				tracks.recreateDummy()
			case RIGHT_ID
				tracks.angle -= 90
				var temp2 = tracks.height
				tracks.height = tracks.width
				tracks.width = temp2
				tracks.recreateDummy()
					
		return false
		
	
init
	TRACKS[0] = 'n01R'
	TRACKS[1] = 'n01L'
	TRACKS[2] = 'n01N'
	