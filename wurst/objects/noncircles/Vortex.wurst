package Vortex
import Entity
import OnCast
import Escaper
import EventHandling
import LinkedList
import Texttag

constant int ID = 'n013'
constant int INC_ID = 'A04J'
constant int DEC_ID = 'A04K'

constant real GRAV_RADIUS = 445

public class Vortex extends Entity
	unit actor
	real gravity = 2.
	
	construct( vec2 pos, player owner )
		super( pos.toVec3(), GRAV_RADIUS, owner )
		actor = CreateUnit(owner, ID, pos.x, pos.y, 0)
		actor.registerCastEvent(Condition(function Vortex.onCast))
		actor.setUserData(this castTo int)
	
		
	override function update()
		for e in escapers
			if position.toVec2().distToVecSquared( e.position.toVec2() ) < GRAV_RADIUS.squared() and not e.flying
				var angle = e.position.toVec2().angleTo(position.toVec2())
				e.vortexVelocity += vec3( Cos(angle) * gravity, Sin(angle) * gravity, 0 )
		
	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var vdata = GetTriggerUnit().getUserData() castTo Vortex
		switch id
			case INC_ID
				if vdata.gravity < 8.
					vdata.gravity += .5
					createTTExForPlayer(vdata.position, vec2(0,0.5), "Gravity : " + vdata.gravity.toString(), 12,  2., colorRGBA(255,255,255,0), vdata.owner  )
			case DEC_ID
				if vdata.gravity > -8.
					vdata.gravity -= .5
					createTTExForPlayer(vdata.position, vec2(0,0.05), "Gravity : " + vdata.gravity.toString(), 12,  2., colorRGBA(255,255,255,0), vdata.owner  )
		return false

		
	
	override function onGround()
	override function inAir()		

	ondestroy
		actor.unregisterCastEvent()
	
