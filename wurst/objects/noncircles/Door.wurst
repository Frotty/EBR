package Door
	import BaseObject
	import Terrain
	import Escaper
	import SetupObject
	import GameConstants
	import Colors
	import BuilderConstants
	import Key
	import EventHandling
	
	//NOTE: Some parts of this are from the old ebr  O.o   >:0
	int array colorRGBv
	constant int DOORDUMMY_ID = 'h002'
	constant int DOORORDER_ID = 'h00C'
	constant int DOORPATH = 'h006'
	constant int DOORPATH_O = 'h00F'
	constant int DOOROPEN_ABILITY_ID = 'A00J'
	constant int DOORTURN_ABILITY_ID = 'A01W'
	constant int DOORPLACEKEY_ABILITY_ID = 'Av42'
	constant real EVENT_RADIUS = 192
	//Item type ids

	int array KEY_COLOR_ID
	
	
	public class Door extends StaticSetupObject
		unit pathing
		COLOR col = COLOR.WHITE
		
		boolean vertical = false
		boolean opened = false
		
		construct( vec2 pos, player owner )
			super( pos.toVec3(), CreateUnit(owner,DOORDUMMY_ID, pos.x, pos.y, 270) , 
								CreateUnit(owner,DOORORDER_ID, pos.x, pos.y, 0), EVENT_RADIUS, function Door.keyopen )
			pathing = CreateUnit( this.owner, DOORPATH, pos.x, pos.y, 270 )
			pathing.setUserData(this castTo int)
			setup.registerCastEvent(Condition(function onCast))

		
		static function keyopen() //open with item and color conditions
			unit source = GetTriggeringTrigger().getSource()
			unit u = GetTriggerUnit()
			Entity e = u.getUserData() castTo Entity
			Door door = source.getUserData() castTo Door
			if e instanceof Escaper
				item i = UnitItemInSlot(u, 0)
				if UnitHasItemOfTypeBJ( u, KEY_COLOR_ID[door.col castTo int] ) and door.opened == false //WARNING BJ function//
					var kdata = GetItemOfTypeFromUnitBJ( u, KEY_COLOR_ID[door.col castTo int] ).getUserData() castTo Key
					if not door.opened
						kdata.terminate()
						door.openDoor()
					
		function changeColor( int id )
			switch id
				case colorSpells[0]
					col = COLOR.WHITE
				case colorSpells[1]
					col = COLOR.RED
				case colorSpells[2]
					col = COLOR.BLUE
				case colorSpells[3]
					col = COLOR.TEAL
				case colorSpells[4]
					col = COLOR.PURPLE
				case colorSpells[5]
					col = COLOR.YELLOW
				case colorSpells[6]
					col = COLOR.ORANGE
				case colorSpells[7]
					col = COLOR.GREEN
				case colorSpells[8]
					col = COLOR.PINK
					
			colorize()
					
		function colorize()
			color c = color(0,0,0)
			if col == COLOR.YELLOW
				c = colors[col castTo int +1]
			else if col == COLOR.ORANGE
				c = colors[col castTo int -1]
			else
				c = colors[col castTo int]
			SetUnitVertexColor(actor,c.red,c.green,c.blue,255)
		
		function toggleOpen()
			if opened
				closeDoor()
			else
				openDoor()
				
		
		function closeDoor()
			SetUnitAnimation( actor, "stand" )
			RemoveUnit( pathing )
			opened = false
			if vertical
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
			else
				pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )
	
		function openDoor()
			SetUnitAnimation( actor, "Death Alternate" )
			RemoveUnit( pathing )
			opened = true
			if vertical
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
			else
				pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
		
		function turn()
			if vertical
				RemoveUnit( pathing )
				RemoveUnit( actor )
				vertical = false
				if opened
					actor = CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 )
					SetUnitAnimation( actor, "Death Alternate" )
					pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 270 )
				else
					actor = CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 270 )
					pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 270 )
				
			else
				RemoveUnit( pathing )
				RemoveUnit( actor )
				vertical = true
				if opened 
					actor = CreateUnit(owner, DOORDUMMY_ID , pos.x, pos.y, 0 )
					SetUnitAnimation( actor, "Death Alternate" )
					pathing  = CreateUnit( owner, DOORPATH_O, pos.x, pos.y, 0 )
				else
					debugPrint("y√§s " + GetPlayerId(owner).toString(), 1)
					actor = CreateUnit( owner, DOORDUMMY_ID , pos.x, pos.y, 0 )
					pathing  = CreateUnit( owner, DOORPATH, pos.x, pos.y, 0 )
			colorize()
			
		ondestroy
			pathing.remove()
			setup.unregisterCastEvent()
	
		static function onCast() returns boolean
			debugPrint("casted", 1)
			unit u = GetTriggerUnit()
			Door door = u.getUserData() castTo Door
			debugPrint(door.pos.toString(), 1)
			int id = GetSpellAbilityId()
			switch id 
				case DOOROPEN_ABILITY_ID
					door.toggleOpen()
				case DOORTURN_ABILITY_ID
					door.turn()
				default 
					door.changeColor(id)
			return false

		
	
	public function init_Door()
		//color id		unit id
		KEY_COLOR_ID[0] = 'I009' //white
		KEY_COLOR_ID[1] = 'I00C' //red
		KEY_COLOR_ID[2] = 'I004' //blue
		KEY_COLOR_ID[3] = 'I008' //teal
		KEY_COLOR_ID[4] = 'I008' //purple
		KEY_COLOR_ID[5] = 'I005' //yellow
		KEY_COLOR_ID[6] = 'I00O' //orange
		KEY_COLOR_ID[7] = 'I00B' //green
		KEY_COLOR_ID[8] = 'I006' //pink


endpackage