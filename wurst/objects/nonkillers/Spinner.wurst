package Spinner
import Entity
import LinkedList
import EventHandling
import SetupObject
import TempGroups
import Texttag
import Remove
import BomberTarget
import LastOrder
import PreloadHandler

constant int SPINNER_ID      = 'h01M'
constant int SPELL_ID        = 'A01B'
constant int SPELL2_ID       = 'A04M'
constant int INC_ID          = 'A01F'
constant int DEC_ID          = 'A01G'	

class SpinNode
	DynamicSetupObject obj
	real angl
	real dist
	
	construct(DynamicSetupObject ent, real ang, real dist)
		obj = ent
		angl = ang
		this.dist = dist
	
	ondestroy
		obj.setup.addAbility(REMOVE_ID)

public class Spinner extends DynamicSetupObject
	LinkedList<SpinNode> spinningEntities = new LinkedList<SpinNode>()
	real speed = 2.

	construct(vec2 pos, player owner)
		super(pos.toVec3(), CreateUnit(owner, SPINNER_ID, pos.x, pos.y, 0), CreateUnit(owner, SPINNER_ID, pos.x, pos.y, 0), 0, CODE_NULL)
		setup.registerCastEvent(Condition(function onCast))
		actor.setUserData(this castTo int)
		
		
	override function update()
		super.update()
		real angl
		real dist
		for node in spinningEntities
			debugPrint("spinning", 0)
			node.obj.setNewXY( vec3(polarProjectionXR(pos.x, node.dist, node.angl+speed*DEGTORAD), polarProjectionYR(pos.y, node.dist, node.angl+speed*DEGTORAD), 0. ) )
			node.angl += speed*DEGTORAD
			
	function checkObj(Entity e)
		if e instanceof DynamicSetupObject
			var dobj = e castTo DynamicSetupObject
			boolean isNew = true
			int i = 0
			for node in spinningEntities
				if node.obj == dobj
					isNew = false
					node.obj.setup.addAbility(REMOVE_ID)
					destroy spinningEntities.get(i)
					spinningEntities.removeAt(i)
					break
				i++
			if isNew and (dobj.setup.hasAbility(REMOVE_ID) or dobj.owner == Player(11))
				dobj.setup.removeAbility(REMOVE_ID)
				spinningEntities.add(new SpinNode(dobj, angleBetweenCoordsR(pos.x, pos.y, dobj.pos.x, dobj.pos.y), distanceBetweenCoords(pos.x, pos.y, dobj.pos.x, dobj.pos.y) ))

	ondestroy
		setup.unregisterCastEvent()
		while spinningEntities.size > 0
			SpinNode n = spinningEntities.get(0)
			spinningEntities.removeAt(0)
			destroy n 
		destroy spinningEntities
				
	

	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var sdata = GetTriggerUnit().getUserData() castTo Spinner
		switch id
			case SPELL_ID
				var u = GetSpellTargetUnit()
				var data = u.getUserData() castTo UnitEntity
				debugPrint(data.actor.hasAbility(REMOVE_ID).toString(), 8)
				if data.owner == sdata.owner
					sdata.checkObj(data)
			case SPELL2_ID
				var tx = GetSpellTargetX()
				var ty = GetSpellTargetY()
				GroupEnumUnitsInRange(ENUM_GROUP, tx, ty, 300., null)
				for gu in ENUM_GROUP
					if gu != sdata.actor 
						if gu.getUserData() > 0
							var ed = gu.getUserData() castTo Entity
							if ed.owner == sdata.owner
								sdata.checkObj(gu.getUserData() castTo Entity)
				ENUM_GROUP.clear()
			case INC_ID
				if sdata.speed < 10.
					sdata.speed += .5
					createTTEx(sdata.pos, vec2(0,0.05), "Spin-Speed: "+ R2SW(sdata.speed,1,2), 10,  2., colorA(255,255,255,0), sdata.owner  )
				else
					createTTEx(sdata.pos, vec2(0,0.05), "Maximum Speed", 10,  2., colorA(255,255,255,0), sdata.owner  )
			case DEC_ID
				if sdata.speed > -10.
					sdata.speed -= .5
					createTTEx(sdata.pos, vec2(0,0.05), "Spin-Speed: "+ R2SW(sdata.speed,1,2), 10,  2., colorA(255,255,255,0), sdata.owner  )
				else
					createTTEx(sdata.pos, vec2(0,0.05), "Minimum Speed", 10,  2., colorA(255,255,255,0), sdata.owner  )
		sdata.setup.issuePastOrder(2)
		return false
	
init
	preloadAbility(SPELL_ID)
	preloadAbility(SPELL2_ID)
	preloadAbility(INC_ID)
	preloadAbility(DEC_ID)
		
