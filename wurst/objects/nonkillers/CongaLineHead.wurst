package CongaLineHead
import SetupObject
import EventHandling
import LinkedList
import Spinner
import Texttag

constant int UNIT_ID = 'h000'

constant int ADD_ID = 'A02Y'
constant int INC_ID = 'A02Z'
constant int DEC_ID = 'A030'

public class CongaLineHead extends DynamicSetupObject
	LinkedList<Entity> segments
	real segLength = 50.
	
	construct(vec2 pos, player owner)
		super(pos.toVec3(), CreateUnit(owner, UNIT_ID, pos.x, pos.y, 0.), CreateUnit(owner, UNIT_ID, pos.x, pos.y, 0.), 0., CODE_NULL )
		setup.registerCastEvent(Condition(function CongaLineHead.onCast))
		segments = new LinkedList<Entity>()
		
	override function update()
		super.update()
		int i = 0
		Entity se = null
		for e in segments
			if i == 0
				e.setNewPos(calculateSegmentPos(pos.toVec2(), e.pos.toVec2(), 64.))
			else
				e.setNewPos(calculateSegmentPos(se.pos.toVec2(), e.pos.toVec2(), segLength))
				
			se = e
			i++
		
	function addSegment(Entity e)
		boolean isNew = true
		for de in segments
			if de == e
				isNew = false
				break
		if isNew
			segments.add(e)
		else
			segments.remove(e)
	
	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var t = GetSpellTargetUnit()
		var data = GetSpellAbilityUnit().getUserData() castTo CongaLineHead
		switch id
			case ADD_ID
				data.addSegment(t.getUserData() castTo Entity)
			case INC_ID
				if data.segLength < 500.
					data.segLength += 25
					createTTExForPlayer(data.pos, vec2(0,0.05), "Segment Length: "+ R2SW(data.segLength,1,2), 10,  2., colorRGBA(255,255,255,0), data.owner  )
				else
					createTTExForPlayer(data.pos, vec2(0,0.05), "Maximum Speed", 10,  2., colorRGBA(255,255,255,0), data.owner  )
			case DEC_ID
				if data.segLength > 25
					data.segLength -= 25
					createTTExForPlayer(data.pos, vec2(0,0.05), "Segment Length: "+ R2SW(data.segLength,1,2), 10,  2., colorRGBA(255,255,255,0), data.owner  )
				else
					createTTExForPlayer(data.pos, vec2(0,0.05), "Minimum Speed", 10,  2., colorRGBA(255,255,255,0), data.owner  )
			
				
		return false
		
function Entity.setNewPos( vec2 pos)
	if this instanceof DynamicSetupObject
		(this castTo DynamicSetupObject).setNewPos(pos.toVec3())
		(this castTo DynamicSetupObject).setAngle(angleBetweenCoordsD(this.pos.x, this.pos.y, pos.x, pos.y))
	else if this instanceof Spinner
		(this castTo Spinner).setNewPos(pos.toVec3())
		(this castTo Spinner).actor.setFacing(angleBetweenCoordsD(this.pos.x, this.pos.y, pos.x, pos.y))
		
function calculateSegmentPos(vec2 pos1, vec2 pos2, real segLength) returns vec2
	let angle = angleBetweenCoordsR(pos2.x, pos2.y, pos1.x, pos1.y)
	return vec2(pos1.x - Cos(angle) * segLength,
				pos1.y - Sin(angle) * segLength)
				
