package Teleporter
import BaseObject
import PlayerData
import _Circles

constant EFFECT_STRING   = "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl"
constant ESC_ID = 'A009'
constant KILL_ID = 'A012'
constant BOTH_ID = 'A014'

constant EVENT_RADIUS	= 38.

enum TeleportMode
	ESCAPER
	KILLER
	BOTH

public class Teleporter extends StaticBaseObject
	boolean teleportWisps = false
	TeleportMode mode = TeleportMode.ESCAPER
	
	construct( vec2 pos, player owner )
		super( pos, getUnit(owner, teleporter, pos, angle(0), this), EVENT_RADIUS, function Teleporter.teleport, CODE_NULL ) 
		actor.addAbility(PAUSE_ABIL)

	construct(unit existing)
		super(existing.getPos(), existing, EVENT_RADIUS, function Teleporter.teleport, CODE_NULL )
		actor.addAbility(PAUSE_ABIL)
		
	static function teleport()
		unit source = GetTriggeringTrigger().getSource()
		unit u = GetTriggerUnit()
		Entity e = u.getEntity()
		Teleporter obj = source.getUserData() castTo Teleporter
		let rallyPos = obj.getRallyPoint()
		let rdata = getRegionData(rallyPos)
		SetupObject dyn
		switch obj.mode
			case TeleportMode.ESCAPER
				if e instanceof Escaper
					e.setPos(rallyPos)
					addEffect(EFFECT_STRING, obj.pos).destr()
					addEffect(EFFECT_STRING, rallyPos).destr()
					if not pData[GetOwningPlayer(u).getId()].escaper.camlock
						PanCameraToTimedForPlayer( GetOwningPlayer(u), rallyPos.x, rallyPos.y, 0.03 )
			case TeleportMode.KILLER
				if e instanceof SetupObject and rdata.canBuild(obj.owner)
					dyn = e castTo SetupObject
					dyn.setPos(rallyPos)
					addEffect(EFFECT_STRING, obj.pos).destr()
					addEffect(EFFECT_STRING, rallyPos).destr()
			case TeleportMode.BOTH
				if e instanceof SetupObject and rdata.canBuild(obj.owner)
					dyn = e castTo SetupObject
					dyn.setPos(rallyPos)
					addEffect(EFFECT_STRING, obj.pos).destr()
					addEffect(EFFECT_STRING, rallyPos).destr()
				else if e instanceof Escaper
					u.setPos(rallyPos.x, rallyPos.y)
					addEffect(EFFECT_STRING, obj.pos).destr()
					addEffect(EFFECT_STRING, rallyPos).destr()
					if not pData[GetOwningPlayer(u).getId()].escaper.camlock
						PanCameraToTimedForPlayer(GetOwningPlayer(u), rallyPos.x, rallyPos.y, 0.03)
		if e instanceof Escaper and isEscaper(e.owner) and obj.owner == STAFF_PLAYER and not obj.actor.hasAbility(REMOVE_ID) 
			obj.terminate()

	override function onCast()
		super.onCast()
		var id = GetSpellAbilityId()
		switch id
			case BOTH_ID
				actor..removeAbility(BOTH_ID)..addAbility(ESC_ID)
				mode = TeleportMode.ESCAPER
			case ESC_ID
				actor..removeAbility(ESC_ID)..addAbility(KILL_ID)
				mode = TeleportMode.KILLER
			case KILL_ID
				actor..removeAbility(KILL_ID)..addAbility(BOTH_ID)
				mode = TeleportMode.BOTH

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property("t", TELEPORTER_INDEX.toString()))
		return json
