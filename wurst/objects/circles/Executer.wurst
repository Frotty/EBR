package Executer
import TerrainModder
import BaseObject
import ErrorHandling
import Escaper
import EscaperKillers
import Door
import BuilderConstants
import Pointer
import Knockbacker
import Unitcreator

constant int 	EXECUTER_ID   = 'n01D'
constant string EFFECT_STRING   = "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBase.mdl"
constant int 	LEVER_DUMMY_ID = 'DTlv'
constant int 	PLATE_DUMMY_ID = 'B001'


constant real 	EVENT_RADIUS	= 32.

public enum Emode
	NONE
	REPEATING
	ONESHOT
	LEVER
	PRESSUREPLATE

public enum Amode
	NONE
	OPENDOOR
	CLOSEDOOR
	TOGGLEDOOR
	CREATEUNIT
	MOVEUNIT
	CHANGETERRAIN
	TOGGLEUNITPRODUCER

	
enum ActionUnit
	NONE
	TANK
	GLAIVE
	SMALLKILLER
	BIGKILLER
	SMALLRANDOMKILLER
	BIGRANDOMKILLER
	POINTER
	KNOCKER

public class Executer extends StaticBaseObject
	boolean canKillerTrigger = false
	boolean canEscaperTrigger = true
	rect eventRect // only for pressureplate
	region eventRegion
	Emode eventMode = Emode.NONE
	Amode actionMode = Amode.NONE
	boolean ON = false// only for lever and pressureplate
	//effect oneffect // when lever and pressurplate is active
	int tiletype //Terrain Change tile type
	int nottiletype = '0001' // The basic is Unwalkable
	int verticalTileSize = 0 
	int horizontalTileSize = 0
	unit unitToMove // for unitMover
	ActionUnit actionUnit // only for UnitCreator Executer 
	string moveOrderString // only for unitMover
	boolean disabled = false // only for oneshot, so you can re-activate
	destructable dummy // model for pressure plate, and lever
	
	construct( vec2 pos, player owner)
		super( pos, CreateUnit(owner, EXECUTER_ID, pos.x, pos.y, 0), EVENT_RADIUS, function Executer.onEvent, CODE_NULL )
		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		
	static function onEvent()
		unit source = GetTriggeringTrigger().getSource()
		unit u = GetTriggerUnit()
		Entity e = u.getEntity()
		thistype obj = source.getUserData() castTo thistype
		
		if obj.canTrigger(e)
			switch obj.eventMode
				case Emode.NONE
					DisplayTextToPlayer( obj.owner, 0, 0, "|cffC51019Please select an Event Mode for the Executer")
				case Emode.REPEATING
					obj.findAction()
				case Emode.ONESHOT
					if not obj.disabled
						obj.findAction()
						obj.disable()
				case Emode.LEVER
					if obj.ON
						obj.negativeAction()
						obj.ON = false
						SetDestructableAnimation(obj.dummy, "death")
					else
						obj.findAction()
						obj.ON = true
						SetDestructableAnimation(obj.dummy, "stand")
						//obj.oneffect = AddSpecialEffect(EFFECT_STRING, obj.actor.getX(), obj.actor.getY())
				case Emode.PRESSUREPLATE
					skip

	static function onLeaveEvent()
		region r = GetTriggeringRegion()
		Entity leaver = GetLeavingUnit().getEntity()
		thistype obj = r.loadRegionData() castTo thistype
		if obj.canTrigger(leaver)
			GroupEnumUnitsInRect(ENUM_GROUP, obj.eventRect, null)
			int c = 0
			for unit u in ENUM_GROUP
				Entity e = u.getEntity()
				if obj.canTrigger(e)
					c++
			ENUM_GROUP.clear()
			if c == 0
				obj.negativeAction()
				obj.ON = false
				SetDestructableAnimation(obj.dummy, "stand alternate")
			
	static function onEnterEvent()
		unit u = GetTriggerUnit()
		region r = GetTriggeringRegion()
		Entity e = u.getEntity()
		thistype obj = r.loadRegionData() castTo thistype
		if obj.canTrigger(e)
			if not obj.ON
				obj.findAction()
				obj.ON = true
				SetDestructableAnimation(obj.dummy, "death")
		

	function findAction()
		switch actionMode
			case Amode.NONE
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Please select an Action Mode for the Executer")
			case Amode.CLOSEDOOR
				Door closingdoor = getRallyUnit().getUserData() castTo Door
				if closingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					closingdoor.closeDoor()
			case Amode.TOGGLEDOOR
				Door togglingdoor = getRallyUnit().getUserData() castTo Door
				if togglingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					if togglingdoor.opened
						togglingdoor.closeDoor()
					else
						togglingdoor.openDoor()
			case Amode.OPENDOOR
				Door openingdoor = getRallyUnit().getUserData() castTo Door
				if openingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					openingdoor.openDoor()
			case Amode.CHANGETERRAIN
				changeTerrain(true)
			case Amode.MOVEUNIT
				moveUnit()
			case Amode.CREATEUNIT
				createUnit()
			case Amode.TOGGLEUNITPRODUCER
				toggleUnitProducer()
			default
				printTimedToPlayer("Executer has no action set", 15, owner)
					
	function negativeAction()		
		switch actionMode
			case Amode.CLOSEDOOR
				Door closingdoor = getRallyUnit().getUserData() castTo Door
				if closingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					closingdoor.openDoor()
			case Amode.TOGGLEDOOR
				Door togglingdoor = getRallyUnit().getUserData() castTo Door
				if togglingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					if togglingdoor.opened
						togglingdoor.closeDoor()
					else
						togglingdoor.openDoor()
			case Amode.OPENDOOR
				Door openingdoor = getRallyUnit().getUserData() castTo Door
				if openingdoor == null
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
				else
					openingdoor.closeDoor()
			case Amode.CHANGETERRAIN
				changeTerrain(false)
			default
				printTimedToPlayer("Executer has no action set", 15, owner)
	
	function moveUnit()
		let rallyPos = getRallyPoint()
		if moveOrderString == "stop"
			IssueImmediateOrder(unitToMove, moveOrderString)
		else
			IssuePointOrder(unitToMove, moveOrderString, rallyPos.x, rallyPos.y)
	
	function toggleUnitProducer()
		let ru = getRallyUnit()
		if ru != null
			let data = ru.getEntity()
			if data instanceof UnitCreator
				let uc = data castTo UnitCreator
				uc.active = not uc.active
				return
		printLog(owner, Loglevel.WARNING, "Executer: No UnitCreator selected")
			
	function createUnit()
		let rallyPos = getRallyPoint().toVec2()
		var data = getRegionData(rallyPos)
		if data.canBuild(owner)
			switch actionUnit
				case ActionUnit.SMALLKILLER
					new SmallKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.BIGKILLER
					new BigKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.SMALLRANDOMKILLER
					new SmallRandomKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.BIGRANDOMKILLER
					new BigRandomKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.TANK
					new TankKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.GLAIVE
					new GlaiveKiller(rallyPos,owner, getRallyAngle())
				case ActionUnit.POINTER
					new Pointer(vec2(rallyPos.x,rallyPos.y), owner, getRallyAngle())
				case ActionUnit.KNOCKER
					new Knockbacker(vec2(rallyPos.x,rallyPos.y), owner, getRallyAngle())
				default
					error("Unitcreator - Wrong Unittype")
		else
			DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to place units in this region!")
		
	function changeTerrain(boolean isAction)
		let rallyPos = getRallyPoint()
		int tileID
		let data = getRegionData(rallyPos)
		if isAction
			tileID = tiletype
		else
			tileID = nottiletype
		if tileID == '0000'
			tileID = data.getTypeSet().walkableId
		else if tileID== '0001'
			tileID = data.getTypeSet().unwalkableId
		rallyPos.toVec2().changeRect(tileID, horizontalTileSize, verticalTileSize, owner)
	
	function addActionAbilsNormal()
		UnitAddAbility(actor,DOOR_CLOSE_ABIL)
		UnitAddAbility(actor,DOOR_OPEN_ABIL)
		UnitAddAbility(actor,DOOR_TOGGLE_ABIL)
		UnitAddAbility(actor,TERRAIN_CHANGE_ABIL)
		UnitAddAbility(actor,MOVE_UNIT_DIRECT_ABIL)
		UnitAddAbility(actor,SPAWN_UNIT_ID)
		UnitAddAbility(actor,START_UC_ID)
		
	function addActionAbilsReversable()
		UnitAddAbility(actor,DOOR_CLOSE_ABIL)
		UnitAddAbility(actor,DOOR_OPEN_ABIL)
		UnitAddAbility(actor,DOOR_TOGGLE_ABIL)
		UnitAddAbility(actor,TERRAIN_CHANGE_ABIL)
	
	function removeModeAbils()
		UnitRemoveAbility(actor, ONESHOT_ABIL)
		UnitRemoveAbility(actor, REPEATING_ABIL)
		UnitRemoveAbility(actor, LEVER_ABIL)
		UnitRemoveAbility(actor, PRESSURE_ABIL)
		
	function removeActionAbils()
		UnitRemoveAbility(actor,DOOR_CLOSE_ABIL)
		UnitRemoveAbility(actor,DOOR_OPEN_ABIL)
		UnitRemoveAbility(actor,DOOR_TOGGLE_ABIL)
		UnitRemoveAbility(actor,TERRAIN_CHANGE_ABIL)
		UnitRemoveAbility(actor,MOVE_UNIT_DIRECT_ABIL)
		UnitRemoveAbility(actor,SPAWN_UNIT_ID)
		UnitRemoveAbility(actor,START_UC_ID)
		
	function addTerrainAdjuster()
		UnitAddAbility(actor, TERRAIN_INCREASE_V_ABIL)
		UnitAddAbility(actor, TERRAIN_INCREASE_H_ABIL)
		UnitAddAbility(actor, TERRAIN_DECREASE_V_ABIL)
		UnitAddAbility(actor, TERRAIN_DECREASE_H_ABIL)
		UnitAddAbility(actor, TERRAIN_BOOK_ABIL)
		if eventMode == Emode.LEVER or eventMode == Emode.PRESSUREPLATE
			UnitAddAbility(actor, TERRAIN_ANTIBOOK_ABIL)
		
	function addMoveUnitAdjuster()
		UnitAddAbility(actor, MOVE_UNIT_STOP_ABIL)
		UnitAddAbility(actor, MOVE_UNIT_DIRECT_ABIL)
		UnitAddAbility(actor, MOVE_UNIT_PATROL_ABIL)
		UnitAddAbility(actor, MOVE_UNIT_SELECT_ABIL)
			
	function changeVis(boolean invis)
		if eventMode == Emode.PRESSUREPLATE
			if invis
				RemoveDestructable(dummy)
				printLog(Loglevel.DEBUG, "meh meh destructable removed")
			else
				dummy = CreateDestructable( LEVER_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
				SetDestructableAnimation(dummy, "death")
		else if eventMode == Emode.LEVER
			if invis
				RemoveDestructable(dummy)
			else
				dummy = CreateDestructable( PLATE_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
				SetDestructableAnimation(dummy, "stand alternate")
	
	function registerRect(real centerx, real centery, real offset)
		//note: with movable circles, itll be necessarallyPos.y to move the rect too.
		inRangeTrig.clearConditions()
		TriggerClearActions(inRangeTrig)
		DestroyTrigger(inRangeTrig)
		
		eventRegion = CreateRegion()
		eventRect = Rect(centerx-offset, centery-offset, centerx+offset, centery+offset)
		RegionAddRect(eventRegion,eventRect)
		eventRegion.setRegionData(this castTo int)
		TriggerRegisterLeaveRegion(executerUnitLeave,eventRegion, null)
		executerUnitLeave.addAction(function onLeaveEvent)
		
		TriggerRegisterEnterRegion(executerUnitEnter,eventRegion, null)
		executerUnitEnter.addAction(function onEnterEvent)
	
	function disable()
		SetUnitVertexColor(actor, 44,44,44,255)
		disabled = true
		UnitAddAbility(actor, REACTIVATE_ABIL)
		createTTEx(pos, vec2(0,0.05), "Deactivated", 10,  2., colorA(50,50,50,0), owner )
	
	ondestroy
		if eventRect != null
			RemoveRect(eventRect)
		if eventRegion != null
			eventRegion.removeRegionData()
			eventRegion.destr()
		if dummy != null
			RemoveDestructable(dummy)
	
	function canTrigger(Entity e) returns boolean
		if (canEscaperTrigger and e instanceof Escaper)
			return true
		if (canKillerTrigger and e instanceof EscaperSensorSetup)
			return true
		return false

	function onCast() returns boolean
		printLog(Loglevel.DEBUG, "Executer casts")
		
		let id = GetSpellAbilityId()
		switch id
			case ONESHOT_ABIL
				eventMode = Emode.ONESHOT
				addActionAbilsNormal()
				removeModeAbils()
			case REPEATING_ABIL
				eventMode = Emode.REPEATING
				addActionAbilsNormal()
				removeModeAbils()
			case LEVER_ABIL
				eventMode = Emode.LEVER
				addActionAbilsReversable()
				removeModeAbils()
				dummy = CreateDestructable( LEVER_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
				SetDestructableAnimation(dummy, "death")
			case PRESSURE_ABIL
				eventMode = Emode.PRESSUREPLATE
				addActionAbilsReversable()
				removeModeAbils()
				registerRect(actor.getX(), actor.getY(), 50)
				dummy = CreateDestructable( PLATE_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
				SetDestructableAnimation(dummy, "stand alternate")
				
			case REACTIVATE_ABIL
				disabled = false
				SetUnitVertexColor(actor, 0,128,0,255)
				UnitRemoveAbility(actor, REACTIVATE_ABIL)
					
			case VIS_ID
				changeVis(true)
			case INVIS_ID
				changeVis(false)
			
			case KILLER_TRIGGER_ABIL
				canKillerTrigger = true
				canEscaperTrigger = true
				UnitRemoveAbility(actor, KILLER_TRIGGER_ABIL)
				UnitAddAbility(actor, BOTH_TRIGGER_ABIL)
			case ESCAPER_TRIGGER_ABIL
				canKillerTrigger = true
				canEscaperTrigger = false
				UnitRemoveAbility(actor, ESCAPER_TRIGGER_ABIL)
				UnitAddAbility(actor, KILLER_TRIGGER_ABIL)
			case BOTH_TRIGGER_ABIL
				canKillerTrigger = false
				canEscaperTrigger = true
				UnitRemoveAbility(actor, BOTH_TRIGGER_ABIL)
				UnitAddAbility(actor, ESCAPER_TRIGGER_ABIL)
			
			case DOOR_OPEN_ABIL
				actionMode = Amode.OPENDOOR
				removeActionAbils()
			case DOOR_CLOSE_ABIL
				actionMode = Amode.CLOSEDOOR
				removeActionAbils()
			case DOOR_TOGGLE_ABIL
				actionMode = Amode.TOGGLEDOOR
				removeActionAbils()
				
			case TERRAIN_CHANGE_ABIL
				actionMode = Amode.CHANGETERRAIN
				removeActionAbils()
				addTerrainAdjuster()
				tiletype = '0000'
				nottiletype = '0001'
			case TERRAIN_WALKABLE_ABIL
				tiletype = '0000'
			case TERRAIN_W_O_ABIL
				nottiletype = '0000'
			case TERRAIN_UNWALKABLE_ABIL
				tiletype = '0001'
			case TERRAIN_UW_O_ABIL
				nottiletype = '0001'
			case TERRAIN_ICE_ABIL
				tiletype = CONTROLLABLEICE
			case TERRAIN_I_O_ABIL
				nottiletype = CONTROLLABLEICE
			case TERRAIN_UNICE_ABIL
				tiletype = UNCONTROLLABLEICE
			case TERRAIN_UI_O_ABIL
				nottiletype = UNCONTROLLABLEICE
			case SPAWN_UNIT_ID
				actionMode = Amode.CREATEUNIT
				actionUnit = ActionUnit.TANK
				removeActionAbils()
				UnitAddAbility(actor,TRAIN_BOOK_ABIL)
			case START_UC_ID
				actionMode = Amode.TOGGLEUNITPRODUCER
				removeActionAbils()
			case TRAIN_BK_ABIL
					actionUnit = ActionUnit.BIGKILLER
			case TRAIN_SK_ABIL
				actionUnit = ActionUnit.SMALLKILLER
			case TRAIN_BRK_ABIL
				actionUnit = ActionUnit.BIGRANDOMKILLER
			case TRAIN_SRK_ABIL
				actionUnit = ActionUnit.SMALLRANDOMKILLER
			case TRAIN_TANK_ABIL
				actionUnit = ActionUnit.TANK
			case TRAIN_GLAIVE_ABIL
				actionUnit = ActionUnit.GLAIVE
			case TRAIN_POINTER_ABIL
				actionUnit = ActionUnit.POINTER
			case TRAIN_KNOCK_ABIL
				actionUnit = ActionUnit.KNOCKER
				
			case MOVE_UNIT_DIRECT_ABIL
				moveOrderString = "move"
				if actionMode == Amode.NONE
					actionMode = Amode.MOVEUNIT
					removeActionAbils()
					addMoveUnitAdjuster()
			case MOVE_UNIT_PATROL_ABIL
				moveOrderString = "patrol"
			case MOVE_UNIT_STOP_ABIL
				moveOrderString = "stop"
			case MOVE_UNIT_SELECT_ABIL
				printLog(Loglevel.DEBUG, GetUnitTypeId(GetSpellTargetUnit()).toString())
				unitToMove = GetSpellTargetUnit()
			
			case TERRAIN_INCREASE_H_ABIL
				if not horizontalTileSize > 3
					horizontalTileSize ++
			case TERRAIN_INCREASE_V_ABIL
				if not verticalTileSize > 3
					verticalTileSize ++
			case TERRAIN_DECREASE_H_ABIL
				if not horizontalTileSize < 1
					horizontalTileSize --
			case TERRAIN_DECREASE_V_ABIL
				if not verticalTileSize < 1
					verticalTileSize --
		return false



//ABILITY ID-s
constant int ONESHOT_ABIL = 'A068'
constant int REPEATING_ABIL = 'A069'
constant int LEVER_ABIL = 'A067'
constant int PRESSURE_ABIL = 'A066'

constant int REACTIVATE_ABIL = 'A06Z'

constant int KILLER_TRIGGER_ABIL = 'A012'
constant int ESCAPER_TRIGGER_ABIL = 'A009'
constant int BOTH_TRIGGER_ABIL = 'A014'

constant int TERRAIN_CHANGE_ABIL = 'A036'
constant int TERRAIN_WALKABLE_ABIL = 'A015'
constant int TERRAIN_UNWALKABLE_ABIL = 'A016'
constant int TERRAIN_ICE_ABIL = 'A019'
constant int TERRAIN_UNICE_ABIL = 'A01A'
constant int TERRAIN_W_O_ABIL = 'A03A'
constant int TERRAIN_UW_O_ABIL = 'A039'
constant int TERRAIN_I_O_ABIL = 'A038'
constant int TERRAIN_UI_O_ABIL = 'A037'
constant int TERRAIN_INCREASE_H_ABIL = 'A01K'
constant int TERRAIN_INCREASE_V_ABIL = 'A01M'
constant int TERRAIN_DECREASE_H_ABIL = 'A01U'
constant int TERRAIN_DECREASE_V_ABIL = 'A01T'
constant int TERRAIN_BOOK_ABIL = 'A035'
constant int TERRAIN_ANTIBOOK_ABIL = 'A06B'

constant int DOOR_OPEN_ABIL = 'A018'
constant int DOOR_CLOSE_ABIL = 'A01N'
constant int DOOR_TOGGLE_ABIL = 'A01Q'

constant int MOVE_UNIT_DIRECT_ABIL = 'A04R'
constant int MOVE_UNIT_PATROL_ABIL = 'A064'
constant int MOVE_UNIT_STOP_ABIL = 'A065'
constant int MOVE_UNIT_SELECT_ABIL = 'A06A'

constant int VIS_ID = 'A04F'
constant int INVIS_ID = 'A005'

constant int TRAIN_BOOK_ABIL = 'A042'

constant int SPAWN_UNIT_ID = 'A06S'
constant int START_UC_ID = 'A07P'
constant int TRAIN_BK_ABIL = 'A045'
constant int TRAIN_SK_ABIL = 'A046'
constant int TRAIN_BRK_ABIL = 'A048'
constant int TRAIN_SRK_ABIL = 'A04B'
constant int TRAIN_TANK_ABIL = 'A04C'
constant int TRAIN_GLAIVE_ABIL = 'A04W'
constant int TRAIN_POINTER_ABIL = 'A04D'
constant int TRAIN_KNOCK_ABIL = 'A07R'

trigger executerUnitLeave = CreateTrigger()
trigger executerUnitEnter = CreateTrigger()
	
