package Teleporter
    import BaseObject
    import Terrain
    import Escaper
    import EscaperKiller
    import CustomSpellBook
    import RegionData
    
	constant int 	EXECUTER_ID   = 'n00C'
	constant string EFFECT_STRING   = "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl"
	
	constant real 	EVENT_RADIUS	= 32.

	enum Emode
		REPEATING
		ONESHOT
		LEVER
		PRESSUREPLATE
	
	enum Amode
		OPENDOOR
		CLOSEDOOR
		CREATEUNIT
		MOVEUNIT
		CHANGETERRAIN

	enum ActionTile //for change terrain action
		WALKABLE
		UNWALKABLE
		ICE
		UNICE
		
	enum ActionUnit
		SMALLKILLER
		BIGKILLER
		POINTER
		TANK
		GLAIVE

    class Executer extends StaticBaseObject
        boolean canKillerTrigger = false
        Emode eventMode
        Amode actionMode
        boolean ON // only for lever and pressureplate
        ActionTile actionTile
        int verticalTileSize
        int horizontalTileSize
        unit unitToMove // for unitMover
        ActionUnit actionUnit // only for UnitCreator Executer 
        
        static function onEvent()
            unit source = GetTriggeringTrigger().getSource()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            thistype obj = source.getUserData() castTo thistype
            
            if (not obj.canKillerTrigger and e instanceof Escaper) or (obj.canKillerTrigger and e instanceof EscaperKiller)
	        	switch obj.eventMode
	        		case Emode.REPEATING
	        			obj.findAction()
	        		case Emode.ONESHOT
	        			obj.findAction()
	        			destroy obj
	        		case Emode.LEVER
	        			if obj.ON
	                        obj.negativeAction()
	                    else
	                        obj.findAction()
	        		case Emode.PRESSUREPLATE
	        			if not obj.ON
	                        obj.findAction()
	                default
	                	print("Bug- ExecuterEvent")
        		
        function findAction()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            
            var rx = getRallyX()
            var ry = getRallyY()
            
            switch actionMode
            	case Amode.CLOSEDOOR
            		door.close
            	case Amode.OPENDOOR
            		door.open
            	case Amode.CHANGETERRAIN
            		changeTerrain()
            	case Amode.MOVEUNIT
            		moveUnit()
            	case Amode.CREATEUNIT
            		createUnit()
            	default
            		print("Bug - ExecuterAction")
	            		
		function negativeAction()
			skip
		
		function moveUnit()
			skip
			
		function createUnit()
			unit u
			
			var rX = getRallyX()
            var rY = getRallyY()
            var i = getRegionNumber(rX, rY)
            
			if regions[i].isOwner(GetPlayerId(owner))
				switch actionUnit
					case ActionUnit.SMALLKILLER
						u = CreateUnit(owner, regions[i].smallKillerId,rX, rY, 0.)
					case ActionUnit.BIGKILLER
						u = CreateUnit(owner, regions[i].bigKillerId,rX, rY, 0.)
					case ActionUnit.TANK
						u = CreateUnit(owner, TANKID,rX, rY, 0.)
					case ActionUnit.GLAIVE
						u = CreateUnit(owner, GLAIVEID,rX, rY, 0.)
					case ActionUnit.POINTER
						u = CreateUnit(owner, PONTERID,rX, rY, 0.)
					default
						print("Bug- ExecuterCreateUnit")
			
		function changeTerrain()
			unit u
			
			var rX = getRallyX()
            var rY = getRallyY()
            var i = getRegionNumber(rX, rY)
            
            if 
			
		static function onUpdateAbility(int ability_id)
			
        
        static function register()
            unit u = GetConstructedStructure()
            u.setUserData( new Executer( u.getX(), u.getY(), u) castTo int )

        
        construct( real x, real y, unit u)
        	super( vec3(x, y, getTerrainZ(x,y)), u, EVENT_RADIUS, function Executer.onEvent ) 

        
        static function filter() returns boolean
            return GetUnitTypeId( GetFilterUnit() ) == EXECUTER_ID
        
    
    
    public function init_Executer( trigger t )
        //t.registerAnyUnitEvent( Condition( function Teleporter.filter  ) )
        t.addAction( function Executer.register )


endpackage