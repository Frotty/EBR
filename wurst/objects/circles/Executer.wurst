package Executer
	import Colors
	import BaseObject
	import Terrain
	import Rect
	import Escaper
	import EscaperKiller
	import CustomSpellBook
	import RegionData
	import Door
	import BuilderConstants
	import EventHandling
	import TempGroups
	import Texttag
	import Pointer
	
	constant int 	EXECUTER_ID   = 'n01D'
	constant string EFFECT_STRING   = "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBase.mdl"
	constant int 	LEVER_DUMMY_ID = 'DTlv'
	constant int 	PLATE_DUMMY_ID = 'B001'
	
	
	constant real 	EVENT_RADIUS	= 32.

	public enum Emode
		NONE
		REPEATING
		ONESHOT
		LEVER
		PRESSUREPLATE
	
	public enum Amode
		NONE
		OPENDOOR
		CLOSEDOOR
		TOGGLEDOOR
		CREATEUNIT
		MOVEUNIT
		CHANGETERRAIN

		
	enum ActionUnit
		NONE
		TANK
		GLAIVE
		SMALLKILLER
		BIGKILLER
		SMALLRANDOMKILLER
		BIGRANDOMKILLER
		POINTER

	public class Executer extends StaticBaseObject
		boolean canKillerTrigger = false
		boolean canEscaperTrigger = true
		rect eventRect // only for pressureplate
		region eventRegion
		Emode eventMode
		Amode actionMode
		boolean ON = false// only for lever and pressureplate
		//effect oneffect // when lever and pressurplate is active
		int tiletype //Terrain Change tile type
		int nottiletype = '0001' // The basic is Unwalkable
		int verticalTileSize = 0 
		int horizontalTileSize = 0
		unit unitToMove // for unitMover
		ActionUnit actionUnit // only for UnitCreator Executer 
		string moveOrderString // only for unitMover
		boolean disabled = false // only for oneshot, so you can re-activate
		destructable dummy // model for pressure plate, and lever
		
		construct( vec2 pos, player owner)
			super( pos, CreateUnit(owner, EXECUTER_ID, pos.x, pos.y, 0), EVENT_RADIUS, function Executer.onEvent )
			actor.registerCastEvent(Condition(function Executer.onCast))
			
		static function onEvent()
			unit source = GetTriggeringTrigger().getSource()
			unit u = GetTriggerUnit()
			Entity e = u.getUserData() castTo Entity
			thistype obj = source.getUserData() castTo thistype
			
			if obj.canTrigger(e)
				switch obj.eventMode
					case Emode.NONE
						DisplayTextToPlayer( obj.owner, 0, 0, "|cffC51019Please select an Event Mode for the Executer")
					case Emode.REPEATING
						obj.findAction()
					case Emode.ONESHOT
						if not obj.disabled
							obj.findAction()
							obj.disable()
					case Emode.LEVER
						if obj.ON
							obj.negativeAction()
							obj.ON = false
							SetDestructableAnimation(obj.dummy, "death")
						else
							obj.findAction()
							obj.ON = true
							SetDestructableAnimation(obj.dummy, "stand")
							//obj.oneffect = AddSpecialEffect(EFFECT_STRING, obj.actor.getX(), obj.actor.getY())
					case Emode.PRESSUREPLATE
						skip
		
		static function onLeaveEvent()
			debugPrint("on Leave Event fired", 3)
			region r = GetTriggeringRegion()
			Entity leaver = GetLeavingUnit().getUserData() castTo Entity
			thistype obj = r.loadRegionData() castTo thistype
			if obj.canTrigger(leaver)
				GroupEnumUnitsInRect(ENUM_GROUP, obj.eventRect, null)
				int c = 0
				for unit u in ENUM_GROUP
					Entity e = u.getUserData() castTo Entity
					if obj.canTrigger(e)
						c++
				ENUM_GROUP.clear()
				if c == 0
					obj.negativeAction()
					obj.ON = false
					SetDestructableAnimation(obj.dummy, "stand alternate")
				
		static function onEnterEvent()
			debugPrint("on Enter Event fired - 1", 3)
			unit u = GetTriggerUnit()
			debugPrint("on Enter Event fired - 2", 3)
			region r = GetTriggeringRegion()
			debugPrint("on Enter Event fired - 3", 3)
			Entity e = u.getUserData() castTo Entity
			debugPrint("on Enter Event fired - 4", 3)
			thistype obj = r.loadRegionData() castTo thistype
			debugPrint("on Enter Event fired - 5 - id: " + (obj castTo int).toString(), 3)
			if obj.canTrigger(e)
				debugPrint("on Enter Event fired - 6 - id: " + (obj castTo int).toString(), 3)
				if not obj.ON
					debugPrint("on Enter Event fired - 7", 3)
					obj.findAction()
					debugPrint("on Enter Event fired - 8", 3)
					obj.ON = true
					debugPrint("on Enter Event fired - 9", 3)
					SetDestructableAnimation(obj.dummy, "death")
					debugPrint("on Enter Event fired - 10", 3)
			

		function findAction()
			debugPrint("find action called", 3)
			unit u = GetTriggerUnit()
			Entity e = u.getUserData() castTo Entity
			
			var rx = getRallyX()
			var ry = getRallyY()
			
			switch actionMode
				case Amode.NONE
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Please select an Action Mode for the Executer")
				case Amode.CLOSEDOOR
					Door closingdoor = getRallyUnit().getUserData() castTo Door
					if closingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						closingdoor.closeDoor()
				case Amode.TOGGLEDOOR
					Door togglingdoor = getRallyUnit().getUserData() castTo Door
					if togglingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						if togglingdoor.opened
							togglingdoor.closeDoor()
						else
							togglingdoor.openDoor()
				case Amode.OPENDOOR
					Door openingdoor = getRallyUnit().getUserData() castTo Door
					if openingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						openingdoor.openDoor()
				case Amode.CHANGETERRAIN
					debugPrint("mode change Terrain", 3)
					changeTerrain(true)
				case Amode.MOVEUNIT
					moveUnit()
				case Amode.CREATEUNIT
					createUnit()
				default
					printError("ExecuterAction")
						
		function negativeAction()
			unit u = GetTriggerUnit()
			Entity e = u.getUserData() castTo Entity
			
			var rx = getRallyX()
			var ry = getRallyY()
			
			switch actionMode
				case Amode.CLOSEDOOR
					Door closingdoor = getRallyUnit().getUserData() castTo Door
					if closingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						closingdoor.openDoor()
				case Amode.TOGGLEDOOR
					Door togglingdoor = getRallyUnit().getUserData() castTo Door
					if togglingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						if togglingdoor.opened
							togglingdoor.closeDoor()
						else
							togglingdoor.openDoor()
				case Amode.OPENDOOR
					Door openingdoor = getRallyUnit().getUserData() castTo Door
					if openingdoor == null
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019Must select a door with the Executer")
					else
						openingdoor.closeDoor()
				case Amode.CHANGETERRAIN
					changeTerrain(false)
				default
					printError("ExecuterNotAction")
		
		function moveUnit()
			var rX = getRallyX()
			var rY = getRallyY()
			if moveOrderString == "stop"
				IssueImmediateOrder(unitToMove, moveOrderString)
			else
				IssuePointOrder(unitToMove, moveOrderString, rX, rY)
		

				
		function createUnit()
			unit u
			var rX = getRallyX()
			var rY = getRallyY()
			var data = getRegionData(rX, rY)
			
			if data.isOwner(GetPlayerId(owner))
				switch actionUnit
					case ActionUnit.SMALLKILLER
						new EscaperKiller(CreateUnit(owner, data.smallKillerId, rX, rY, 0. ), CreateUnit(owner, data.smallKillerId, rX, rY, 0.), COLL_SIZE_SK)
					case ActionUnit.BIGKILLER
						new EscaperKiller(CreateUnit(owner, data.bigKillerId,rX, rY, 0. ), CreateUnit(owner, data.bigKillerId, rX, rY, 0.), COLL_SIZE_BK)
					case ActionUnit.SMALLRANDOMKILLER
						new EscaperKiller(CreateUnit(owner, 'u006', rX, rY, 0. ), CreateUnit(owner, 'u006', rX, rY, 0.), COLL_SIZE_SK)
					case ActionUnit.BIGRANDOMKILLER
						new EscaperKiller(CreateUnit(owner, 'u008',rX, rY, 0. ), CreateUnit(owner, 'u008', rX, rY, 0.), COLL_SIZE_BK)
					case ActionUnit.TANK
						new EscaperKiller(CreateUnit(owner, 'h001', rX, rY, 0. ), CreateUnit(owner, 'h001', rX, rY, 0.), COLL_SIZE_TANK)
					case ActionUnit.GLAIVE
						new EscaperKiller(CreateUnit(owner, 'u00A', rX, rY, 0. ), CreateUnit(owner, 'u00A', rX, rY, 0.), COLL_SIZE_GLAIVE)
					case ActionUnit.POINTER
						new Pointer(vec2(rX,rY), owner)
					default
						printError("Unitcreator - Wrong Unittype")
			else
				DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to place units in this region!")
			
		function changeTerrain(boolean isAction)
			debugPrint("called change Terrain", 3)		
			var rX = getRallyX()
			var rY = getRallyY()
			RegionData data
			int tileID
			if isAction
				tileID = tiletype
			else
				tileID = nottiletype
			debugPrint("called change Terrain - 1", 3)
			for int i = 0 to (verticalTileSize*2)
				for int j = 0 to (horizontalTileSize*2)
					var y = rY+ (128*(i-verticalTileSize))
					var x = rX+ (128*(j-horizontalTileSize))
					data = getRegionData(x,y)
					debugPrint("called change Terrain - 2", 3)
					if data.isOwner(GetPlayerId(owner))
						if tileID == '0000'
							tileID = data.walkableTile
						else if tileID== '0001'
							tileID = data.unwalkableTile
						SetTerrainType(x, y, tileID, -1, 1, 1 )
		
		function addActionAbilsNormal()
			UnitAddAbility(actor,DOOR_CLOSE_ABIL)
			UnitAddAbility(actor,DOOR_OPEN_ABIL)
			UnitAddAbility(actor,DOOR_TOGGLE_ABIL)
			UnitAddAbility(actor,TERRAIN_CHANGE_ABIL)
			UnitAddAbility(actor,MOVE_UNIT_DIRECT_ABIL)
			UnitAddAbility(actor,SPAWN_UNIT_ID)
			
		function addActionAbilsReversable()
			UnitAddAbility(actor,DOOR_CLOSE_ABIL)
			UnitAddAbility(actor,DOOR_OPEN_ABIL)
			UnitAddAbility(actor,DOOR_TOGGLE_ABIL)
			UnitAddAbility(actor,TERRAIN_CHANGE_ABIL)
		
		function removeModeAbils()
			UnitRemoveAbility(actor, ONESHOT_ABIL)
			UnitRemoveAbility(actor, REPEATING_ABIL)
			UnitRemoveAbility(actor, LEVER_ABIL)
			UnitRemoveAbility(actor, PRESSURE_ABIL)
			
		function removeActionAbils()
			UnitRemoveAbility(actor,DOOR_CLOSE_ABIL)
			UnitRemoveAbility(actor,DOOR_OPEN_ABIL)
			UnitRemoveAbility(actor,DOOR_TOGGLE_ABIL)
			UnitRemoveAbility(actor,TERRAIN_CHANGE_ABIL)
			UnitRemoveAbility(actor,MOVE_UNIT_DIRECT_ABIL)
			UnitRemoveAbility(actor,SPAWN_UNIT_ID)
			
		function addTerrainAdjuster()
			UnitAddAbility(actor, TERRAIN_INCREASE_V_ABIL)
			UnitAddAbility(actor, TERRAIN_INCREASE_H_ABIL)
			UnitAddAbility(actor, TERRAIN_DECREASE_V_ABIL)
			UnitAddAbility(actor, TERRAIN_DECREASE_H_ABIL)
			UnitAddAbility(actor, TERRAIN_BOOK_ABIL)
			if eventMode == Emode.LEVER or eventMode == Emode.PRESSUREPLATE
				UnitAddAbility(actor, TERRAIN_ANTIBOOK_ABIL)
			
		function addMoveUnitAdjuster()
			UnitAddAbility(actor, MOVE_UNIT_STOP_ABIL)
			UnitAddAbility(actor, MOVE_UNIT_DIRECT_ABIL)
			UnitAddAbility(actor, MOVE_UNIT_PATROL_ABIL)
			UnitAddAbility(actor, MOVE_UNIT_SELECT_ABIL)
				
		function changeVis(boolean invis)
			debugPrint("changing VIS",1)
			if eventMode == Emode.PRESSUREPLATE
				if invis
					RemoveDestructable(dummy)
					debugPrint("meh meh destructable removed", 1)
				else
					dummy = CreateDestructable( LEVER_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
					SetDestructableAnimation(dummy, "death")
			else if eventMode == Emode.LEVER
				if invis
					RemoveDestructable(dummy)
				else
					dummy = CreateDestructable( PLATE_DUMMY_ID, actor.getX(), actor.getY(), 0,1,0)
					SetDestructableAnimation(dummy, "stand alternate")
		
		function registerRect(real centerX, real centerY, real offset)
			//note: with movable circles, itll be necessary to move the rect too.
			debugPrint("rect registered", 3)
			inRangeTrig.clearConditions()
			TriggerClearActions(inRangeTrig)
			DestroyTrigger(inRangeTrig)
			
			eventRegion = CreateRegion()
			eventRect = Rect(centerX-offset, centerY-offset, centerX+offset, centerY+offset)
			RegionAddRect(eventRegion,eventRect)
			eventRegion.setRegionData(this castTo int)
			TriggerRegisterLeaveRegion(executerUnitLeave,eventRegion, null)
			executerUnitLeave.addAction(function onLeaveEvent)
			
			TriggerRegisterEnterRegion(executerUnitEnter,eventRegion, null)
			executerUnitEnter.addAction(function onEnterEvent)
		
		function disable()
			SetUnitVertexColor(actor, 44,44,44,255)
			disabled = true
			UnitAddAbility(actor, REACTIVATE_ABIL)
			createTTEx(pos, vec2(0,0.05), "Deactivated", 10,  2., colorA(50,50,50,0), owner )
		
		ondestroy
			actor.unregisterCastEvent()
			if eventRect != null
				RemoveRect(eventRect)
			if eventRegion != null
				eventRegion.removeRegionData()
				eventRegion.destr()
			if dummy != null
				RemoveDestructable(dummy)
		
		function canTrigger(Entity e) returns boolean
			debugPrint("can Trigger - 1", 3)
			if (canEscaperTrigger and e instanceof Escaper)
				debugPrint("can Trigger - 2", 3)
				return true
			if (canKillerTrigger and e instanceof EscaperKiller)
				return true
			debugPrint("can Trigger - 3", 3)
			return false

		static function onCast() returns boolean
			debugPrint("Executer casts", 1)
			unit source = GetSpellAbilityUnit()
			Executer obj = source.getUserData() castTo Executer
			
			int i = GetSpellAbilityId()
			switch i
				case ONESHOT_ABIL
					obj.eventMode = Emode.ONESHOT
					obj.addActionAbilsNormal()
					obj.removeModeAbils()
				case REPEATING_ABIL
					obj.eventMode = Emode.REPEATING
					obj.addActionAbilsNormal()
					obj.removeModeAbils()
				case LEVER_ABIL
					obj.eventMode = Emode.LEVER
					obj.addActionAbilsReversable()
					obj.removeModeAbils()
					obj.dummy = CreateDestructable( LEVER_DUMMY_ID, obj.actor.getX(), obj.actor.getY(), 0,1,0)
					SetDestructableAnimation(obj.dummy, "death")
				case PRESSURE_ABIL
					obj.eventMode = Emode.PRESSUREPLATE
					obj.addActionAbilsReversable()
					obj.removeModeAbils()
					obj.registerRect(obj.actor.getX(), obj.actor.getY(), 50)
					obj.dummy = CreateDestructable( PLATE_DUMMY_ID, obj.actor.getX(), obj.actor.getY(), 0,1,0)
					SetDestructableAnimation(obj.dummy, "stand alternate")
					
				case REACTIVATE_ABIL
					obj.disabled = false
					SetUnitVertexColor(obj.actor, 0,128,0,255)
					UnitRemoveAbility(obj.actor, REACTIVATE_ABIL)
						
				case VIS_ID
					obj.changeVis(true)
				case INVIS_ID
					obj.changeVis(false)
				
				case KILLER_TRIGGER_ABIL
					obj.canKillerTrigger = true
					obj.canEscaperTrigger = true
					UnitRemoveAbility(obj.actor, KILLER_TRIGGER_ABIL)
					UnitAddAbility(obj.actor, BOTH_TRIGGER_ABIL)
				case ESCAPER_TRIGGER_ABIL
					obj.canKillerTrigger = true
					obj.canEscaperTrigger = false
					UnitRemoveAbility(obj.actor, ESCAPER_TRIGGER_ABIL)
					UnitAddAbility(obj.actor, KILLER_TRIGGER_ABIL)
				case BOTH_TRIGGER_ABIL
					obj.canKillerTrigger = false
					obj.canEscaperTrigger = true
					UnitRemoveAbility(obj.actor, BOTH_TRIGGER_ABIL)
					UnitAddAbility(obj.actor, ESCAPER_TRIGGER_ABIL)
				
				case DOOR_OPEN_ABIL
					obj.actionMode = Amode.OPENDOOR
					obj.removeActionAbils()
				case DOOR_CLOSE_ABIL
					obj.actionMode = Amode.CLOSEDOOR
					obj.removeActionAbils()
				case DOOR_TOGGLE_ABIL
					obj.actionMode = Amode.TOGGLEDOOR
					obj.removeActionAbils()
					
				case TERRAIN_CHANGE_ABIL
					obj.actionMode = Amode.CHANGETERRAIN
					obj.removeActionAbils()
					obj.addTerrainAdjuster()
					obj.tiletype = '0000'
					obj.nottiletype = '0001'
				case TERRAIN_WALKABLE_ABIL
					obj.tiletype = '0000'
				case TERRAIN_W_O_ABIL
					obj.nottiletype = '0000'
				case TERRAIN_UNWALKABLE_ABIL
					obj.tiletype = '0001'
				case TERRAIN_UW_O_ABIL
					obj.nottiletype = '0001'
				case TERRAIN_ICE_ABIL
					obj.tiletype = CONTROLLABLEICE
				case TERRAIN_I_O_ABIL
					obj.nottiletype = CONTROLLABLEICE
				case TERRAIN_UNICE_ABIL
					obj.tiletype = UNCONTROLLABLEICE
				case TERRAIN_UI_O_ABIL
					obj.nottiletype = UNCONTROLLABLEICE
				case SPAWN_UNIT_ID
					obj.actionMode = Amode.CREATEUNIT
					obj.actionUnit = ActionUnit.TANK
					obj.removeActionAbils()
					UnitAddAbility(obj.actor,TRAIN_BOOK_ABIL)
				case TRAIN_BK_ABIL
						obj.actionUnit = ActionUnit.BIGKILLER
				case TRAIN_SK_ABIL
					obj.actionUnit = ActionUnit.SMALLKILLER
				case TRAIN_BRK_ABIL
					obj.actionUnit = ActionUnit.BIGRANDOMKILLER
				case TRAIN_SRK_ABIL
					obj.actionUnit = ActionUnit.SMALLRANDOMKILLER
				case TRAIN_TANK_ABIL
					obj.actionUnit = ActionUnit.TANK
				case TRAIN_GLAIVE_ABIL
					obj.actionUnit = ActionUnit.GLAIVE
				case TRAIN_POINTER_ABIL
					obj.actionUnit = ActionUnit.POINTER
					
				case MOVE_UNIT_DIRECT_ABIL
					obj.moveOrderString = "move"
					if obj.actionMode == Amode.NONE
						obj.actionMode = Amode.MOVEUNIT
						obj.removeActionAbils()
						obj.addMoveUnitAdjuster()
				case MOVE_UNIT_PATROL_ABIL
					obj.moveOrderString = "patrol"
				case MOVE_UNIT_STOP_ABIL
					obj.moveOrderString = "stop"
				case MOVE_UNIT_SELECT_ABIL
					debugPrint(GetUnitTypeId(GetSpellTargetUnit()).toString(), 1)
					obj.unitToMove = GetSpellTargetUnit()
				
				case TERRAIN_INCREASE_H_ABIL
					if not obj.horizontalTileSize > 3
						obj.horizontalTileSize ++
				case TERRAIN_INCREASE_V_ABIL
					if not obj.verticalTileSize > 3
						obj.verticalTileSize ++
				case TERRAIN_DECREASE_H_ABIL
					if not obj.horizontalTileSize < 1
						obj.horizontalTileSize --
				case TERRAIN_DECREASE_V_ABIL
					if not obj.verticalTileSize < 1
						obj.verticalTileSize --
			return false


	
	//ABILITY ID-s
	constant int ONESHOT_ABIL = 'A068'
	constant int REPEATING_ABIL = 'A069'
	constant int LEVER_ABIL = 'A067'
	constant int PRESSURE_ABIL = 'A066'
	
	constant int REACTIVATE_ABIL = 'A06Z'
	
	constant int KILLER_TRIGGER_ABIL = 'A012'
	constant int ESCAPER_TRIGGER_ABIL = 'A009'
	constant int BOTH_TRIGGER_ABIL = 'A014'
	
	constant int TERRAIN_CHANGE_ABIL = 'A036'
	constant int TERRAIN_WALKABLE_ABIL = 'A015'
	constant int TERRAIN_UNWALKABLE_ABIL = 'A016'
	constant int TERRAIN_ICE_ABIL = 'A019'
	constant int TERRAIN_UNICE_ABIL = 'A01A'
	constant int TERRAIN_W_O_ABIL = 'A03A'
	constant int TERRAIN_UW_O_ABIL = 'A039'
	constant int TERRAIN_I_O_ABIL = 'A038'
	constant int TERRAIN_UI_O_ABIL = 'A037'
	constant int TERRAIN_INCREASE_H_ABIL = 'A01K'
	constant int TERRAIN_INCREASE_V_ABIL = 'A01M'
	constant int TERRAIN_DECREASE_H_ABIL = 'A01U'
	constant int TERRAIN_DECREASE_V_ABIL = 'A01T'
	constant int TERRAIN_BOOK_ABIL = 'A035'
	constant int TERRAIN_ANTIBOOK_ABIL = 'A06B'
	
	constant int DOOR_OPEN_ABIL = 'A018'
	constant int DOOR_CLOSE_ABIL = 'A01N'
	constant int DOOR_TOGGLE_ABIL = 'A01Q'
	
	constant int MOVE_UNIT_DIRECT_ABIL = 'A04R'
	constant int MOVE_UNIT_PATROL_ABIL = 'A064'
	constant int MOVE_UNIT_STOP_ABIL = 'A065'
	constant int MOVE_UNIT_SELECT_ABIL = 'A06A'
	
	constant int VIS_ID = 'A04F'
	constant int INVIS_ID = 'A005'
	
	constant int TRAIN_BOOK_ABIL = 'A042'
	
	constant int SPAWN_UNIT_ID = 'A06S'
	constant int TRAIN_BK_ABIL = 'A045'
	constant int TRAIN_SK_ABIL = 'A046'
	constant int TRAIN_BRK_ABIL = 'A048'
	constant int TRAIN_SRK_ABIL = 'A04B'
	constant int TRAIN_TANK_ABIL = 'A04C'
	constant int TRAIN_GLAIVE_ABIL = 'A04W'
	constant int TRAIN_POINTER_ABIL = 'A04D'
	
	trigger executerUnitLeave = CreateTrigger()
	trigger executerUnitEnter = CreateTrigger()
	

endpackage