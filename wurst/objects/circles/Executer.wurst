package Executer
    import BaseObject
    import Terrain
    import Rect
    import GroupUtils
    import Escaper
    import EscaperKiller
    import CustomSpellBook
    import RegionData
    import Door
    
	constant int 	EXECUTER_ID   = 'n00C'
	constant string EFFECT_STRING   = "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl"
	
	constant real 	EVENT_RADIUS	= 32.

	enum Emode
		REPEATING
		ONESHOT
		LEVER
		PRESSUREPLATE
	
	enum Amode
		OPENDOOR
		CLOSEDOOR
		CREATEUNIT
		MOVEUNIT
		CHANGETERRAIN

		
	enum ActionUnit
		SMALLKILLER
		BIGKILLER
		POINTER
		TANK
		GLAIVE

    class Executer extends StaticBaseObject
        boolean canKillerTrigger = false
        rect eventRect // only for pressureplate
        Emode eventMode
        Amode actionMode
        boolean ON // only for lever and pressureplate
        int tiletype
        int nottiletype
        int verticalTileSize
        int horizontalTileSize
        unit unitToMove // for unitMover
        ActionUnit actionUnit // only for UnitCreator Executer 
        string moveOrderString // only for unitMover
        
        static function onEvent()
            unit source = GetTriggeringTrigger().getSource()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            thistype obj = source.getUserData() castTo thistype
            
            if (not obj.canKillerTrigger and e instanceof Escaper) or (obj.canKillerTrigger and e instanceof EscaperKiller)
	        	switch obj.eventMode
	        		case Emode.REPEATING
	        			obj.findAction()
	        		case Emode.ONESHOT
	        			obj.findAction()
	        			destroy obj
	        		case Emode.LEVER
	        			if obj.ON
	                        obj.negativeAction()
	                        obj.ON = false
	                    else
	                        obj.findAction()
	                        obj.ON = true
	        		case Emode.PRESSUREPLATE
	        			if not obj.ON
	                        obj.findAction()
	                        obj.ON = true
	                default
	                	print("Bug- ExecuterEvent")
        
        static function onLeaveEvent()
            unit u = GetTriggerUnit()
            region r = GetTriggeringRegion()
            Entity e = u.getUserData() castTo Entity
            thistype obj = r.loadRegionData() castTo thistype
    		GroupEnumUnitsInRect(ENUM_GROUP, obj.eventRect, null)
    		int c = 0
    		for unit eu from ENUM_GROUP
	            Entity ee = eu.getUserData() castTo Entity
	            if obj.canKillerTrigger and e instanceof EscaperKiller
	            	c++
	            else if not obj.canKillerTrigger and e instanceof Escaper
	                c++
            ENUM_GROUP.clear()
    		if c == 0
                obj.negativeAction()
                obj.ON = false
    		
       /* function isTriggering() returns boolean
            Entity e = GetEnumUnit().getUserData castTo Entity
            if canKillerTrigger and e instanceof EscaperKiller
            	return true
            else if not canKillerTrigger and e instanceof Escaper
                return true
			return false
        */
        function findAction()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            
            var rx = getRallyX()
            var ry = getRallyY()
            
            switch actionMode
            	case Amode.CLOSEDOOR
            		Door closingdoor = getRallyUnit().getUserData() castTo Door
            		closingdoor.closeDoor()
            	case Amode.OPENDOOR
            		Door openingdoor = getRallyUnit().getUserData() castTo Door
            		openingdoor.openDoor()
            	case Amode.CHANGETERRAIN
            		changeTerrain(true)
            	case Amode.MOVEUNIT
            		moveUnit()
            	case Amode.CREATEUNIT
            		createUnit()
            	default
            		print("Bug - ExecuterAction")
	            		
		function negativeAction()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            
            var rx = getRallyX()
            var ry = getRallyY()
            
            switch actionMode
            	case Amode.CLOSEDOOR
            		Door closingdoor = getRallyUnit().getUserData() castTo Door
            		closingdoor.openDoor()
            	case Amode.OPENDOOR
            		Door openingdoor = getRallyUnit().getUserData() castTo Door
            		openingdoor.closeDoor()
            	case Amode.CHANGETERRAIN
            		changeTerrain(false)
            	default
            		print("Bug - ExecuterNotAction")
		
		function moveUnit()
			
			var rX = getRallyX()
            var rY = getRallyY()
            if moveOrderString == "stop"
                IssueImmediateOrder(unitToMove, moveOrderString)
            else
            	IssuePointOrder(unitToMove, moveOrderString, rX, rY)
		

				
		function createUnit()
			unit u
			
			var rX = getRallyX()
            var rY = getRallyY()
            var data = getRegionData(rX, rY)
            
			if data.isOwner(GetPlayerId(owner))
				switch actionUnit
					case ActionUnit.SMALLKILLER
						u = CreateUnit(owner, data.smallKillerId,rX, rY, 0.)
					case ActionUnit.BIGKILLER
						u = CreateUnit(owner, data.bigKillerId,rX, rY, 0.)
					case ActionUnit.TANK
						u = CreateUnit(owner, TANKID,rX, rY, 0.)
					case ActionUnit.GLAIVE
						u = CreateUnit(owner, GLAIVEID,rX, rY, 0.)
					case ActionUnit.POINTER
						u = CreateUnit(owner, POINTERID,rX, rY, 0.)
					default
						print("Bug- ExecuterCreateUnit")
			
		function changeTerrain(boolean isAction)
		
			var rX = getRallyX()
            var rY = getRallyY()
            var data = getRegionData(rX, rY)
            int tileID
            
            if isAction
                tileID = tiletype
            else
                tileID = nottiletype
            
            for int i = 0 to (verticalTileSize*2)
                for int j = 0 to (horizontalTileSize*2)
            		if data.isOwner(GetPlayerId(owner))
                    	SetTerrainType( rX+ (128*(i-verticalTileSize)), rY+ (128*(i-horizontalTileSize)), tiletype, -1, 1, 1 )
		
		function addActionAbilsNormal(boolean isOneshot)
			UnitAddAbility(actor,DOOR_CLOSE_ABIL)
			UnitAddAbility(actor,DOOR_OPEN_ABIL)
			UnitAddAbility(actor,TERRAIN_WALKABLE_ABIL)
			UnitAddAbility(actor,TERRAIN_ICE_ABIL)
			UnitAddAbility(actor,TERRAIN_UNWALKABLE_ABIL)
			UnitAddAbility(actor,TERRAIN_UNICE_ABIL)
			UnitAddAbility(actor,MOVE_UNIT_DIRECT_ABIL)
			UnitRemoveAbility(actor, LEVER_ABIL)
			UnitRemoveAbility(actor, PRESSURE_ABIL)
			if isOneshot
				UnitRemoveAbility(actor, ONESHOT_ABIL)
			else
				UnitRemoveAbility(actor, REPEATING_ABIL)
				
			
		function addActionAbilsReversable()
			UnitAddAbility(actor,DOOR_CLOSE_ABIL)
			UnitAddAbility(actor,DOOR_OPEN_ABIL)
			UnitAddAbility(actor,TERRAIN_WALKABLE_ABIL)
			UnitAddAbility(actor,TERRAIN_ICE_ABIL)
			UnitAddAbility(actor,TERRAIN_UNWALKABLE_ABIL)
			UnitAddAbility(actor,TERRAIN_UNICE_ABIL)
			UnitRemoveAbility(actor, ONESHOT_ABIL)
			UnitRemoveAbility(actor, REPEATING_ABIL)
			UnitRemoveAbility(actor, LEVER_ABIL)
			UnitRemoveAbility(actor, PRESSURE_ABIL)
			
		function removeActionAbils()
			UnitRemoveAbility(actor,DOOR_CLOSE_ABIL)
			UnitRemoveAbility(actor,DOOR_OPEN_ABIL)
			UnitRemoveAbility(actor,TERRAIN_WALKABLE_ABIL)
			UnitRemoveAbility(actor,TERRAIN_ICE_ABIL)
			UnitRemoveAbility(actor,TERRAIN_UNWALKABLE_ABIL)
			UnitRemoveAbility(actor,TERRAIN_UNICE_ABIL)
			
		
		static function onUpdateAbility(int ability_id)
			unit source = GetSpellAbilityUnit()
            thistype obj = source.getUserData() castTo thistype
            
            int i = GetSpellAbilityId()
            switch i
            	case ONESHOT_ABIL
            		obj.eventMode = Emode.ONESHOT
            		obj.addActionAbilsNormal(true)
            	case REPEATING_ABIL
            		obj.eventMode = Emode.REPEATING
            		obj.addActionAbilsNormal(false)
            	case LEVER_ABIL
            		obj.eventMode = Emode.LEVER
            		obj.addActionAbilsReversable()
            	case PRESSURE_ABIL
            		obj.eventMode = Emode.PRESSUREPLATE
            		obj.addActionAbilsReversable()
            		obj.registerRect(obj.actor.getX(), obj.actor.getY(), 50)
            	case DOOR_OPEN_ABIL
            		obj.actionMode = Amode.OPENDOOR
            		obj.removeActionAbils()
				case DOOR_CLOSE_ABIL
            		obj.actionMode = Amode.CLOSEDOOR
            		obj.removeActionAbils()
            	case TERRAIN_WALKABLE_ABIL
            		obj.actionMode = Amode.CHANGETERRAIN
            		obj.removeActionAbils()
            		
        
        function registerRect(real centerX, real centerY, real offset)
            //note: with movable circles, itll be necessary to move the rect too.
        	region eventRegion = CreateRegion()
        	eventRect = Rect(centerX-offset, centerY-offset, centerX+offset, centerY+offset)
        	RegionAddRect(eventRegion,eventRect)
        	TriggerRegisterLeaveRegion(executerUnitLeave,eventRegion, null)
        	eventRegion.setRegionData(this castTo int)
        	executerUnitLeave.addAction(function onLeaveEvent)
        	
        
        static function register()
            unit u = GetConstructedStructure()
            u.setUserData( new Executer( u.getX(), u.getY(), u) castTo int )

        
        construct( real x, real y, unit u)
        	super( vec3(x, y, getTerrainZ(x,y)), u, EVENT_RADIUS, function Executer.onEvent ) 

        
        static function filter() returns boolean
            return GetUnitTypeId( GetFilterUnit() ) == EXECUTER_ID
	
	
    int TANKID
	int GLAIVEID
	int POINTERID
	
	//ABILITY ID-s
	int ONESHOT_ABIL
	int REPEATING_ABIL
	int LEVER_ABIL
	int PRESSURE_ABIL
	
	int TERRAIN_WALKABLE_ABIL
	int TERRAIN_UNWALKABLE_ABIL
	int TERRAIN_ICE_ABIL
	int TERRAIN_UNICE_ABIL
	int TERRAIN_INCREASE_H_ABIL
	int TERRAIN_INCREASE_V_ABIL
	int TERRAIN_DECREASE_H_ABIL
	int TERRAIN_DECREASE_V_ABIL
	
	int DOOR_OPEN_ABIL
	int DOOR_CLOSE_ABIL
	
	int MOVE_UNIT_DIRECT_ABIL
	int MOVE_UNIT_PATROL_ABIL
	int MOVE_UNIT_STOP_ABIL
	int MOVE_UNIT_SELECT_ABIL
	
	trigger executerUnitLeave = CreateTrigger()
    
    public function init_Executer( trigger t )
        //t.registerAnyUnitEvent( Condition( function Teleporter.filter  ) )
        t.addAction( function Executer.register )

endpackage