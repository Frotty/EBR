package Revivepoint
import SetupObject
import PlayerData
import Startmazes
import ClosureTimers
import SoundUtils

constant real EVENT_RADIUS = 90.
constant int REVIVEPOINT_ID = 'n000'
constant SoundDefinition rescueSound = new SoundDefinition("Sound\\Interface\\Rescue.wav", false)

public class RevivePoint extends StaticSetupObject
	boolean reached = false
	int startmaze = -1

	construct(unit existing)
		super(existing, getUnit(existing.getOwner(), REVIVEPOINT_ID, existing.getPos(), angle(0), this), EVENT_RADIUS, function RevivePoint.onReach ) 

	construct(vec3 pos, player owner)
		super(getUnit(owner, REVIVEPOINT_ID, pos.toVec2(), angle(0), this), getUnit(owner, REVIVEPOINT_ID, pos.toVec2(), angle(0), this), EVENT_RADIUS, function RevivePoint.onReach ) 

	function reach(Escaper reacher)
		if not reached
			reached = true
			actor.setColor(reacher.owner.getColor())
			currentRevivepoint = pos.toVec2()
			rescueSound.play()
			printTimed(reacher.owner.getNameColored() + " advanced to the next |cff086BB5Checkpoint", 15)
			reacher.onCPReach()
			this.setCurrentRegion()
			if this.getCurrentRegion().getPermission(STAFF_PLAYER) == Permission.OWNER
				// Is Startmaze
				if startmaze > -1
					if (startmazes[currentMaze] castTo int) > 0 and startmazes[currentMaze].isInit()
						startmazes[currentMaze].clearMaze()
						destroy startmazes[currentMaze]
						startmazes[currentMaze] = null
					currentMaze = startmaze
					if ((startmazes[currentMaze] castTo int) > 0 and not startmazes[currentMaze].isInit())
						doAfter(0.5, () -> startmazes[currentMaze].initMaze())
						svRev.reached = false
						svRev.actor.setColor(PLAYER_COLOR_LIGHT_GRAY)
			else
				svRev.reached = false
				svRev.actor.setColor(PLAYER_COLOR_LIGHT_GRAY)
			
			let getExp = currentRevivepoint.distanceTo(pos.toVec2()) > 512
			for pd from escaperPlayers.staticItr()
				if pd.escaper != null and pd.escaper.alive
					pd.escaper.setPos(pos)
					pd.escaper.stop()
					pd.escaper.actor.abortOrder()
					if not pd.escaper.camlock
						if GetLocalPlayer() == pd.p
							PanCameraToTimed(pos.x, pos.y, 0)

				if getExp
					pd.addXp(20, false)

			if getExp
				pData[owner.getId()].addXp(15, false)		



	static function onReach()
		let source = GetTriggeringTrigger().getSource()
		let target = GetTriggerUnit()
		if(isEscaper(target.getOwner()) and target.getEntity() instanceof Escaper)
			(source.getEntity() castTo RevivePoint).reach(target.getEntity() castTo Escaper)
				
	static function filter() returns boolean
		return GetUnitTypeId(GetFilterUnit()) == REVIVEPOINT_ID

	override function serialize() returns Json
		let json = super.serialize()
		json..addProperty(new Property(KEY_TYPE, REVIVE_INDEX.toString()))
		return json