package Waypoint
    import BaseObject
    import Terrain
    import Escaper
    import EscaperKiller
    import EventHandling
    import Texttag
    
	constant int 	WAYPOINT_ID   = 'n004'
	constant int INC_ID = 'A054'
	constant int DEC_ID = 'A055'
		
	constant real 	EVENT_RADIUS	= 32.

	class DelayData
		EscaperKiller kllr
		vec2 pos
		
		construct(EscaperKiller k, vec2 t)
			kllr = k
			pos = t

    public class Waypoint extends StaticBaseObject
        real delay = 0.
        
        construct( vec2 pos, player owner )
        	super( pos.toVec3(), CreateUnit(owner, WAYPOINT_ID, pos.x, pos.y, 0.), EVENT_RADIUS, function Waypoint.orderMove ) 
        	actor.registerCastEvent(Condition(function Waypoint.onCast))
        	
        static function orderMove()
            unit source = GetTriggeringTrigger().getSource()
            unit u = GetTriggerUnit()
            Entity e = u.getUserData() castTo Entity
            thistype obj = source.getUserData() castTo thistype
            var rx = obj.getRallyX()
            var ry = obj.getRallyY()
            if e instanceof EscaperKiller
                var kllr = e castTo EscaperKiller
                if obj.delay < .25
                	IssuePointOrder(u, "move", rx, ry )
                else
                    getTimer().start(obj.delay, function Waypoint.delayMove).setData(new DelayData(kllr, vec2(rx,ry))castTo int)
                    
        static function delayMove()
        	var t = GetExpiredTimer()
        	DelayData data = t.getData() castTo DelayData
        	IssuePointOrder(data.kllr.setup, "move", data.pos.x, data.pos.y )
        	destroy data
        	t.release()

		static function onCast() returns boolean
			var id = GetSpellAbilityId()
			var data = GetTriggerUnit().getUserData() castTo Waypoint
			switch id
				case INC_ID
					if data.delay < 5.
						data.delay += .5
						createTTExForPlayer(data.position, vec2(0,0.05), "Delay " + data.delay.toString(), 10,  2., colorRGBA(255,255,255,0), data.owner  )
					else
						createTTExForPlayer(data.position, vec2(0,0.05), "Maximum Delay", 10,  2., colorRGBA(255,255,255,0), data.owner  )
				case DEC_ID
					if data.delay >= .5
						data.delay -= .5
						createTTExForPlayer(data.position, vec2(0,0.05), "Delay " + data.delay.toString(), 10,  2., colorRGBA(255,255,255,0), data.owner  )
					else
						createTTExForPlayer(data.position, vec2(0,0.05), "Minimum Delay", 10,  2., colorRGBA(255,255,255,0), data.owner  )
			return false

endpackage