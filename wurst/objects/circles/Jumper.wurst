package Jumper
import Escaper
import BaseObject
import SoundUtils
import TerrainBlocker
import ClosureForGroups

constant string EFFECT_STRING = "Abilities\\Spells\\Human\\FlakCannons\\FlakTarget.mdl"

constant SPECIAL_ID = 'A07O'

SoundDefinition snd = new SoundDefinition("Units\\Human\\Priest\\PriestPissed3.wav", false)

enum JumpMode
	FORCED
	UNFORCED

function filter() returns boolean
	return GetFilterUnit().getTypeId() == jumper

public class Goo
	image img
	int x
	int y

	construct(image img, int x, int y)
		this.img = img
		this.x = x
		this.y = y

	ondestroy
		img.remove()

public class Jumper extends StaticBaseObject
	private Goo array[5] goos
	private int goocounter = 0
	JumpMode mode = JumpMode.FORCED
	ConfigValue jumpForce = new ConfigValue(12., 0.5, "Jump Force")

	construct(unit existing)
		super(existing.getPos(), existing, 40., function Jumper.inRange, CODE_NULL)
		actor.addAbility(turnOff)
	
	construct(vec2 pos, player owner)
		super(pos, getUnit(owner, jumper, pos, angle(0), this), 40., function Jumper.inRange, CODE_NULL)
		actor.addAbility(turnOff)
		forUnitsInRange(pos, 8, (unit u) -> begin
			if u != actor and u.getTypeId() == jumper
				snd.play()
				u.addAbility(SPECIAL_ID)
				this.terminate()
		end)

	static function inRange()
		var data = GetTriggerUnit().getEntity()
		var jdata = GetTriggeringTrigger().getSource().getUserData() castTo Jumper
		if data instanceof Escaper and getRegionData(jdata.getRallyPoint()).canBuild(jdata.owner)
			var edata = data castTo Escaper
			edata.actor.abortOrder()
			switch jdata.mode
				case JumpMode.FORCED
					edata.stop()
					edata.pos.z = 1
					edata.setTarget(jdata.getRallyPoint(), jdata.jumpForce.get())
				case JumpMode.UNFORCED
					edata.addVel(vec3(0,0, jdata.jumpForce.get()))
			edata.setXY(edata.pos.add(0,0,1.))
			addEffect(EFFECT_STRING, data.pos).destr()
					
				
	override function onCast()
		super.onCast()
		let id = GetSpellAbilityId()
		switch id
			case jumperModeForced
				actor..removeAbility(jumperModeForced)..addAbility(jumperModeUnforced)..setVertexColor(color(75,95,205))
				mode = JumpMode.UNFORCED
				clearQuestionmark()
			case jumperModeUnforced
				actor..removeAbility(jumperModeUnforced)..addAbility(jumperModeForced)..setVertexColor(color(50,50,255))
				mode = JumpMode.FORCED
			case jumperDecreaseForce
				jumpForce.decrement(this, 6)
			case jumperIncreaseForce
				jumpForce.increment(this, 30)
			case SPECIAL_ID
				if goocounter < 5
					let x = (GetSpellTargetX()/128).round()
					let y = (GetSpellTargetY()/128).round()
					let goo = createImage("textures\\blugoo.blp", vec2(x*128., y*128.), 128, 128)
					..show()
					goos[goocounter] = new Goo(goo, x, y)
					goocounter++
					tileModifierMap.saveInt(x,y,bitset(tileModifierMap.loadInt(x, y)).add(TileModifiers.BLUGOO castTo int).val )

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property(KEY_TYPE, JUMPER_INDEX.toString()))
		json.addProperty(new Property("f", (jumpForce.get() * 100.).toInt().toString()))
		return json

	override function deserialize(Json json)
		super.deserialize(json)
		jumpForce.setVal(json.getReal("f") / 100.)
				
	ondestroy
		for i = 0 to 4
			if goos[i] != null
				let x = goos[i].x
				let y = goos[i].y
				tileModifierMap.saveInt(x,y,bitset(tileModifierMap.loadInt(x, y)).remove(TileModifiers.BLUGOO castTo int).val)
				destroy goos[i]
				
