package Jumper
import Escaper
import BaseObject
import SoundUtils
import TerrainBlocker
import ClosureForGroups

constant int JUMPER_ID = 'n00B'
constant string EFFECT_STRING = "Abilities\\Spells\\Human\\FlakCannons\\FlakTarget.mdl"

constant int FORCED_ID = 'A070'
constant int UNFORCED_ID = 'A071'
constant int INCREASE_ID = 'A072'
constant int DECREASE_ID = 'A073'
constant SPECIAL_ID = 'A07O'

SoundDefinition snd = new SoundDefinition("Units\\Human\\Priest\\PriestPissed3.wav", false)

enum JumpMode
	FORCED
	UNFORCED

function filter() returns boolean
	return GetFilterUnit().getTypeId() == JUMPER_ID

public class Jumper extends StaticBaseObject
	private image array[5] goos
	private int goocounter = 0
	JumpMode mode = JumpMode.FORCED
	ConfigValue jumpForce = new ConfigValue(12., 0.5, "Jump Force")

	construct(unit existing)
		super(existing.getPos(), existing, 40., function Jumper.inRange, CODE_NULL)
		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
	
	construct(vec2 pos, player owner)
		super(pos, CreateUnit(owner, JUMPER_ID, pos.x, pos.y, 0. ), 40., function Jumper.inRange, CODE_NULL)
		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		forUnitsInRange(pos, 8, (unit u) -> begin
			if u != actor and u.getTypeId() == JUMPER_ID
				snd.play()
				u.addAbility(SPECIAL_ID)
				this.terminate()
		end)

	static function inRange()
		var data = GetTriggerUnit().getEntity()
		var jdata = GetTriggeringTrigger().getSource().getUserData() castTo Jumper
		if data instanceof Escaper and getRegionData(jdata.getRallyPoint()).canBuild(jdata.owner)
			var edata = data castTo Escaper
			edata.actor.abortOrder()
			switch jdata.mode
				case JumpMode.FORCED
					edata.stop()
					edata.pos.z = 1
					edata.setTarget(jdata.getRallyPoint(), jdata.jumpForce.get())
				case JumpMode.UNFORCED
					edata.addVel(vec3(0,0, jdata.jumpForce.get()))
			edata.setXY(edata.pos.add(0,0,1.))
			addEffect(EFFECT_STRING, data.pos).destr()
					
				
	function onCast()
		let id = GetSpellAbilityId()
		switch id
			case FORCED_ID
				actor..removeAbility(FORCED_ID)..addAbility(UNFORCED_ID)..setVertexColor(color(75,95,205))
				mode = JumpMode.UNFORCED
				clearQuestionmark()
			case UNFORCED_ID
				actor..removeAbility(UNFORCED_ID)..addAbility(FORCED_ID)..setVertexColor(color(50,50,255))
				mode = JumpMode.FORCED
			case DECREASE_ID
				jumpForce.decrement(this, 6)
			case INCREASE_ID
				jumpForce.increment(this, 30)
			case SPECIAL_ID
				if goocounter < 5
					let x = (GetSpellTargetX()/128).round()
					let y = (GetSpellTargetY()/128).round()
					let goo = createImage("textures\\blugoo.blp", vec2(x*128., y*128.), 128, 128)
					..show()
					goos[goocounter] = goo
					goocounter++
					tileModifierMap.saveInt(x,y,bitset(tileModifierMap.loadInt(x, y)).add(TileModifiers.BLUGOO castTo int).val )

	override function serialize() returns Json
		let json = super.serialize()
		json.addProperty(new Property("jforce", (jumpForce.get() * 100.).toInt().toString()))
		return json

	override function deserialize(Json json)
		super.deserialize(json)
		jumpForce.setVal(json.getReal("jforce") / 100.)
		print("loaded jumper: " + jumpForce.get().toString())
				
	ondestroy
		for i = 0 to 4
			if goos[i] != null
				goos[i].remove()
