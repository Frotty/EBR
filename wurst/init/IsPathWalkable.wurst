package IsPathWalkable

/*==================================================================================================*
*                                                                                             
*    System Description :      
*             
*       By Zwiebelchen (vJASS version), translated to Wurst.
*
*       This snippet uses the Bresenham algorithm of Pixelgraphics to check if the direct path
*       between two cells (as a straight line) is walkable or not. It does so by looping through
*       each cell between the two coordinates and checking their respective pathabilities.
*
*       Note: This snippet will ignore the collision of units, but will consider all doodad,
*       destructable or terrain pathing. If you want to consider unit collision as well,
*       simply swap out TerrainPathability for your desired resource and replace all
*       isTerrainWalkable calls in the script.                                        
*
*===================================================================================================*
*
*   Requirements :
*       Import TerrainUtils which uses :
*           1. isTerrainWalkable()                                          */
import TerrainUtils

/*
*       Import MapBounds which uses :
*           1. boundMin                                                     */
import MapBounds

/*
*==================================================================================================*
*
*   Configuration : 
*                                                                                                 */  
//determines if on any diagonal step an adjacent cell is checked for extra safety
//(since units can not pass between two diagonally blocked cells)
//Default : enabled (true)
constant DIAGONAL_SAFTY     = true

//determines the cell size for the Bresenham algorithm. As default pathing textures have a
//minimum cell size of 64, lowering this to 32 only makes sense if custom pathing textures are used.
//Default : 64
constant MIN_CELL_SIZE      = 64
/*================================================================================================*/





/*============================================Globals=============================================*/
constant CELL_CENTER_OFFSET = MIN_CELL_SIZE div 2
constant X_CONSTANT         = CELL_CENTER_OFFSET+boundMin.x
constant Y_CONSTANT         = CELL_CENTER_OFFSET+boundMin.y
/*================================================================================================*/





/*=============================================Tuples=============================================*/
/** Data type returned from isPathWalkable(), where (walkable) defines if destination point have no obstacle, (v) defines the last pathable X/Y*/
public tuple PathData(bool walkable, vec2 v)

tuple intVec(int x, int y)
/*================================================================================================*/


enum A
	B
	C
	D


/*================================================================================================*/
/** Check if linear path from (x1,y1) to (x2,y2) is pathable*/
public function isPathWalkable(real x1, real y1, real x2, real y2) returns PathData
    var startXY  = intVec((x1-boundMin.x).toInt() div MIN_CELL_SIZE, (y1-boundMin.y).toInt() div MIN_CELL_SIZE)
    var endXY    = intVec((x2-boundMin.x).toInt() div MIN_CELL_SIZE, (y2-boundMin.y).toInt() div MIN_CELL_SIZE)
    var dxy      = intVec(endXY.x - startXY.x, endXY.y - startXY.y)
    var lastXY   = vec2(x1, y1)

    //calculate abs value and signs
    var ad      = dxy
    var sd      = intVec(0, 0)
    var pd      = intVec(0, 0)

    if ad.x < 0
        ad.x = -ad.x
        sd.x = -1
    else if ad.x > 0
        sd.x = 1

    if ad.y < 0
        ad.y = -ad.y
        sd.y = -1
    else if ad.y > 0
        sd.y = 1

    int es
    int el

    if ad.x > ad.y
        pd.x = sd.x
        pd.y = 0
        es = ad.y
        el = ad.x
    else
        pd.x = 0
        pd.y = sd.y
        es = ad.x
        el = ad.y
    
    if not isTerrainWalkable(startXY.x*MIN_CELL_SIZE+X_CONSTANT, startXY.y*MIN_CELL_SIZE+Y_CONSTANT)
        return PathData(false, lastXY)

    var dd = sd
    var error = el div 2
    var x = 0.
    var y = 0.

    for int i = 1 to el-1
        error -= es

        if error < 0
            if DIAGONAL_SAFTY
                dxy.x = startXY.x+dd.x-pd.x
                dxy.y = startXY.y+dd.y-pd.y

                x = dxy.x*MIN_CELL_SIZE+X_CONSTANT
                y = dxy.y*MIN_CELL_SIZE+Y_CONSTANT

                if isTerrainWalkable(x, y)
                    lastXY = vec2(x, y)
                else
                    return PathData(false, lastXY)

            error += el
            startXY.x += dd.x
            startXY.y += dd.y
        else
            startXY.x += pd.x
            startXY.y += pd.y

        x = startXY.x*MIN_CELL_SIZE+X_CONSTANT
        y = startXY.y*MIN_CELL_SIZE+Y_CONSTANT

        if isTerrainWalkable(x, y)
            lastXY = vec2(x, y)
        else
            return PathData(false, lastXY)

    return PathData(true, lastXY)

public function isPathWalkable(vec2 v1, vec2 v2) returns PathData
    return isPathWalkable(v1.x, v1.y, v2.x, v2.y)
/*================================================================================================*/