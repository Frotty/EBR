package Minion
import public EscaperSensor
import Escaper

public constant COLL_SIZE_MINION = 68.

public class Minion extends EscaperSensorSetup
    private Escaper target

	construct(vec2 pos, player owner, angle facing)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().minionId, facing, COLL_SIZE_MINION, COLL_SIZE_MINION + 16)
        selectTarget()

	construct(vec2 pos, player owner)
		super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().minionId, COLL_SIZE_MINION, COLL_SIZE_MINION + 16)
        selectTarget()
	
	construct(unit existing)
		super(existing, COLL_SIZE_MINION, COLL_SIZE_MINION + 16)
        selectTarget()

    function update()
        super.update()
        if target.alive != true or getRegionData(target.pos) != currentRegion
            selectTarget()
        else if target != null
            // Spamming the order like this might not be a good idea
            IssueTargetOrderById(actor, "move", target.pos)

    function selectTarget()
        updatePos()
        target = null
        let closestDist = -1
		for Escaper e in currentRegion.getEscapers()
            if e.alive
                let dist = e.pos.toVec2().distanceTo2dSq(pos.toVec2())
				if closestDist == -1 or dist < closestDist
                    closestDist = dist
                    target = e
		if target != null
            IssueTargetOrderById(actor, "move", target.pos)
