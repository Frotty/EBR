package Minion
import public EscaperSensor
import Escaper
import CustomBar

public constant COLL_SIZE_MINION = 68.

public class Minion extends EscaperSensorSetup
    private Escaper target
    real maxHp = 40.
    real currentHP = 40.
    CustomBar hpBar

    construct(vec2 pos, player owner, angle facing)
        super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().minionId, facing, COLL_SIZE_MINION, COLL_SIZE_MINION + 16)
        setup()

    construct(vec2 pos, player owner)
        super(pos.toVec3(), owner, getRegionData(pos).getTypeSet().minionId, COLL_SIZE_MINION, COLL_SIZE_MINION + 16)
        setup()

    function setup()
        selectTarget()
        sleeps = false
        hpBar = new CustomBar(pos, "|", 40, 6)
        hpBar.setForeground(colorA(200,255,125,255))
        
    function onDamage(Escaper escaper, real dmg)
        currentHP -= dmg
        if currentHP < 0
            actor.kill()

    override function update()
        super.update()
        hpBar.setPosXY(pos.x - 50, pos.y + 50)
        hpBar.setValue(currentHP / maxHp * 100.0)
        if target == null or target.alive != true or target.getCurrentRegion() != this.getCurrentRegion()
            selectTarget()
        else if target != null
            // Spamming the order like this might not be a good idea
            setup.issuePointOrder("move", target.pos.toVec2())

    function selectTarget()
        printLog(Loglevel.DEBUG, "Searching for a new target")
        target = null
        var closestDist = -1.
        for escaper from this.getCurrentRegion().getEscapers()
            if escaper.alive
                let dist = escaper.pos.toVec2().distanceTo(pos.toVec2())
                if closestDist == -1. or dist < closestDist
                    closestDist = dist
                    target = escaper
                    printLog(Loglevel.DEBUG, "Found a new prey!")
        if target != null
            setup.issuePointOrder("move", target.pos.toVec2())
