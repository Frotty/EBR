package BossSpellTarget

import SetupObject
import EventHandling
import PreloadHandler
import DummyCaster
import Fx
import MapBounds
import Escaper

public constant int SPELLTARGET_ID = 'u00F'
public constant int AOE_ID = 'A06V' 
public constant int MISSILE_ID = 'A06W' 

public enum SpellType
	AOE
	LINE
	MISSILE

public class SpellTarget extends DynamicSetupObject
	SpellType stype

	construct(vec2 pos, player owner)
		super(pos.toVec3(), CreateUnit(owner, SPELLTARGET_ID, pos.x, pos.y, 0), CreateUnit(owner, SPELLTARGET_ID, pos.x, pos.y, 0), 0, null)
		setup.registerCastEvent(Condition(function onCast))
		
	static function onCast() returns boolean
		var data = GetTriggerUnit().getUserData() castTo Entity
		if data instanceof SpellTarget
			var spt = data castTo SpellTarget
			var id = GetSpellAbilityId()
			var ox = GetSpellTargetX()
			var oy = GetSpellTargetY()
			switch id
				case AOE_ID
					spt.stype = SpellType.AOE
					spt.actor.setVertexColor(255,255,0,0)
					spt.actor.removeAbility(AOE_ID)
					spt.actor.addAbility(MISSILE_ID)
				case MISSILE_ID
					spt.stype = SpellType.MISSILE
					spt.actor.setVertexColor(0,255,255,0)
					spt.actor.removeAbility(MISSILE_ID)
					spt.actor.addAbility(AOE_ID)
		return false
	
	function castSpell(int spell_id, string spell_string)
		var dc = new DummyCaster(spell_id, spell_string, DUMMY_PLAYER, true)
		dc.level = 1
		dc.castOnPoint(pos)

public class BossMissile extends Entity
	Fx missile
	SpellTarget target
	real speed = 60
	
	construct (vec3 pos, string sfx, SpellTarget target)
		super(pos,target.owner)
		missile = new Fx(pos, angleBetweenCoords(missile.dummy.getX(), missile.dummy.getY(), target.actor.getX(), target.actor.getY()), sfx)
		
	override function update()
		angle a = angleBetweenCoords(missile.dummy.getX(), missile.dummy.getY(), target.actor.getX(), target.actor.getY())
		var x = polarProjectionX(missile.dummy.getX(), speed, a)
		var y = polarProjectionY(missile.dummy.getY(), speed, a)
		pos = vec3(x,y, 0.)
		missile.dummy.setFacing(a)
		if not pos.toVec2().inBounds()
			printError("Missile out of Bounds")
			pos = vec3(0,0,520)
			vel = vec3(0,0,0)
			
			
	function onInRangeEvent()
		var ent = GetTriggerUnit().getUserData() castTo Entity
		
		if ent instanceof Escaper
			var es = ent castTo Escaper
			if not es.flying
				missile.dummy.damageTarget(es.actor, 25)
	
init
	preloadAbility(AOE_ID)