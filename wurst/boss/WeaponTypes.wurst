package WeaponTypes
import Escaper
import Assets
import ClosureForGroups
import Boss

public constant weaponcount = 4
tuple WeaponType(int itemId, int abilId, boolean melee, string attachment, WeaponListener listener)

public interface WeaponListener
	function onAttack(Escaper attacker)

public WeaponType array weapontypes

function onSabre(Escaper e)
	let facing = e.actor.getFacingAngle()
	let tpos = e.pos.toVec2().polarOffset(facing, 64)
	destroy new Fx(tpos, facing, Other.defendcaster)
	forUnitsInRange(tpos, 100, (unit u) -> begin
		let entity = u.getEntity()
		if entity != null and entity instanceof Boss
			Boss b = entity castTo Boss
			b.onDamage(e, 20)
	end)

function onHammer(Escaper e)
	let facing = e.actor.getFacingAngle()
	let tpos = e.pos.toVec2().polarOffset(facing, 64)
	addEffect(Other.thunderclapcaster, tpos).destr()
	forUnitsInRange(tpos, 100, (unit u) -> begin
		let entity = u.getEntity()
		if entity != null and entity instanceof Boss
			Boss b = entity castTo Boss
			b.onDamage(e, 20)
	end)

function onGlaive(Escaper e)
	let facing = e.actor.getFacingAngle()
	let tpos = e.pos.toVec2().polarOffset(facing, 64)
	addEffect(Other.thunderclapcaster, tpos).destr()
	forUnitsInRange(tpos, 100, (unit u) -> begin
		let entity = u.getEntity()
		if entity != null and entity instanceof Boss
			Boss b = entity castTo Boss
			b.onDamage(e, 20)
	end)

init
	weapontypes[0] = WeaponType('I00U','A081', true, "weapons\\attachment\\Sabre.mdx", (Escaper e) -> onSabre(e))
	weapontypes[1] = WeaponType('I00W','A082', true, "weapons\\attachment\\ThrallHammer.mdx", (Escaper e) -> onHammer(e))
	weapontypes[2] = WeaponType('I00V','A083', false, "weapons\\attachment\\Sabre.mdx", (Escaper e) -> onGlaive(e))
	weapontypes[3] = WeaponType('I00Y','A084', false, "weapons\\attachment\\Sabre.mdx", (Escaper e) -> print("Bow"))