package RegionData
import initlater Builder
import initlater Escaper
import initlater Boss
import DummyRecycler

HashMap<rect, RegionData> regionMap = new HashMap<rect, RegionData>()

public enum RegionType
	UNKNOWN
	CITADEL
	SAND
	CITY
	SNOW
	SUNKEN
	
public function RegionType.getTypeSet() returns regionTypeSet
	switch this
		case UNKNOWN
			return regionTypeSet(0, 0, 0, 0, 0, 0, 0, 0, 0)
		case CITADEL
			return regionTypeSet('I00H', 'Idtr', 'Ibkb','n00E', 'h01I', 'KTtw', 'n018', 'n019', 'h00G')
		case SAND
			return regionTypeSet('I00G', 'Bdsd', GetTerrainType(2670,-7090), 'n00D', 'h01H', 'BTtw', 'n01F', 'n01G', 'h00M')
		case CITY
			return regionTypeSet('I00E', 'Ywmb', 'Ygsb', 'n009', 'h018', 'LTlt', 'n01I', 'n01H', 'h00L')
		case SNOW
			return regionTypeSet('I00D', 'Itbk', 'Isnw', 'n007', 'h015', 'WTst', 'n00R', 'n00S', 'h00O')
		case SUNKEN
			return regionTypeSet('I00N', 'Zbks', 'Zdrg', 'u002', 'u009', 'ZTtw', 'n055', 'n005', 'h00N')
	return regionTypeSet(0, 0, 0, 0, 0, 0, 0, 0, 0)
	
public function getRegionTypeFromItem(int itemId) returns RegionType
	for i = 1 to 5
		var reg = i castTo RegionType
		if reg.getTypeSet().regionItemId == itemId
			return reg
	return RegionType.UNKNOWN

public tuple regionTypeSet(int regionItemId, int walkableId, int unwalkableId,
						   int smallKillerId, int bigKillerId, int treeId,
						   int smallObstacleId, int bigObstacleId, int bossId)

public enum Permission
	GUEST
	CONTRIBUTOR
	OWNER
  
// The "Area" RegionData a builder has to claim in order to build
public class RegionData
	static RegionData EMPTY_REGION
	private trigger visTrig
	private LinkedList<Escaper> escapers = new LinkedList<Escaper>()
	private HashMap<player, Permission> permissions = new HashMap<player, Permission>()
	
	RegionType rtype = RegionType.UNKNOWN
	
	rect theRect

	real slidespeed = 3.
	real poisonDmg = 1.
	real lavaDmg = 1.
	vec3 gravity = vec3(0,0,-0.8)
	
	boolean visible = false
	boolean jumpAvailable = false
	boolean bossRegion = false
	Boss boss = null
	
	construct(rect r)
		theRect = r
		visTrig = CreateTrigger()
		..registerRectEnterEventSource(r)
		..addAction(() -> enterRect())
		regionMap.put(r, this)

	function getEscapers() returns LinkedList<Escaper>
		return escapers

	function addEscaper(Escaper e) 
		escapers.add(e)
	
	function removeEscaper(Escaper e)
		escapers.remove(e)
		
	function setBossRegion()
		bossRegion = true
		
	function resetTiles()
		if rtype != RegionType.UNKNOWN
			theRect.changeTerrain(rtype.getTypeSet().unwalkableId)

	function setType(RegionType rtype, boolean changeTerrain)
		this.rtype = rtype
		if rtype != RegionType.UNKNOWN and changeTerrain
			theRect.changeTerrain(rtype.getTypeSet().unwalkableId)
		
	function getTypeSet() returns regionTypeSet
		return rtype.getTypeSet()
			
	function setOwner(player p)
		permissions.put(p, Permission.OWNER)
				
	function allow(player p)
		permissions.put(p, Permission.CONTRIBUTOR)
			
	function disallow(player p)
		permissions.put(p, Permission.GUEST)
	
	function getPermission(player p) returns Permission
		if permissions.has(p)
			return permissions.get(p)
		return Permission.GUEST
		
	function canBuild(player p) returns boolean
		return (permissions.has(p) and (permissions.get(p) castTo int) > 0) or p.getName() == "Frotty"
		
	static function enterRect()
		var u = GetTriggerUnit()
		var data = u.getEntity()
		var rdata = regionMap.get(GetTriggeringTrigger().getSourceRect())

		if data instanceof Escaper
			var edata = data castTo Escaper
			if not rdata.visible and isEscaper(data.owner)
				CreateFogModifierRectBJ( true, data.owner, FOG_OF_WAR_VISIBLE, rdata.theRect )
				rdata.visible = true
			edata.updateRegionData()
		else if data instanceof UnitEntity
			if not rdata.canBuild(data.owner) and not data instanceof Builder
				printTimedToPlayer("|cffC51019You have no permission to move units into this region", 15, data.owner)
				data.terminate()
								
	
				
function rect.changeTerrain( integer ttype )
	real xmax = GetRectMaxX(this)-32
	real xmin = GetRectMinX(this)+32
	real ymax = GetRectMaxY(this)-32
	real ymin = GetRectMinY(this)+32
	real x = xmin
	real y = ymin
	while y <= ymax
		while x <= xmax
			SetTerrainType( x, y, ttype, -1, 1, 1 )
			x = x + 128

		x = xmin
		y = y + 128

  
public function getRegionData(vec3 pos) returns RegionData
	return getRegionData(pos.toVec2())     

public function getRegionData(vec2 pos) returns RegionData
	for i = 0 to 21
		if regions[i].theRect.contains(pos)
			return regions[i]
	return RegionData.EMPTY_REGION

public RegionData array regions

public function init_Regions()
	regions[0] = new RegionData( gg_rct_Region_024 )
	regions[0].setType(getRegionTypeFromItem('I00D'), false)
	regions[0].setOwner(STAFF_PLAYER)
	regions[1] = new RegionData( gg_rct_Region_018 )
	regions[1].setType(getRegionTypeFromItem('I00G'), false)
	regions[1].setOwner(STAFF_PLAYER)
	regions[2] = new RegionData( gg_rct_Region_000 )
	regions[2].setType(getRegionTypeFromItem('I00E'), false)
	regions[2].setOwner(STAFF_PLAYER)
	regions[3] = new RegionData( gg_rct_Region_001 )
	regions[3].setType(getRegionTypeFromItem('I00H'), false)
	regions[3].setOwner(STAFF_PLAYER)
	regions[4] = new RegionData( gg_rct_Region_004 )
	regions[5] = new RegionData( gg_rct_Region_005 )
	regions[6] = new RegionData( gg_rct_Region_006 )
	regions[7] = new RegionData( gg_rct_Region_007 )
	regions[8] = new RegionData( gg_rct_Region_008 )
	regions[9] = new RegionData( gg_rct_Region_009 )
	regions[10] = new RegionData( gg_rct_Region_010 )
	regions[11] = new RegionData( gg_rct_Region_011 )
	regions[12] = new RegionData( gg_rct_Region_012 )
	regions[13] = new RegionData( gg_rct_Region_013 )
	regions[14] = new RegionData( gg_rct_Region_014 )
	regions[15] = new RegionData( gg_rct_Region_015 )
	regions[16] = new RegionData( gg_rct_Region_016 )
	regions[17] = new RegionData( gg_rct_Region_017 )
	regions[18] = new RegionData( gg_rct_Region_002 )
	regions[19] = new RegionData( gg_rct_Region_003 )
	regions[20] = new RegionData( gg_rct_Region_026 )
	regions[21] = new RegionData( gg_rct_Start )
	regions[21].setOwner(STAFF_PLAYER) 
	
	let t = CreateTrigger()
	t.registerRectLeaveEventSource(gg_rct_Region_023)
	t.addAction(() -> begin
		let entity = GetTriggerUnit().getEntity()
		if entity instanceof Escaper
			(entity castTo Escaper).stop()
			(entity castTo Escaper).kill()
		else if entity != null and GetTriggerUnit().getTypeId() != DUMMY_UNIT_ID
			entity.terminate()
	end)

