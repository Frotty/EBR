package RegionData
import initlater Builder
import initlater Boss
import public GameConstants
import HashMap
import PlayerData
import TerrainModder
import UnitProducer
import DummyRecycler
import PickSystem
import initlater TerrainBlocker

HashMap<rect, RegionData> regionMap = new HashMap<rect, RegionData>()

public enum RegionType
	UNKNOWN
	CITADEL
	SAND
	CITY
	SNOW
	SUNKEN
	
public function RegionType.getTypeSet() returns regionTypeSet
	switch this
		case UNKNOWN
			return regionTypeSet(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
		case CITADEL
			return regionTypeSet('I00H', 'Idtr', 'Ibkb','n00E', 'h01I', 'KTtw', 'n018', 'n019', 'h00G', 'u00K', 'n01V')
		case SAND
			return regionTypeSet('I00G', 'Bdsd', GetTerrainType(2670,-7090), 'n00D', 'h01H', 'BTtw', 'n01F', 'n01G', 'h00M', 'u00N', 'n01W')
		case CITY
			return regionTypeSet('I00E', 'Ywmb', 'Ygsb', 'n009', 'h018', 'LTlt', 'n01I', 'n01H', 'h00L', 'u00M', 'n01X')
		case SNOW
			return regionTypeSet('I00D', 'Itbk', 'Isnw', 'n007', 'h015', 'WTst', 'n00R', 'n00S', 'h00O', 'u00L', 'n01J')
		case SUNKEN
			return regionTypeSet('I00N', 'Zbks', 'Zdrg', 'u002', 'u009', 'ZTtw', 'n055', 'n005', 'h00N', 'u00O', 'n01Y')
	return regionTypeSet(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
	
public function getRegionTypeFromItem(int itemId) returns RegionType
	for i = 1 to 5
		var reg = i castTo RegionType
		if reg.getTypeSet().regionItemId == itemId
			return reg
	return RegionType.UNKNOWN

public tuple regionTypeSet(int regionItemId, int walkableId, int unwalkableId,
						   int smallKillerId, int bigKillerId, int treeId,
						   int smallObstacleId, int bigObstacleId, int bossId, int minionId, int highObstacleId)

public enum Permission
	GUEST
	CONTRIBUTOR
	OWNER


class FogData
	fogmodifier modifier
	fogstate state
	boolean visible
	rect r
	player p

	construct(player p, rect r)
		this.r = r
		this.p = p
		visible = isBuilder(p)
		if visible
			changeFog(FOG_OF_WAR_VISIBLE)
		else
			changeFog(FOG_OF_WAR_MASKED)
	
	function changeFog(fogstate fstate)
		if state != fstate
			state = fstate
			if modifier != null
				DestroyFogModifier(modifier)
			modifier = CreateFogModifierRect(p, state, r, false, false)
			FogModifierStart(modifier)
  
// The "Area" RegionData a builder has to claim in order to build
public class RegionData
	static RegionData EMPTY_REGION = new RegionData(null)
	private trigger visTrig
	private LinkedList<Escaper> escapers = new LinkedList<Escaper>()
	private HashMap<player, Permission> permissions = new HashMap<player, Permission>()
	private FogData array[12] fmods
	
	RegionType rtype = RegionType.UNKNOWN
	
	rect theRect

	real slidespeed = 3.
	real poisonDmg = 1.
	real lavaDmg = 1.
	real turnSpeed = 1.75
	vec3 gravity = vec3(0,0,-0.8)
	
	boolean easyMode = false
	boolean visible = false
	int specialAbil = 0
	boolean bossRegion = false
	boolean allowCut = false
	Boss boss = null
	
	construct(rect r)
		theRect = r
		if(r != null)
			visTrig = CreateTrigger()
			..registerRectEnterEventSource(r)
			..addAction(() -> enterRect())
			regionMap.put(r, this)
			for pd from escaperPlayers.staticItr()
				fmods[pd.id] = new FogData(pd.p, theRect)
			for pd from builderPlayers.staticItr()
				fmods[pd.id] = new FogData(pd.p, theRect)

	function getEscapers() returns LLStaticIterator<Escaper>
		escapers.staticItr().reset()
		return escapers.staticItr()

	function addEscaper(Escaper e) 
		escapers.add(e)
	
	function removeEscaper(Escaper e)
		escapers.remove(e)
		
	function setBossRegion()
		bossRegion = true
		
	function resetTiles()
		if rtype != RegionType.UNKNOWN
			theRect.changeTerrain(rtype.getTypeSet().unwalkableId)

	function setType(RegionType rtype, boolean changeTerrain)
		this.rtype = rtype
		if rtype != RegionType.UNKNOWN and changeTerrain
			theRect.changeTerrain(rtype.getTypeSet().unwalkableId)
		
	function getTypeSet() returns regionTypeSet
		return rtype.getTypeSet()
			
	function setOwner(player p)
		permissions.put(p, Permission.OWNER)
				
	function allow(player p)
		permissions.put(p, Permission.CONTRIBUTOR)
			
	function disallow(player p)
		permissions.put(p, Permission.GUEST)
	
	function getPermission(player p) returns Permission
		if permissions.has(p)
			return permissions.get(p)
		return Permission.GUEST
		
	function canBuild(player p) returns boolean
		return (permissions.has(p) and (permissions.get(p) castTo int) > 0) or pData[p.getId()].title == Title.ADMIN

	function createSetup()
		createUnit(STAFF_PLAYER, 'n008', theRect.getCenter(), (270).asAngleDegrees())

	function revealRegion(player p)
		let id = p.getId()
		fmods[id].changeFog(FOG_OF_WAR_VISIBLE)
			
	static function enterRect()
		var u = GetTriggerUnit()
		var data = u.getEntity()
		var rdata = regionMap.get(GetTriggeringTrigger().getSourceRect())

		if data instanceof Escaper
			var edata = data castTo Escaper
			if rdata.getTypeSet() == RegionType.UNKNOWN.getTypeSet() or edata.getPos().z > 10
				edata.setPos(edata.getPos()-edata.getRealVel())
				edata.stop()
				edata.kill(null)
				edata.setCurrentRegion()
			else if isEscaper(data.owner)
				rdata.revealRegion(data.owner)
				edata.updateRegionData()
		else if data instanceof UnitEntity
			if not rdata.canBuild(data.owner) and not data instanceof Builder and not data instanceof Selector
				and not data instanceof TerrainModder and not data instanceof UnitProducer
				printTimedToPlayer("|cffC51019You have no permission to move units into this region", 15, data.owner)
				data.terminate()
								
	
				
function rect.changeTerrain( integer ttype )
	real xmax = GetRectMaxX(this)-32
	real xmin = GetRectMinX(this)+32
	real ymax = GetRectMaxY(this)-32
	real ymin = GetRectMinY(this)+32
	real x = xmin
	real y = ymin
	while y <= ymax
		while x <= xmax
			if not bitset(tileModifierMap.loadInt(x.round(),y.round())).contains(TileModifiers.PERMAPATH castTo int)
				SetTerrainType( x, y, ttype, -1, 1, 1 )
			x = x + 128

		x = xmin
		y = y + 128

RegionData array currentRegion

public function Entity.setCurrentRegion() returns RegionData
	currentRegion[this castTo int] = getRegionData(this.getPos())
	return currentRegion[this castTo int]

public function Entity.getCurrentRegion() returns RegionData
	if currentRegion[this castTo int] == null
		currentRegion[this castTo int] = getRegionData(this.getPos())
	return currentRegion[this castTo int]

public function getRegionData(vec3 pos) returns RegionData
	return getRegionData(pos.toVec2())     

public function getRegionData(vec2 pos) returns RegionData
	var i = 0
	while regions[i] != null
		if regions[i].theRect.contains(pos)
			return regions[i]
		i++
	return RegionData.EMPTY_REGION

public RegionData array regions

@init1 function init_Regions()
	regions[0] = new RegionData(gg_rct_Region_024)
	regions[0].setType(getRegionTypeFromItem('I00D'), false)
	regions[0].setOwner(STAFF_PLAYER)
	regions[1] = new RegionData(gg_rct_Region_018 )
	regions[1].setType(getRegionTypeFromItem('I00G'), false)
	regions[1].setOwner(STAFF_PLAYER)
	regions[2] = new RegionData(gg_rct_Region_000 )
	regions[2].setType(getRegionTypeFromItem('I00E'), false)
	regions[2].setOwner(STAFF_PLAYER)
	regions[3] = new RegionData(gg_rct_Region_001 )
	regions[3].setType(getRegionTypeFromItem('I00H'), false)
	regions[3].setOwner(STAFF_PLAYER)
	regions[4] = new RegionData(gg_rct_Region_004)..createSetup()
	regions[5] = new RegionData(gg_rct_Region_005)..createSetup()
	regions[6] = new RegionData(gg_rct_Region_006)..createSetup()
	regions[7] = new RegionData(gg_rct_Region_007)..createSetup()
	regions[8] = new RegionData(gg_rct_Region_008)..createSetup()
	regions[9] = new RegionData(gg_rct_Region_009)..createSetup()
	regions[10] = new RegionData(gg_rct_Region_010)..createSetup()
	regions[11] = new RegionData(gg_rct_Region_011)..createSetup()
	regions[12] = new RegionData(gg_rct_Region_012)..createSetup()
	regions[13] = new RegionData(gg_rct_Region_013)..createSetup()
	regions[14] = new RegionData(gg_rct_Region_014)..createSetup()
	regions[15] = new RegionData(gg_rct_Region_015)..createSetup()
	regions[16] = new RegionData(gg_rct_Region_016)..createSetup()
	regions[17] = new RegionData(gg_rct_Region_017)..createSetup()
	regions[18] = new RegionData(gg_rct_Region_002)..createSetup()
	regions[19] = new RegionData(gg_rct_Region_003)..createSetup()
	regions[20] = new RegionData(gg_rct_Region_026)..createSetup()
	regions[21] = new RegionData(gg_rct_Start)
	regions[21].setOwner(STAFF_PLAYER)
	regions[21].setType(getRegionTypeFromItem('I00D'), false)
	regions[22] = new RegionData(gg_rct_Choose)
	regions[22].setType(getRegionTypeFromItem('I00D'), false)
	regions[22].setOwner(STAFF_PLAYER)
	regions[23] = new RegionData(gg_rct_Region_025)
	regions[23].setType(getRegionTypeFromItem('I00G'), false)
	regions[23].setOwner(STAFF_PLAYER)
	regions[23].easyMode = true
	
	let t = CreateTrigger()
	t.registerRectLeaveEventSource(gg_rct_Region_023)
	t.addAction(() -> begin
		let entity = GetTriggerUnit().getEntity()
		if entity instanceof Escaper
			(entity castTo Escaper).stop()
			(entity castTo Escaper).kill(null)
		else if entity != null and GetTriggerUnit().getTypeId() != DUMMY_UNIT_ID
			entity.terminate()
	end)

