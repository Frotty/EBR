package BaseObject
    import public Entity
    import Vectors
    import Terrain
    import Trigger
    
    trigger rallyTrigger
    
    /*  ---Creating a new Baseobject---
        Creating the baseobject will need 3 parameters
        the unit u: in whichs Userdata the struct is saved
        the radius: The Range of the InrangeDetection
        the code c: name of the static method that is being called upon inRangeEvent
    */
    
    
    public class StaticBaseObject extends Entity
        
        unit actor        
        
        private vec3 rallyPoint
        private unit rallyUnit
        private real rallyAngle = 0.
        
        trigger inRangeTrig // Trigger for inRange detection
        
        construct( vec3 pos, unit u, real radius, code c )
        	super( pos, radius, u.getOwner() )
        	active = false
            actor = u
            actor.addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)

            rallyPoint = position
            
            if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
                inRangeTrig = CreateTrigger()
                inRangeTrig.registerUnitInRangeSource( actor, radius )
                inRangeTrig.addAction( c )
            TriggerRegisterUnitEvent( rallyTrigger, actor, EVENT_UNIT_ISSUED_POINT_ORDER ) 
            TriggerRegisterUnitEvent( rallyTrigger, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )
            
            actor.setUserData(this castTo int)

        override function update()
        override function onGround()
        override function inAir()
        
        static function adjustRallypoint() //method that automaticly adjusts the RallyXY of the baseobject
            unit u        = GetOrderedUnit()
            unit u2       = GetOrderTargetUnit()
            real x        = GetOrderPointX()
            real y        = GetOrderPointY()
            thistype obj  = GetUnitUserData( u ) castTo StaticBaseObject
            
            if u == u2
                u2 = null
                
            if GetIssuedOrderId() == 0xD000C or GetIssuedOrderId() == 851971//IDs of Rally(to be sure)
                if u2 == null
                    obj.rallyUnit = null
                    obj.rallyPoint = vec3( x, y, getTerrainZ( x, y ) )
                    obj.rallyAngle = angleBetweenCoordsD( obj.position.x, obj.position.y, x, y )
                else
                    obj.rallyUnit = u2
                    
        function getRallyPoint() returns vec3
            if rallyUnit == null
                return rallyPoint
            else
                real x = GetUnitX( rallyUnit )
                real y = GetUnitY( rallyUnit )
                return vec3( x, y, getTerrainZ( x, y ) )
                        
		function getRallyUnit() returns unit
			return rallyUnit
			
        function setX( real x )
            SetUnitX( actor, x )

        function setY( real y )
            SetUnitY( actor, y )
            
        function setZ( real z )
            SetUnitFlyHeight( actor, z, 0. )
        
        //Copying with getting the live Rallypoint, but still using the structmeber to save some native calls
        function getRallyX() returns real
            if rallyUnit == null
                return rallyPoint.x
            else
                if GetWidgetLife(rallyUnit) > .405
                    return GetUnitX(rallyUnit)
                else
                    rallyUnit = null
                    return rallyPoint.x

		function getRallyY() returns real
            if rallyUnit == null
                return rallyPoint.y
            else
                if GetWidgetLife(rallyUnit) > .405
                    return GetUnitY(rallyUnit)
                else
                    rallyUnit = null
                    return rallyPoint.y
        
        
        ondestroy
            actor.clearRegister()

    

    init
        rallyTrigger = CreateTrigger()
        rallyTrigger.addAction( function StaticBaseObject.adjustRallypoint )
        //setting arrays in a scopeinit is always a good idea.

endpackage