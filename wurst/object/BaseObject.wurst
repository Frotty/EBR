package BaseObject
	import public Entity
	import Vectors
	import Terrain
	import Trigger
	import SetupObject
	import Escaper

	trigger rallyTrigger

	/*  ---Creating a new Baseobject---
		Creating the baseobject will need 3 parameters
		the unit u: in whichs Userdata the struct is saved
		the radius: The Range of the InrangeDetection
		the code c: name of the static method that is being called upon inRangeEvent
	*/
	
	public code CODE_NULL = null

	public class StaticBaseObject extends UnitEntity
		private vec3 rallyPoint
		private unit rallyUnit
		private angle rallyAngle

		trigger inRangeTrig // Trigger for inRange detection

		construct( vec2 pos, unit u, real radius, code c )
			super( pos.withZ(getTerrainZ(pos.x, pos.y)), u )
			active = false


			rallyPoint = this.pos

			if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
				inRangeTrig = CreateTrigger()
				inRangeTrig.registerUnitInRangeSource( actor, radius )
				inRangeTrig.addCondition(Condition(function isProper))
				inRangeTrig.addAction( c )
			TriggerRegisterUnitEvent( rallyTrigger, actor, EVENT_UNIT_ISSUED_POINT_ORDER ) 
			TriggerRegisterUnitEvent( rallyTrigger, actor, EVENT_UNIT_ISSUED_TARGET_ORDER )

			actor.setUserData(this castTo int)

		static function isProper() returns boolean
			return not (GetTriggerUnit().getUserData() castTo Escaper).flying

		static function adjustRallypoint() //method that automaticly adjusts the RallyXY of the baseobject
			unit u		= GetOrderedUnit()
			unit u2	   = GetOrderTargetUnit()
			real x		= GetOrderPointX()
			real y		= GetOrderPointY()
			thistype obj  = GetUnitUserData( u ) castTo StaticBaseObject

			if GetIssuedOrderId() == 0xD000C or GetIssuedOrderId() == 851971//IDs of Rally(to be sure)
				if u2 == null
					obj.rallyUnit = null
					obj.rallyPoint = vec3( x, y, getTerrainZ( x, y ) )
					obj.rallyAngle = angleBetweenCoords( obj.pos.x, obj.pos.y, x, y )
				else
					var data = u2.getUserData() castTo Entity
					if data != null and data instanceof DynamicSetupObject
						obj.rallyUnit = (data castTo DynamicSetupObject).actor
					else
						obj.rallyUnit = u2



		function getRallyPoint() returns vec3
			if rallyUnit == null
				return rallyPoint
			else
				if rallyUnit.getOwner() != DUMMY_PLAYER
					real x = GetUnitX( rallyUnit )
					real y = GetUnitY( rallyUnit )
					return vec3( x, y, getTerrainZ( x, y ) )
				else
					return pos

		function getRallyUnit() returns unit
			return rallyUnit

		function setX( real x )
			SetUnitX( actor, x )

		function setY( real y )
			SetUnitY( actor, y )

		function setZ( real z )
			SetUnitFlyHeight( actor, z, 0. )

		function getRallyX() returns real
			if rallyUnit == null
				return rallyPoint.x
			else
				if GetWidgetLife(rallyUnit) > .405
					return GetUnitX(rallyUnit)
				else
					rallyUnit = null
					return rallyPoint.x

		function getRallyY() returns real
			if rallyUnit == null
				return rallyPoint.y
			else
				if GetWidgetLife(rallyUnit) > .405
					return GetUnitY(rallyUnit)
				else
					rallyUnit = null
					return rallyPoint.y

		function getRallyAngle() returns real
			return angleBetweenCoords(pos.x, pos.y, getRallyX(), getRallyY()).degrees()

		override function update()

		ondestroy
			actor.clearRegister()
			actor.remove()
			inRangeTrig.destr()



	init
		rallyTrigger = CreateTrigger()
		rallyTrigger.addAction( function StaticBaseObject.adjustRallypoint )


endpackage