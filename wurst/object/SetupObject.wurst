package SetupObject
	import public Entity
	import Vectors
	import Terrain
	import Trigger
   
	public code CODE_NULL = null
	/**
		Objects which are unclickable for escapers,
		but clickable for builders.	 
	
	*/
	
	trigger orderTrigger
	timer fixPos = CreateTimer()
	
	public abstract class DynamicSetupObject extends UnitEntity
		real radius	
		unit setup
		
		trigger inRangeTrig // Trigger for inRange detection
		
						
		construct( vec3 pos, unit u, unit setup, real radius, code c )
			super( pos, u )
			this.radius = radius
			actor.addAbility('Aloc').removeAbility('Aloc')
			SetUnitPathing(actor, true)
			
			this.setup = setup
			TriggerRegisterUnitEvent(orderTrigger, setup, EVENT_UNIT_ISSUED_ORDER)
			TriggerRegisterUnitEvent(orderTrigger, setup, EVENT_UNIT_ISSUED_POINT_ORDER)
			TriggerRegisterUnitEvent(orderTrigger, setup, EVENT_UNIT_ISSUED_TARGET_ORDER)

		   
			setup.setX( actor.getX() )
			setup.setY( actor.getY() )
			setup.addAbility('Agho')
			
			if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
				inRangeTrig = CreateTrigger()
				inRangeTrig.registerUnitInRangeSource( actor, radius )
				inRangeTrig.addAction( c )
				
			setup.setUserData( this castTo int )
			
		override function setNewPos(vec3 pos)
			this.pos = pos
			actor.setPos(pos.x, pos.y)
			setup.setPos(pos.x, pos.y)

		
		function setAngle(real angl)
			actor.setFacing(angl)
			setup.setFacing(angl)
			
		override function setNewXY(vec3 pos)
			this.pos = pos
			actor.setXY(pos.x, pos.y)
			setup.setXY(pos.x, pos.y)

		
		override function update()
			pos = setup.getPos().toVec3()
		
		function setX( real x )
			SetUnitX( actor, x )

		function setY( real y )
			SetUnitY( actor, y )
			
		function setZ( real z )
			SetUnitFlyHeight( actor, z, 0. )
						  
		
		ondestroy
			actor.clearRegister()
			actor.remove()
			setup.remove()
			inRangeTrig.destr()
			
		static function onOrderEvent()
			var entity = GetTriggerUnit().getUserData() castTo Entity
			var order = GetIssuedOrderId()
			var x = GetOrderPointX()
			var y = GetOrderPointY()
			var u = GetOrderTargetUnit()
			string orderS = OrderId2String(order)
			if orderS == "smart" or orderS == "move" or orderS == "attack" or orderS == "patrol" or orderS == "stop" or orderS == "holdposition"
				if entity instanceof DynamicSetupObject
					var obj = entity castTo DynamicSetupObject
					if orderS == "smart" and u == null
						// AddSpecialEffect("Abilities\\Weapons\\SpiritOfVengeanceMissile\\SpiritOfVengeanceMissile.mdl", x, y)
						IssuePointOrder(obj.setup, "move", x+GetRandomReal(-1,1), y)
	
					else
						if u != null
							IssueTargetOrderById(obj.actor, order, u)
						else if x != 0.	
							IssuePointOrderById(obj.actor, order, x, y)
						else
							IssueImmediateOrderById(obj.actor, order)



		  
					
	public abstract class StaticSetupObject extends UnitEntity
		real radius
		unit setup
		
		trigger inRangeTrig // Trigger for inRange detection
		
		construct( vec3 pos, real radius, code c )
			super( pos, setup )
			this.radius = radius
			if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
				inRangeTrig = CreateTrigger()
				inRangeTrig.addAction( c )
						
		construct( vec3 pos, unit u, unit setup, real radius, code c )
			super( pos, u )
			actor.addAbility('Aloc')
			this.setup = setup
			if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
				inRangeTrig = CreateTrigger()
				inRangeTrig.registerUnitInRangeSource( setup, radius )
				inRangeTrig.addAction( c )
			setup.setUserData( this castTo int )
		
		
		function setX( real x )
			SetUnitX( actor, x )

		function setY( real y )
			SetUnitY( actor, y )
			
		function setZ( real z )
			SetUnitFlyHeight( actor, z, 0. )
			
		override function update()
			

		ondestroy
			actor.clearRegister()
			actor.remove()
			setup.remove()
			inRangeTrig.destr()
//			
//	function fixPositions()
//		Entity e = Entity.first
//		while e != null
//			if e instanceof DynamicSetupObject 
//				let ds = e castTo DynamicSetupObject
//				ds.actor.setXY(ds.pos.toVec2())
//
//			e = e.next
//		debugPrint(">>>>>pos fixed", 3)
//
//
//
//	init
//		orderTrigger = CreateTrigger()
//		orderTrigger.addAction(function DynamicSetupObject.onOrderEvent )
//		fixPos.startPeriodic(15., function fixPositions)

endpackage