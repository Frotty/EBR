package RegionData
import Entity
import Escaper
import Rect

// The "Area" RegionData a builder has to claim in order to build
public class RegionData
	rect theRect

	int unwalkableTile
	int walkableTile
	
	real slidespeed = 3.
	real poisonDmg = 1.
	real lavaDmg = 1.
	
	int bigKillerId
	int smallKillerId
	
	int smallObstacleId
	int bigObstacleId
	
	int treeId
	
	boolean visible = false
	trigger visTrig
	
	boolean isGreyOwner
	boolean isLBOwner
	boolean isDGOwner
	boolean isBROwner = false
            
	construct( rect r )
		theRect = r
		visTrig = CreateTrigger()
		visTrig.registerRectEnterEventSource(r)
		visTrig.addAction(function RegionData.enterRect)
		regionTable.saveInt(GetHandleId(r), this castTo int)
		
	function isTerrainItem(int id) returns boolean
		for i = 0 to 5
			if id == ritem[i]
				return true
		return false
		
	function setType( int itemId, boolean changeTerrain )
		for i = 0 to 4
			debugPrint("RegionData check " + itemId.toString() + " == " + ritem[i].toString(), 2 )
			if itemId == ritem[i]
				debugPrint("RegionData is " + i.toString(), 1 )
				unwalkableTile = rectuw[i]
				walkableTile = rectw[i]
				bigKillerId = rectbk[i]
				smallKillerId = rectsk[i]
				smallObstacleId = sobst[i]
				bigObstacleId = bobst[i]
				treeId = trees[i]
				debugPrint("RegionData set " + i.toString(), 1)
				if changeTerrain
					theRect.changeTerrain(unwalkableTile)
				break
				
	function allow(int playerid)
		switch playerid
			case 8
				isGreyOwner = true
			case 9
				isLBOwner = true
			case 10 
				isDGOwner = true

	function disallow(int playerid)
		switch playerid
			case 8
				isGreyOwner = false
			case 9
				isLBOwner = false
			case 10 
				isDGOwner = false
	
	function isOwner(int playerid) returns boolean
		switch playerid
			case 8
				return isGreyOwner
			case 9
				return isLBOwner
			case 10
				return isDGOwner
			case 11
				return isBROwner
			default
				return false
								
	static function enterRect()
		var u = GetTriggerUnit()
		var data = u.getUserData() castTo Entity
		var rdata = regionTable.loadInt(GetHandleId(GetTriggeringTrigger().getSourceRect())) castTo RegionData

		if data instanceof Escaper
			var edata = data castTo Escaper
			if not rdata.visible and data.owner.getId() <= 7
				CreateFogModifierRectBJ( true, data.owner, FOG_OF_WAR_VISIBLE, rdata.theRect )
				rdata.visible = true
			edata.currentRegion = rdata

				
				
function rect.changeTerrain( integer ttype )
	real xmax = GetRectMaxX(this)-32
	real xmin = GetRectMinX(this)+32
	real ymax = GetRectMaxY(this)-32
	real ymin = GetRectMinY(this)+32
	real x = xmin
	real y = ymin
	while y <= ymax
		while x <= xmax
			SetTerrainType( x, y, ttype, -1, 1, 1 )
			x = x + 128

		x = xmin
		y = y + 128

        

public function getRegionData(real x, real y) returns RegionData
	for i = 0 to 21
		if RectContainsCoords(regions[i].theRect, x, y)
			return regions[i]
			
	return null


Table regionTable = new Table()
public RegionData array regions
// The claim item to buy
int array ritem 
// walkable tile
int array rectw 
// unwalkable tile
int array rectuw  
// small killer
int array rectsk 
// big killer
int array rectbk 
// treetype
int array trees 
// small obstacle
int array sobst 
// big obstacle
int array bobst 

public function init_Regions()

	initTerrainTypes()
	

	regions[0] = new RegionData( gg_rct_Region_024 )
	regions[0].setType('I00D', false)
	regions[1] = new RegionData( gg_rct_Region_018 )
	regions[1].setType('I00G', false)
	regions[2] = new RegionData( gg_rct_Region_000 )
	regions[2].setType('I00E', false)
	regions[3] = new RegionData( gg_rct_Region_001 )
	regions[3].setType('I00H', false)
	regions[4] = new RegionData( gg_rct_Region_004 )
	regions[5] = new RegionData( gg_rct_Region_005 )
	regions[6] = new RegionData( gg_rct_Region_006 )
	regions[7] = new RegionData( gg_rct_Region_007 )
	regions[8] = new RegionData( gg_rct_Region_008 )
	regions[9] = new RegionData( gg_rct_Region_009 )
	regions[10] = new RegionData( gg_rct_Region_010 )
	regions[11] = new RegionData( gg_rct_Region_011 )
	regions[12] = new RegionData( gg_rct_Region_012 )
	regions[13] = new RegionData( gg_rct_Region_013 )
	regions[14] = new RegionData( gg_rct_Region_014 )
	regions[15] = new RegionData( gg_rct_Region_015 )
	regions[16] = new RegionData( gg_rct_Region_016 )
	regions[17] = new RegionData( gg_rct_Region_017 )
	regions[18] = new RegionData( gg_rct_Region_002 )
	regions[19] = new RegionData( gg_rct_Region_022 )
	regions[20] = new RegionData( gg_rct_Region_003 )
	regions[21] = new RegionData( gg_rct_Region_026 )
    
   
function initTerrainTypes()
	//CITADEL
	ritem[0] = 'I00H'
	rectw[0] = 'Idtr'
	rectuw[0] = 'Ibkb'
	rectsk[0] = 'n00E'
	rectbk[0] = 'h01I'
	trees[0] = 'KTtw'
	sobst[0] = 'n018'
	bobst[0] = 'n019'
	
	//SAND
	ritem[1] = 'I00G'
	rectw[1] = 'Bdsd'
	rectuw[1] = GetTerrainType(2670,-7090)
	rectsk[1] = 'n00D'
	rectbk[1] = 'h01H'
	trees[1] = 'BTtw'
	sobst[1] = 'n01F'
	bobst[1] = 'n01G'
	            
	
	//CITY
	ritem[2] = 'I00E'
	rectw[2] = 'Ywmb'
	rectuw[2] = 'Ygsb'
	rectsk[2] = 'n009'
	rectbk[2] = 'h018'
	trees[2] = 'LTlt'
	sobst[2] = 'n01I'
	bobst[2] = 'n01H'
	            
	//ICE
	ritem[3] = 'I00D'
	rectw[3] = 'Itbk'
	rectuw[3] = 'Isnw'
	rectsk[3] = 'n007'
	rectbk[3] = 'h015'
	trees[3] = 'WTst'
	sobst[3] = 'n00R'
	bobst[3] = 'n00S'
	
	//SUNKEN
	ritem[4] = 'I00N'
	rectw[4] = 'Zbks'
	rectuw[4] = 'Zdrg'
	rectsk[4] = 'u002'
	rectbk[4] = 'u009'
	trees[4] = 'ZTtw'
	sobst[4] = 'n055'
	bobst[4] = 'n005'
	

