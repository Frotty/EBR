package BaseObject
import public Entity
import public TerrainUtils
import public ConfigValue
import public SetupObject
import Assets

trigger rallyTrigger

/*  ---Creating a new Baseobject---
	Creating the baseobject will need 3 parameters
	the unit u: in whichs Userdata the struct is saved
	the radius: The Range of the InrangeDetection
	the code c: name of the static method that is being called upon inRangeEvent
*/

public code CODE_NULL = null

public class StaticBaseObject extends UnitEntity
	private vec3 rallyPoint
	private unit rallyUnit
	private angle rallyAngle
	effect noRally

	protected trigger inRangeTrig // Trigger for inRange detection

	construct( vec2 pos, unit u, real radius, code c, code cond )
		super(u)
		noRally = addEffect(Other.questionmark, pos)
		actor.addAbility(GHOST_VIS_ID)

		rallyPoint = this.pos

		if radius > 0. // a few Objects like Spinner dont have inRange Events, we dont want to create unused triggers
			inRangeTrig = CreateTrigger()
			inRangeTrig.registerUnitInRangeSource( actor, radius )
			if cond == null
				inRangeTrig.addCondition(Condition((function isProper)))
			else
				inRangeTrig.addCondition(Condition(cond))
			inRangeTrig.addAction( c )
		rallyTrigger.registerUnitEvent(actor, EVENT_UNIT_ISSUED_POINT_ORDER) 
		rallyTrigger.registerUnitEvent(actor, EVENT_UNIT_ISSUED_TARGET_ORDER )

	function clearQuestionmark()
		if noRally != null
			noRally.destr()
			noRally = null

	static function isProper() returns boolean
		return GetTriggerUnit().getFlyHeight() < 22

	static function adjustRallypoint() //method that automaticly adjusts the RallyXY of the baseobject
		let u			= GetOrderedUnit()
		let target		= GetOrderTargetUnit()
		let targetPoint = vec2(GetOrderPointX(), GetOrderPointY())
		let orderid		= GetIssuedOrderId()
		
		let obj  = u.getEntity() castTo StaticBaseObject

		if orderid == 0xD000C or orderid == 851971
			if target == null
				obj.setRallyPoint(targetPoint)
				obj.rallyAngle = obj.pos.angleTo2d(targetPoint)
			else
				let data = target.getEntity()
				if data != null and data instanceof SetupObject
					obj.rallyUnit = (data castTo SetupObject).actor
				else
					obj.rallyUnit = target
				obj.rallyPoint = obj.rallyUnit.getPos().toVec3()
			if obj.noRally != null
				obj.noRally.destr()
				obj.noRally = null
					
	function setRallyPoint(vec2 pos)
		rallyPoint = pos.toVec3()
		rallyUnit = null
		clearQuestionmark()

	function getRallyPoint() returns vec3
		if rallyUnit == null or not rallyUnit.isAliveTrick()
			return rallyPoint
		else
			if rallyUnit.getOwner() != DUMMY_PLAYER
				real x = GetUnitX( rallyUnit )
				real y = GetUnitY( rallyUnit )
				return vec3( x, y, getTerrainZ( x, y ) )
			else
				return pos

	function getRallyUnit() returns unit
		return rallyUnit

	function getRallyAngle() returns angle
		if rallyUnit != null
			rallyAngle = pos.angleTo2d(rallyUnit.getPos())
		return rallyAngle

	ondestroy
		actor.clearRegister()
		inRangeTrig.destr()
		clearQuestionmark()

init
	rallyTrigger = CreateTrigger()
	rallyTrigger.addAction( function StaticBaseObject.adjustRallypoint )

