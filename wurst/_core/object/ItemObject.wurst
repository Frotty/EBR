package ItemObject
import public Escaper

ItemObject array itemObjs

/**
	Abstract class for Entities that are items
	like Keys, Coins, etc.
*/
public abstract class ItemObject extends Entity
	unit setup
	item actorItem

	construct(vec2 pos, item i, unit setup)
		super(setup.getOwner(), pos.toVec3())
		this.setup = setup
		setup..addAbility(GHOST_VIS_ID)
		itemObjs[setup.getIndex()] = this
		actorItem = i
		actorItem..setEntity(this)
		..setPos(pos)
		setup..setPos(actorItem.getPos())..setXY(actorItem.getPos())
	
	ondestroy
		setup.remove()
		if actorItem != null
			actorItem.setEntity(null)
			actorItem.remove()
		
	abstract function onPickup(Escaper e)
	
	abstract function onDrop(Escaper e)
	
	abstract function onUse(Escaper e)
	
function onItemUse()
	let itm = GetManipulatedItem()
	let hero = GetManipulatingUnit()
	
	let idata = itm.getEntity()
	let edata = hero.getEntity()
	if idata instanceof ItemObject and not idata.done
		if edata instanceof Escaper and not edata.done
			(idata castTo ItemObject).onUse(edata castTo Escaper)
				
function onItemPickup()
	let itm = GetManipulatedItem()
	let hero = GetManipulatingUnit()
	
	let idata = itm.getEntity()
	let edata = hero.getEntity()
	if idata instanceof ItemObject and not idata.done
		if edata instanceof Escaper and not edata.done
			(idata castTo ItemObject).onPickup(edata castTo Escaper)
				
function onItemDrop()
	let itm = GetManipulatedItem()
	let hero = GetManipulatingUnit()
	
	let idata = itm.getEntity()
	let edata = hero.getEntity()
	if idata instanceof ItemObject and not idata.done
		if edata instanceof Escaper and not edata.done
			(idata castTo ItemObject).onDrop(edata castTo Escaper)
				

init
	EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onItemPickup())
	EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM, () -> onItemDrop())
	EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM, () -> onItemUse())
	