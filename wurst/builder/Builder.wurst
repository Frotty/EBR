package Builder
import Entity
import public BuilderConstants
import public GameConstants
import initlater RegionData
import Key
import initlater InstantBuild
import Tome
import JukeBox
import initlater Weapon
import initlater Boss
import Boots

JukeBox jukeBox = new JukeBox()

public class Builder extends UnitEntity
	int regionCount = 0
	boolean hasBossMenu = false

	construct( player p )
		super(CreateUnit(p, BUILDER_1, -6000, -7160, 0))
		deactivate()
		registerListeners()
		this.setCurrentRegion()

	override function update()
		pos = actor.getPos().toVec3()

	override function setNewActor(unit u)
		super.setNewActor(u)
		if UnitItemInSlot(actor, 0) == null
			UnitAddItemById(actor,'I001')
			UnitAddItemById(actor,'I002')
			UnitAddItemById(actor,'I003')				
			SelectUnitForPlayerSingle( actor, owner )
		if hasBossMenu
			setBossMenu()

	function registerListeners()
		EventListener.add(actor, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onOrder())
		EventListener.add(actor, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> onOrder())
		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_CAST, () -> onCast())
		EventListener.add(actor, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, () -> GetTriggerUnit().remove())

	function onCast()
		var id = GetSpellAbilityId()
		let tpos = getSpellTargetPos()
		let rdata = getRegionData(tpos)
		if rdata == null
			return
		switch id
			case MENU_1
				setNewActor(createUnit(owner, BUILDER_1, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case MENU_2
				setNewActor(createUnit(owner, BUILDER_2, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case MENU_3
				setNewActor(createUnit(owner, BUILDER_3, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case MENU_4
				setNewActor(createUnit(owner, BUILDER_4, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case MENU_5
				setNewActor(createUnit(owner, BUILDER_2, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case MENU_6
				setNewActor(createUnit(owner, BUILDER_3, getPos(), GetUnitFacing(GetTriggerUnit()).asAngleDegrees()))
			case KEY_SPELL_ID
				if rdata.canBuild(owner)
					new Key(tpos, owner)
				else
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to place items in this region!") 
			case BOOTS_SPELL_ID
				if rdata.canBuild(owner)
					new Boots(tpos, owner)
				else
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to place items in this region!") 
			case TOME_SPELL_ID
				if rdata.canBuild(owner)
					new Tome(tpos, owner)
				else
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to place items in this region!") 
			case BM_BOSS_ID
				if rdata.canBuild(owner) and rdata.bossRegion
					if rdata.boss == null
						rdata.boss = new Boss(owner, tpos, rdata.getTypeSet().bossId)
					else
						DisplayTextToPlayer( owner, 0, 0, "|cffC51019You can only have one boss each region!") 
				else
					DisplayTextToPlayer( owner, 0, 0, "|cffC51019You are not allowed to place Boss objects in this region!") 
			case BM_SPELLTARGET_ID
				if rdata.canBuild(owner) and rdata.bossRegion
					new SpellTarget(tpos, owner)
			case BM_DAMAGER_ID
				if rdata.canBuild(owner) and rdata.bossRegion
					// new BossDamager(tpos, owner)
			case BM_WEAPON_ID
				if getRegionData(tpos).canBuild(owner) and getRegionData(tpos).bossRegion
					new WeaponObject(tpos, owner)
			default
				jukeBox.checkSpell(id)
	
	function setBossMenu()
		hasBossMenu = true
		actor.addAbility(MENU_BOSS)

	function onOrder()
		var i = GetOrderTargetItem()
		if i != null
			if GetTriggerUnit().getUserData() > 0
				var bdata = GetTriggerUnit().getUserData() castTo Builder
				var rdata = getRegionData(i.getPos())
				if rdata != null and i.getUserData() > 0
					if rdata.canBuild(bdata.owner)
						var idata = i.getEntity()
						if idata.typeId != 0
							idata.terminate()
						else
							i.remove()
				else 
					RemoveItem(i)
				actor.abortOrder()
		else
			widget w = GetOrderTarget()
			var ord = GetIssuedOrderId()
			var u = GetTriggerUnit()
			var ox = GetOrderPointX()
			var oy = GetOrderPointY()
			if isOrderBuildOrder(ord)
				getTimer()..start(0.01, function callback)
				..setData((new BuildData(u.getUserData() castTo Builder,
							 vec2(GetOrderPointX(), GetOrderPointY()), ord)castTo int))
			else if OrderId2String(ord) == "smart" or OrderId2String(ord) == "move"
				if w == null
					if ( ox > 0. or ox < 0. )
						SetUnitX(u,ox)
						SetUnitY(u,oy)
				else
					SetUnitX(u,GetWidgetX(w))
					SetUnitY(u,GetWidgetY(w))
		
function filter() returns boolean
	return GetUnitTypeId(GetFilterUnit()) == 'n008'
	
function isBuilderUnit() returns boolean
	let id = GetUnitTypeId(GetTriggerUnit())
	return id == BUILDER_1 or id == BUILDER_2 or id == BUILDER_3 or id == BUILDER_4
	
public function init_Builder()	
	jukeBox.playNextMusic()
	