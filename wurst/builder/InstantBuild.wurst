package InstantBuild
import Builder
import EscaperKillers
import Door
import Arcanery
import Revivepoint
import Executer
import Vortex
import Powernode
import Tracks
import Jumper
import Teleporter
import Waypoint
import Spinner
import Unitcreator
import BomberTarget
import Trap
import Tree
import Texter
import Booster
import Obstacle
import Bombertower
import UnitRemover
import CongaLineHead
import TerrainBlocker
import Fountain
import Decoration
import Pedestal
import Knockbacker
import Pointer
import TeleporterTarget
import Key
import TerrainChanger
import Faceless
import public SerializeIds
import Bomber

public function isOrderBuildOrder( int o ) returns boolean
	int i = 1
	while buildorders[i] != 0
		if buildorders[i] == o
			return true 
		i++
	for i2 = 139 to 152
			if o == buildorders[i2]
				return true
	return false

public function instantBuild(Builder b, vec2 tpos, int id)
	var rdata = getRegionData(tpos)
	if rdata != null and rdata.canBuild(b.owner)
		var i = 1
		while buildorders[i] > 0
			if id == buildorders[i]
				newObjectFromId(b.owner, tpos, i, id)
				break
			i++
		// TODO remove
		for i2 = 139 to 152
			if id == buildorders[i2]
				newObjectFromId(b.owner, tpos, i2, id)
				break
	else
		DisplayTextToPlayer( b.owner, 0, 0, "|cffC51019You have no permission to build in this region!") 
	b.actor.abortOrder()

public function newObjectFromId(player owner, vec2 tpos, int id) returns Entity
	return newObjectFromId(owner, tpos, id, -1)

public function newObjectFromId(player owner, vec2 tpos, int id, int origId) returns Entity
	switch id
		case JUMPER_INDEX
			return new Jumper(tpos, owner)
		case REVIVE_INDEX
			return new RevivePoint(vec3(tpos.x,tpos.y, 0.), owner)
		case TEXTER_INDEX
			return new Texter(tpos, owner)
		case BOMBTOWER_INDEX
			return new Bombertower(tpos, owner)
		case VORTEX_INDEX
			return new Vortex(tpos, owner)
		case EXECUTER_INDEX
			return new Executer(tpos, owner)
		case BOOSTER_INDEX
			return new Booster(tpos, owner)
		case UNITREMOVER_INDEX
			return new UnitRemover(tpos, owner)
		case WAYPOINT_INDEX
			return new Waypoint(tpos, owner)
		case TELEPORTER_INDEX
			return new Teleporter(tpos, owner)
		case DOOR_INDEX
			return new Door(tpos, owner)
		case SMALLOBS_INDEX
			return new SmallObstacle(tpos, owner)
		case BIGOBS_INDEX
			return new BigObstacle(tpos, owner)
		case TREE_INDEX
			return new Tree(tpos, owner)
		case SPINNER_INDEX
			return new Spinner(tpos, owner)	
		case UNITCREATOR_INDEX
			return new UnitCreator(tpos, owner)
		case WALL_INDEX
			return new Decoration(tpos, owner,origId,270.)
		case TRACKS_INDEX
			return new Tracks(tpos, owner)	
		case FOUNTAIN_INDEX
			return new Fountain(tpos, owner)	
		case POWERNODE_INDEX
			return new Powernode(tpos, owner)	
		case TRAP_INDEX
			return new Trap(tpos, owner)	
		case HWALL_INDEX
			return new Decoration(tpos, owner,origId,270.)	
		case VWALL_INDEX
			return new Decoration(tpos, owner,origId,270.)
		case CONGA_INDEX
			return new CongaLineHead(tpos, owner)
		case TBLOCKER_INDEX
			return new TerrainBlocker(tpos, owner)
		case VOLCANO_INDEX
			return new VolcanoObstacle(tpos, owner)
		case 140
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 141
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 142
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 143
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 144
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 145
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 146
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 147
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 148
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 149
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 150
			return new Decoration(tpos, owner,origId,GetRandomReal(0, 360))
		case 151
			return new MemoryAccessPedestal(tpos, owner)
		case ARCANERY_INDEX
			return new Arcanery(tpos, owner)
		case SMALLKILL_INDEX
			return new SmallKiller(tpos,owner)
		case BIGKILL_INDEX
			return new BigKiller(tpos,owner)
		case BOMBER_INDEX
			return new Bomber(tpos,owner)
		case KEY_INDEX
			return new Key(tpos, owner)
		case SMALLRANDKILL_INDEX
			return new SmallRandomKiller(tpos, owner)
		case BIGRANDKILL_INDEX
			return new BigRandomKiller(tpos, owner)
		case TANKKILL_INDEX
			return new TankKiller(tpos, owner)
		case GLAIVEKILL_INDEX
			return new GlaiveKiller(tpos, owner)
		case FIREKILL_INDEX
			return new FireKiller(tpos, owner)
		case AIRKILL_INDEX
			return new AirKiller(tpos, owner)
		case KNOCKBACKER_INDEX
			return new Knockbacker(tpos, owner, angle(0))
		case FACELESS_INDEX
			return new Faceless(tpos, owner)
		case POINTER_INDEX
			return new Pointer(tpos, owner, angle(0))
		case TP_TARGET_INDEX
			return new TeleporterTarget(tpos, owner)
		case TC_INDEX
			return new TerrainChanger(tpos, owner)
		case TC_INDEX
			return new TerrainChanger(tpos, owner)
		case BOMBTARGET_INDEX
			return new BomberTarget(tpos, owner)
	return null

int array buildorders

@init1 function init_InstantBuild()
	buildorders[JUMPER_INDEX] = 'n00B' // Jumper
	buildorders[REVIVE_INDEX] = 'n000' // Revivepoint
	buildorders[TEXTER_INDEX] = 'n01B' // Texter
	buildorders[BOMBTOWER_INDEX] = 'h019' // BomberTower
	buildorders[VORTEX_INDEX] = 'n012' // Vortex
	buildorders[EXECUTER_INDEX] = 'n01D'  // Executer
	buildorders[BOOSTER_INDEX] = 'n00J' // Booster
	buildorders[UNITREMOVER_INDEX] = 'n003' // UnitRemover
	buildorders[WAYPOINT_INDEX] = 'n004' // Waypoint
	buildorders[TELEPORTER_INDEX] = 'n00C' // Teleporter
	buildorders[DOOR_INDEX] = 'h002' // Door
	buildorders[SMALLOBS_INDEX] = 'obSD' // Small Obstacle
	buildorders[BIGOBS_INDEX] = 'obBD' // Big Obstacle
	buildorders[TREE_INDEX] = 'n010' // Tree
	buildorders[SPINNER_INDEX] = 'h01M' // Spinner
	buildorders[UNITCREATOR_INDEX] = 'n006' // Unitcreator
	buildorders[TRACKS_INDEX] = 'n01C' // Tracks
	buildorders[FOUNTAIN_INDEX] = 'h00H' // Fountain
	buildorders[POWERNODE_INDEX] = 'h0nn' // Powernode
	buildorders[TRAP_INDEX] = 'n00I' // Trap
	buildorders[CONGA_INDEX] = 'h000' // Conga Line
	buildorders[TBLOCKER_INDEX] = 'h009' // TerrainBlocker
	buildorders[VOLCANO_INDEX] = 'n00K' // Volcano
	buildorders[WALL_INDEX] = 'n00P' // Wall
	buildorders[HWALL_INDEX] = 'n00Q' // Horizontal Wall
	buildorders[VWALL_INDEX] = 'n011' // Vertical Wall
	buildorders[ARCANERY_INDEX] = 'n002' // Arcanery
	buildorders[SMALLKILL_INDEX] = 'A05K' // Arcanery
	buildorders[BIGKILL_INDEX] = 'A05F' // Arcanery
	buildorders[BOMBER_INDEX] = 'A05O' // Arcanery
	buildorders[KEY_INDEX] = 'n002' // Arcanery
	buildorders[BOMBTARGET_INDEX] = 'A05P' // Arcanery
	buildorders[BIGRANDKILL_INDEX] = 'A05G' // Arcanery
	buildorders[SMALLRANDKILL_INDEX] = 'A05J' // Arcanery
	buildorders[TANKKILL_INDEX] = 'A05M' // Arcanery
	buildorders[GLAIVEKILL_INDEX] = 'A05H' // Arcanery
	buildorders[AIRKILL_INDEX] = 'A07Y' // Arcanery
	buildorders[FIREKILL_INDEX] = 'Afre' // Arcanery
	buildorders[FACELESS_INDEX] = 'A07U' // Arcanery
	buildorders[KNOCKBACKER_INDEX] = 'A07C' // Arcanery
	buildorders[POINTER_INDEX] = 'A05I' // Arcanery
	buildorders[TP_TARGET_INDEX] = 'A05N' // Arcanery
	buildorders[TC_INDEX] = 'A05L' // Arcanery
	buildorders[139] = 'fuck' // Lantern
	buildorders[140] = 'n00V' // Lantern
	buildorders[141] = 'n00U' // Mushroom
	buildorders[142] = 'n00Z' // Torch
	buildorders[143] = 'n00T' // Rune
	buildorders[144] = 'n01A' // Suppalight
	buildorders[145] = 'n00M' // Magic Lantern
	buildorders[146] = 'n014' // Farm
	buildorders[147] = 'n00G' // Hay
	buildorders[148] = 'n016' // Obelisk
	buildorders[149] = 'n015' // Poison eggs
	buildorders[150] = 'n017' // Remains
	buildorders[151] = PED_ID // Pedestal