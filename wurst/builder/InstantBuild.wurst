package InstantBuild
import Builder
import Entity
import Door
import RegionData
import Revivepoint
import Executer
import Vortex
import Powernode
import Tracks
import Jumper
import Teleporter
import Waypoint
import Spinner
import Unitcreator
import Trap
import Tree
import Texter
import Booster
import Obstacle


constant int dummy = 'h00G'
        
real x
real y
real ox
real oy
unit u
unit d
timer t = CreateTimer()
int ord
int array buildorders

    
function condition() returns boolean
    return (GetTriggerUnit().getUserData() castTo Entity) instanceof Builder
  

function isOrderBuildOrder( int o ) returns boolean
    int i = 0
    
    while buildorders[i] != 0
        if buildorders[i] == o
            return true 
        i++
    return false


function callback()
    SetUnitPosition(u,x,y)
    SetUnitX(u,ox)
    SetUnitY(u,oy)
    var owner = u.getOwner()
    var rdata = getRegionData(x, y)
    if rdata.isOwner(owner.getId())
		switch ord
	    	case buildorders[1]
	    		new Jumper(vec2(x,y), u.getOwner())
	    	case buildorders[2]
	    		new RevivePoint(vec2(x,y), u.getOwner())
	    	case buildorders[3]
	    		new Texter(vec2(x,y), u.getOwner())
	    	case buildorders[6]
	    		new Vortex(vec2(x,y), u.getOwner())
	    	case buildorders[8]
	        	new Executer(vec2(x,y), u.getOwner())
	        case buildorders[11]
	        	new Booster(vec2(x,y), u.getOwner())
	        case buildorders[13]
	        	new Waypoint(vec2(x,y), u.getOwner())
	        case buildorders[14]
	        	new Teleporter(vec2(x,y), u.getOwner())
	        case buildorders[15]
	        	new Door(vec2(x,y), u.getOwner())
	        case buildorders[16]
	        	new SmallObstacle(vec2(x,y), u.getOwner())
	        case buildorders[17]
	        	new BigObstacle(vec2(x,y), u.getOwner())
	    	case buildorders[18]
	        	new Tree(vec2(x,y), u.getOwner())
	        case buildorders[21]
	        	new Spinner(vec2(x,y), u.getOwner())	
	    	case buildorders[20]
	    		new Unitcreator(vec2(x,y), u.getOwner())
	        case buildorders[23]
	        	new Tracks(vec2(x,y), u.getOwner())	
	        case buildorders[25]
	        	new Powernode(vec2(x,y), u.getOwner())	
	        case buildorders[26]
	        	new Trap(vec2(x,y), u.getOwner())		
	        
	else
		DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to build in this region!") 
    d = null


function conac() 
    
    widget w = GetOrderTarget()
    ord = GetIssuedOrderId()
    u = GetTriggerUnit()
    var owner = u.getOwner()
    if isOrderBuildOrder(ord)
        x = GetLocationX(GetOrderPointLoc())
        y = GetLocationY(GetOrderPointLoc())
        ox = GetUnitX(u)
        oy = GetUnitY(u)
        TimerStart(t,0.00,false, function callback)
		

    else
        if w == null
            SetUnitX(u,GetOrderPointX())
            SetUnitY(u,GetOrderPointY())
            SetUnitFacing(u, angleBetweenCoordsD(GetUnitX(u), GetUnitY(u), GetOrderPointX(), GetOrderPointY()) )
        else
            SetUnitFacing( u, angleBetweenCoordsD( GetUnitX(u), GetUnitY(u), GetWidgetX(w), GetWidgetY(w) ) )
            SetUnitX(u,GetWidgetX(w))
            SetUnitY(u,GetWidgetY(w))


    w = null





init
    trigger trig = CreateTrigger()
    TriggerRegisterAnyUnitEventBJ( trig, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER )
    TriggerRegisterAnyUnitEventBJ( trig, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER )
    TriggerAddCondition( trig, Condition( function condition ) )
    TriggerAddAction( trig,  function conac  )
    
    buildorders[0] = 'n00G'
    buildorders[1] = 'n00B' // Jumper
    buildorders[2] = 'n000' // Revivepoint
    buildorders[3] = 'n01B' // Texter
    buildorders[4] = 'n001' 
    buildorders[5] = 'h019'
    buildorders[6] = 'n012' // Vortex
    buildorders[7] = 'h009'
    buildorders[8] = 'n01D'  // Executer
    buildorders[9] = 'n01E'
    buildorders[10] = 'n00F'
    buildorders[11] = 'n00J' // Booster
    buildorders[12] = 'n003'
    buildorders[13] = 'n004' // Waypoint
    buildorders[14] = 'n00C' // Teleporter
    buildorders[15] = 'h002' // Door
    buildorders[16] = 'obSD' // Small Obstacle
    buildorders[17] = 'obBD' // Big Obstacle
    buildorders[18] = 'n010' // Tree
    buildorders[19] = 'n013'
    buildorders[20] = 'n006' // Unitcreator
    buildorders[21] = 'h01M' // Spinner
    buildorders[22] = 'n00P'
    buildorders[23] = 'n01C' // Tracks
    buildorders[24] = 'h00H'
    buildorders[25] = 'h0nn' // Powernode
    buildorders[26] = 'n00I' // Trap

