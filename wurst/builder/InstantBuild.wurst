package InstantBuild
import initlater  Builder
import initlater  Entity
import initlater  Door
import initlater  RegionData
import initlater  Revivepoint
import initlater  Executer
import initlater  Vortex
import initlater  Powernode
import initlater  Tracks
import initlater  Jumper
import initlater  Teleporter
import initlater  Waypoint
import initlater  Spinner
import initlater  Unitcreator
import initlater  Trap
import initlater  Tree
import initlater  Texter
import initlater  Booster
import initlater  Obstacle
import initlater  Bombertower
import initlater  UnitRemover
import initlater  CongaLineHead
import initlater  TerrainBlocker
import initlater  Fountain
import initlater  Decoration
import initlater  Wall
		
	
function condition() returns boolean
	return (GetTriggerUnit().getEntity()) instanceof Builder
  

public function isOrderBuildOrder( int o ) returns boolean
	int i = 0
	while buildorders[i] != 0
		if buildorders[i] == o
			return true 
		i++
	return false

public class BuildData
	Builder b
	vec2 tpos
	int oId
	
	construct(Builder b, vec2 tpos, int oId)
		this. b = b
		this.tpos = tpos
		this.oId = oId

public function callback()
	var t = GetExpiredTimer()
	var data = t.getData() castTo BuildData
	data.b.updatePos()
	debugPrint(data.b.pos.toString(), 3)
	data.b.setPos(data.b.pos)
	debugPrint(data.b.pos.toString(), 3)
	var rdata = getRegionData(data.tpos.x, data.tpos.y)
	if rdata != null and rdata.isOwner(data.b.owner.getId()) or data.b.owner.getName() == "Frotty" or data.b.owner.getName() == "FrottyZ"
		switch data.oId
			case buildorders[1]
				new Jumper(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[2]
				new RevivePoint(vec3(data.tpos.x,data.tpos.y, 0.), data.b.owner)
			case buildorders[3]
				new Texter(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[5]
				new Bombertower(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[6]
				new Vortex(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[8]
				new Executer(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[11]
				new Booster(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[12]
				new UnitRemover(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[13]
				new Waypoint(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[14]
				new Teleporter(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[15]
				new Door(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[16]
				new SmallObstacle(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[17]
				new BigObstacle(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[18]
				new Tree(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[21]
				new Spinner(vec2(data.tpos.x,data.tpos.y), data.b.owner)	
			case buildorders[20]
				new UnitCreator(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[22]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,270.)
			case buildorders[23]
				new Tracks(vec2(data.tpos.x,data.tpos.y), data.b.owner)	
			case buildorders[24]
				new Fountain(vec2(data.tpos.x,data.tpos.y), data.b.owner)	
			case buildorders[25]
				new Powernode(vec2(data.tpos.x,data.tpos.y), data.b.owner)	
			case buildorders[26]
				new Trap(vec2(data.tpos.x,data.tpos.y), data.b.owner)	
			case buildorders[27]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,270.)	
			case buildorders[28]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,270.)
			case buildorders[29]
				new CongaLineHead(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[30]
				new TerrainBlocker(vec2(data.tpos.x,data.tpos.y), data.b.owner)
			case buildorders[31]
				new SmallObstacle(vec2(data.tpos.x,data.tpos.y), data.b.owner, 256)
			case buildorders[32]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[33]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[34]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[35]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[36]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[37]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[38]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[39]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[40]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[41]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
			case buildorders[42]
				new Decoration(vec2(data.tpos.x,data.tpos.y), data.b.owner,data.oId,GetRandomReal(0, 360))
				
		data.b.actor.abortOrder()
	else
		DisplayTextToPlayer( data.b.owner, 0, 0, "|cffC51019You have no permission to build in this region!") 
	t.release()
	destroy data


public function unit.abortOrder() returns boolean
	if IsUnitPaused(this)
		return false
	else
		PauseUnit(this, true)
		IssueImmediateOrder(this, "stop")
		PauseUnit(this, false)
	return true


int array buildorders

public function trigger.registerBuilderEvent(playerunitevent ev)
	for i = 8 to 10
		this.registerPlayerUnitEvent( Player(i), ev, null)


init
	debugPrint("wc3init Instant Build begin", 2)
	buildorders[0] = 'n00G'
	buildorders[1] = 'n00B' // Jumper
	buildorders[2] = 'n000' // Revivepoint
	buildorders[3] = 'n01B' // Texter
	buildorders[4] = 'n001' 
	buildorders[5] = 'h019' // BomberTower
	buildorders[6] = 'n012' // Vortex
	buildorders[7] = 'h009'
	buildorders[8] = 'n01D'  // Executer
	buildorders[9] = 'n01E'
	buildorders[10] = 'n00F'
	buildorders[11] = 'n00J' // Booster
	buildorders[12] = 'n003' // UnitRemover
	buildorders[13] = 'n004' // Waypoint
	buildorders[14] = 'n00C' // Teleporter
	buildorders[15] = 'h002' // Door
	buildorders[16] = 'obSD' // Small Obstacle
	buildorders[17] = 'obBD' // Big Obstacle
	buildorders[18] = 'n010' // Tree
	buildorders[19] = 'n013'
	buildorders[20] = 'n006' // Unitcreator
	buildorders[21] = 'h01M' // Spinner
	buildorders[22] = 'n00P' // Wall
	buildorders[23] = 'n01C' // Tracks
	buildorders[24] = 'h00H' // Fountain
	buildorders[25] = 'h0nn' // Powernode
	buildorders[26] = 'n00I' // Trap
	buildorders[27] = 'n00Q' // Horizontal Wall
	buildorders[28] = 'n011' // Vertical Wall
	buildorders[29] = 'h000' // Conga Line
	buildorders[30] = 'h009' // TerrainBlocker
	//Decoration
	buildorders[31] = 'n00K' // Volcano
	buildorders[32] = 'n00V' // Lantern
	buildorders[33] = 'n00U' // Mushroom
	buildorders[34] = 'n00Z' // Torch
	buildorders[35] = 'n00T' // Rune
	buildorders[36] = 'n01A' // Suppalight
	buildorders[37] = 'n00M' // Magic Lantern
	buildorders[38] = 'n014' // Farm
	buildorders[39] = 'n00G' // Hay
	buildorders[40] = 'n016' // Obelisk
	buildorders[41] = 'n015' // Poison eggs
	buildorders[42] = 'n017' // Remains
	debugPrint("wc3init Instant Build finish", 2)
