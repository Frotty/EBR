package InstantBuild
import Builder
import EscaperKillers
import Door
import Arcanery
import Revivepoint
import Executer
import Vortex
import Powernode
import Tracks
import Jumper
import Teleporter
import Waypoint
import Spinner
import Unitcreator
import Trap
import Tree
import Texter
import Booster
import Obstacle
import Bombertower
import UnitRemover
import CongaLineHead
import TerrainBlocker
import Fountain
import Decoration
import Pedestal
import Bomber

public function isOrderBuildOrder( int o ) returns boolean
	int i = 0
	while buildorders[i] != 0
		if buildorders[i] == o
			return true 
		i++
	return false

public function instantBuild(Builder b, vec2 tpos, int id)
	var rdata = getRegionData(tpos)
	if rdata != null and rdata.canBuild(b.owner)
		var i = 1
		while buildorders[i] > 0
			if id == buildorders[i]
				newObjectFromId(b.owner, tpos, i)
				break
			i++
	else
		DisplayTextToPlayer( b.owner, 0, 0, "|cffC51019You have no permission to build in this region!") 
	b.actor.abortOrder()

public function newObjectFromId(player owner, vec2 tpos, int id) returns Entity
	switch id
		case JUMPER_INDEX
			return new Jumper(tpos, owner)
		case REVIVE_INDEX
			return new RevivePoint(vec3(tpos.x,tpos.y, 0.), owner)
		case TEXTER_INDEX
			return new Texter(tpos, owner)
		case BOMBTOWER_INDEX
			return new Bombertower(tpos, owner)
		case VORTEX777_INDEX
			return new Vortex(tpos, owner)
		case EXECUTER_INDEX
			return new Executer(tpos, owner)
		case BOOSTER_INDEX
			return new Booster(tpos, owner)
		case UNITREMOVER_INDEX
			return new UnitRemover(tpos, owner)
		case WAYPOINT_INDEX
			return new Waypoint(tpos, owner)
		case TELEPORTER_INDEX
			return new Teleporter(tpos, owner)
		case DOOR_INDEX
			return new Door(tpos, owner)
		case SMALLOBS_INDEX
			return new SmallObstacle(tpos, owner)
		case BIGOBS_INDEX
			return new BigObstacle(tpos, owner)
		case TREE_INDEX
			return new Tree(tpos, owner)
		case SPINNER_INDEX
			return new Spinner(tpos, owner)	
		case UNITCREATOR_INDEX
			return new UnitCreator(tpos, owner)
		case DECORATION_INDEX
			return new Decoration(tpos, owner,id,270.)
		case TRACKS_INDEX
			return new Tracks(tpos, owner)	
		case FOUNTAIN_INDEX
			return new Fountain(tpos, owner)	
		case POWERNODE_INDEX
			return new Powernode(tpos, owner)	
		case TRAP_INDEX
			return new Trap(tpos, owner)	
		case 27
			return new Decoration(tpos, owner,id,270.)	
		case 28
			return new Decoration(tpos, owner,id,270.)
		case 29
			return new CongaLineHead(tpos, owner)
		case CONGA_INDEX
			return new TerrainBlocker(tpos, owner)
		case TBLOCKER_INDEX
			return new VolcanoObstacle(tpos, owner)
		case VOLCANO_INDEX
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 33
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 34
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 35
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 36
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 37
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 38
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 39
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 40
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 41
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 42
			return new Decoration(tpos, owner,id,GetRandomReal(0, 360))
		case 43
			return new MemoryAccessPedestal(tpos, owner)
		case ARCANERY_INDEX
			return new Arcanery(tpos, owner)
		case SMALLKILL_INDEX
			new SmallKiller(tpos,owner)
		case BIGKILL_INDEX
			new BigKiller(tpos,owner)
		case BOMBER_INDEX
			new Bomber(tpos,owner)
	return null


int array buildorders

@init1 function init_InstantBuild()
	buildorders[0] = 'n00G'
	buildorders[1] = 'n00B' // Jumper
	buildorders[2] = 'n000' // Revivepoint
	buildorders[3] = 'n01B' // Texter
	buildorders[4] = 'n001' 
	buildorders[5] = 'h019' // BomberTower
	buildorders[6] = 'n012' // Vortex
	buildorders[7] = 'h009'
	buildorders[8] = 'n01D'  // Executer
	buildorders[9] = 'n01E'
	buildorders[10] = 'n00F'
	buildorders[11] = 'n00J' // Booster
	buildorders[12] = 'n003' // UnitRemover
	buildorders[13] = 'n004' // Waypoint
	buildorders[14] = 'n00C' // Teleporter
	buildorders[15] = 'h002' // Door
	buildorders[16] = 'obSD' // Small Obstacle
	buildorders[17] = 'obBD' // Big Obstacle
	buildorders[18] = 'n010' // Tree
	buildorders[19] = 'n013'
	buildorders[20] = 'n006' // Unitcreator
	buildorders[21] = 'h01M' // Spinner
	buildorders[22] = 'n00P' // Wall
	buildorders[23] = 'n01C' // Tracks
	buildorders[24] = 'h00H' // Fountain
	buildorders[25] = 'h0nn' // Powernode
	buildorders[26] = 'n00I' // Trap
	buildorders[27] = 'n00Q' // Horizontal Wall
	buildorders[28] = 'n011' // Vertical Wall
	buildorders[29] = 'h000' // Conga Line
	buildorders[30] = 'h009' // TerrainBlocker
	//Decoration
	buildorders[31] = 'n00K' // Volcano
	buildorders[32] = 'n00V' // Lantern
	buildorders[33] = 'n00U' // Mushroom
	buildorders[34] = 'n00Z' // Torch
	buildorders[35] = 'n00T' // Rune
	buildorders[36] = 'n01A' // Suppalight
	buildorders[37] = 'n00M' // Magic Lantern
	buildorders[38] = 'n014' // Farm
	buildorders[39] = 'n00G' // Hay
	buildorders[40] = 'n016' // Obelisk
	buildorders[41] = 'n015' // Poison eggs
	buildorders[42] = 'n017' // Remains
	buildorders[43] = PED_ID // Pedestal
	buildorders[44] = 'n002' // Arcanery
