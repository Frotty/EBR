package TerrainModder
//The Terrainers appear as heroes, and which with the builders change tiles.
import ChannelAbilityPreset
import PlayerData

public constant int ICECONTROL = 'H007'
public constant int ICEUNCONTROL = 'H008'
public constant int UNWALKABLE = 'H005'
public constant int WALKABLE = 'H004'

constant int ICE_ABILITY = 'A063'
constant int REVICE_ABILITY = 'A00C'
int array UNWALKABLE_MOD_ABILITY_ID

public int BRUSH_1_IDLE_ABILITY
public int BRUSH_1_ACTIVE_ABILITY
public int BRUSH_3_IDLE_ABILITY
public int BRUSH_3_ACTIVE_ABILITY
public int BRUSH_5_IDLE_ABILITY
public int BRUSH_5_ACTIVE_ABILITY
public int BRUSH_CIRCLE_ID
public int BRUSH_RECT_ID

trigger castTrigger


public class TerrainModder extends UnitEntity
	int brushsize = 0
	TShape brushshape = TShape.RECT
	int modification = 0// 0 = basic terrain, 1 = lava/revice 2 = poison

	construct(unit u)
		super(u)
		actor..setPos(hiddenX, hiddenY)..setPropWindow(0.)
		..addAbility(BRUSH_1_ACTIVE_ABILITY)..addAbility(BRUSH_3_IDLE_ABILITY)..addAbility(BRUSH_5_IDLE_ABILITY)
		..addAbility(BRUSH_RECT_ID)

		EventListener.add(actor, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> changeTerrain())
		EventListener.add(actor, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> changeTerrain())
		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> switchMode())

	function changeTerrain()
		var orderPos = getOrderPos()
		var oW = GetOrderTarget()
		
		if oW != null
			orderPos = oW.getPos()
		 
		var rdata = getRegionData(orderPos)
		if rdata == null
			return
		let owner = actor.getOwner()
		let id = GetUnitTypeId(actor)
		if rdata.canBuild(owner)
			idleSeconds = 0
			if id == ICECONTROL
				if modification == 1
					orderPos.changeTerrain(REVICE, brushsize, brushsize, brushshape, owner)
				else
					orderPos.changeTerrain(CONTROLLABLEICE, brushsize, brushsize, brushshape, owner)
			else if id == ICEUNCONTROL
				orderPos.changeTerrain(UNCONTROLLABLEICE, brushsize, brushsize, brushshape, owner)
			else if id == WALKABLE
				orderPos.changeTerrain(rdata.getTypeSet().walkableId, brushsize, brushsize, brushshape, owner)
			else if id == UNWALKABLE
				if modification == 0
					orderPos.changeTerrain(rdata.getTypeSet().unwalkableId, brushsize, brushsize, brushshape, owner)
				else if modification == 1
					orderPos.changeTerrain(LAVA, brushsize, brushsize, brushshape, owner)
				else if modification == 2
					orderPos.changeTerrain(POISON, brushsize, brushsize, brushshape, owner)
		else
			DisplayTextToPlayer( owner, 0, 0, "|cffC51019You have no permission to change terrain in this region!")

	override function slowUpdate()
		super.slowUpdate()
		if idleSeconds > 20 and brushsize > 0
			idleSeconds = 0
			removeAllActive()
			actor..removeAbility(BRUSH_1_IDLE_ABILITY)
			..addAbility(BRUSH_1_ACTIVE_ABILITY)
			brushsize = 0

	function switchMode()
		let spell_id = GetSpellAbilityId()
		switch spell_id
			case UNWALKABLE_MOD_ABILITY_ID[1]
				UnitRemoveAbility(actor,UNWALKABLE_MOD_ABILITY_ID[1])
				UnitAddAbility(actor,UNWALKABLE_MOD_ABILITY_ID[modification])
				modification = 1
				DisplayTextToPlayer( GetOwningPlayer( GetSpellAbilityUnit() ), 0, 0, "Poison")
			case UNWALKABLE_MOD_ABILITY_ID[2]
				UnitRemoveAbility(actor,UNWALKABLE_MOD_ABILITY_ID[2])
				UnitAddAbility(actor,UNWALKABLE_MOD_ABILITY_ID[modification])
				modification = 2
				DisplayTextToPlayer( GetOwningPlayer( GetSpellAbilityUnit() ), 0, 0, "Lava")
			case UNWALKABLE_MOD_ABILITY_ID[0]
				UnitRemoveAbility(actor,UNWALKABLE_MOD_ABILITY_ID[0])
				UnitAddAbility(actor,UNWALKABLE_MOD_ABILITY_ID[modification])
				modification = 0
				DisplayTextToPlayer( GetOwningPlayer( GetSpellAbilityUnit() ), 0, 0, "Normal")
			case ICE_ABILITY
				UnitRemoveAbility(actor,ICE_ABILITY)
				UnitAddAbility(actor,REVICE_ABILITY)
				modification = 0
				DisplayTextToPlayer( GetOwningPlayer( GetSpellAbilityUnit() ), 0, 0, "Normal")
			case REVICE_ABILITY
				UnitRemoveAbility(actor,REVICE_ABILITY)
				UnitAddAbility(actor,ICE_ABILITY)
				modification = 1
				DisplayTextToPlayer( GetOwningPlayer( GetSpellAbilityUnit() ), 0, 0, "Reverse")
			case BRUSH_1_IDLE_ABILITY
				removeAllActive()
				actor..removeAbility(BRUSH_1_IDLE_ABILITY)
				..addAbility(BRUSH_1_ACTIVE_ABILITY)
				brushsize = 0
			case BRUSH_3_IDLE_ABILITY
				removeAllActive()
				actor..removeAbility(BRUSH_3_IDLE_ABILITY)
				..addAbility(BRUSH_3_ACTIVE_ABILITY)
				brushsize = 1
			case BRUSH_5_IDLE_ABILITY
				removeAllActive()
				actor..removeAbility(BRUSH_5_IDLE_ABILITY)
				..addAbility(BRUSH_5_ACTIVE_ABILITY)
				brushsize = 2
			case BRUSH_RECT_ID
				brushshape = TShape.CIRCLE
				actor..removeAbility(BRUSH_RECT_ID)
				..addAbility(BRUSH_CIRCLE_ID)
			case BRUSH_CIRCLE_ID
				brushshape = TShape.RECT
				actor..removeAbility(BRUSH_CIRCLE_ID)
				..addAbility(BRUSH_RECT_ID)
			default
			
	function removeAllActive()
		if actor.removeAbility(BRUSH_1_ACTIVE_ABILITY)
			actor.addAbility(BRUSH_1_IDLE_ABILITY)
		if actor.removeAbility(BRUSH_3_ACTIVE_ABILITY)
			actor.addAbility(BRUSH_3_IDLE_ABILITY)
		if actor.removeAbility(BRUSH_5_ACTIVE_ABILITY)
			actor.addAbility(BRUSH_5_IDLE_ABILITY)
			
enum TShape
	RECT
	CIRCLE

public function vec2.changeTerrain(int ttype, int hsize, int vsize, TShape shape, player caster)
	switch shape
		case RECT
			this.changeRect(ttype, hsize, vsize, caster)
		case CIRCLE
			this.changeCircle(ttype, hsize, vsize, caster)
			
			
public function vec2.changeRect(int ttype, int hsize, int vsize, player caster)
	let hhalf = (hsize*2) div 2
	let vhalf = (vsize*2) div 2
	for i = -hhalf to hhalf
		for j = -vhalf to vhalf
			this.setTerrain(ttype, vec2(i * 128., j * 128.), caster)
				
public function vec2.changeCircle(int ttype, int hsize, int vsize, player caster)
	let hhalf = (hsize*2) div 2
	let vhalf = (vsize*2) div 2
	for i = -hhalf to hhalf
		for j = -vhalf to vhalf
			if i == 0 or j == 0
				this.setTerrain(ttype, vec2(i * 128., j * 128.), caster)
	if vsize > 1 and hsize > 1
		this.changeRect(ttype, 1, 1, caster)
			
public function vec2.setTerrain(int ttype, vec2 off, player caster)
	var offset = this + off
	offset.x = (offset.x / 128).round() * 128.
	offset.y = (offset.y / 128).round() * 128.
	let rdata = getRegionData(offset)
	if rdata != null and rdata.canBuild(caster)
		offset.setTerrainType(ttype, -1, 1, 0)

@init1 function init_TerrainModder()
	UNWALKABLE_MOD_ABILITY_ID[0] = 'A04Z'
	UNWALKABLE_MOD_ABILITY_ID[1] = 'A04Y'
	UNWALKABLE_MOD_ABILITY_ID[2] = 'A04X'
	
@objectgen public function genBrushAbils()
	BRUSH_1_IDLE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_1_ACTIVE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_3_IDLE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_3_ACTIVE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_5_IDLE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_5_ACTIVE_ABILITY = ABIL_ID_GEN.next()
	BRUSH_CIRCLE_ID = ABIL_ID_GEN.next()
	BRUSH_RECT_ID = ABIL_ID_GEN.next()
	
	if compiletime
		new ChannelAbilityPreset(BRUSH_1_IDLE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("1x1 Brush Idle")
		..presetIcon("BTN1x1inactive")
		..presetHotkey("Y")
		..presetTooltipNormal((int lvl) -> "|cffFF8C291|rx|cffFF8C291 |rBrush Size [|cffFFCC00Y|r]")
		..presetTooltipNormalExtended((int lvl) -> "|cffFFCC00Click to select")
		..presetButtonPosNormal(0, 2)
		
		new ChannelAbilityPreset(BRUSH_1_ACTIVE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("1x1 Brush Active")
		..presetIcon("BTN1x1active")
		..presetHotkey("Y")
		..presetTooltipNormal((int lvl) -> "|cffFF8C291|rx|cffFF8C291 |rBrush Size |cffFFCC00Selected!")
		..presetTooltipNormalExtended((int lvl) -> "")
		..presetButtonPosNormal(0, 2)
		
		new ChannelAbilityPreset(BRUSH_3_IDLE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("3x3 Brush Idle")
		..presetIcon("BTN3x3inactive")
		..presetHotkey("X")
		..presetTooltipNormal((int lvl) -> "|cffFF8C293|rx|cffFF8C293 |rBrush Size [|cffFFCC00X|r]")
		..presetTooltipNormalExtended((int lvl) -> "|cffFFCC00Click to select")
		..presetButtonPosNormal(1, 2)
		
		new ChannelAbilityPreset(BRUSH_3_ACTIVE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("3x3 Brush Active")
		..presetIcon("BTN3x3active.blp")
		..presetHotkey("X")
		..presetTooltipNormal((int lvl) -> "|cffFF8C293|rx|cffFF8C293 |rBrush Size |cffFFCC00Selected!")
		..presetTooltipNormalExtended((int lvl) -> "")
		..presetButtonPosNormal(1, 2)
		
		new ChannelAbilityPreset(BRUSH_5_IDLE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("5x5 Brush Idle")
		..presetIcon("BTN5x5inactive.blp")
		..presetHotkey("C")
		..presetTooltipNormal((int lvl) -> "|cffFF8C295|rx|cffFF8C295 |rBrush Size [|cffFFCC00C|r]")
		..presetTooltipNormalExtended((int lvl) -> "|cffFFCC00Click to select")
		..presetButtonPosNormal(2, 2)
		
		new ChannelAbilityPreset(BRUSH_5_ACTIVE_ABILITY, 1, true)
		..makeUnitSpell(0,0)
		..setName("3x3 Brush Active")
		..presetIcon("BTN5x5active.blp")
		..presetHotkey("C")
		..presetTooltipNormal((int lvl) -> "|cffFF8C295|rx|cffFF8C295 |rBrush Size |cffFFCC00Selected!")
		..presetTooltipNormalExtended((int lvl) -> "")
		..presetButtonPosNormal(2, 2)
		
		new ChannelAbilityPreset(BRUSH_RECT_ID, 1, true)
		..makeUnitSpell(0,0)
		..setName("Rectengular Brush Shape")
		..presetIcon("BTNrectangle")
		..presetHotkey("A")
		..presetTooltipNormal((int lvl) -> "|cffFF8C29Rectangular |cffF7F7F7brush |cffFFCC00selected")
		..presetTooltipNormalExtended((int lvl) -> "|cffFFCC00Click to change to circular brush")
		..presetButtonPosNormal(0, 1)
		
		new ChannelAbilityPreset(BRUSH_CIRCLE_ID, 1, true)
		..makeUnitSpell(0,0)
		..setName("Circular Brush Shape")
		..presetIcon("BTNcircle")
		..presetHotkey("A")
		..presetTooltipNormal((int lvl) -> "|cffFF8C29Circular |cffF7F7F7brush |cffFFCC00selected")
		..presetTooltipNormalExtended((int lvl) -> "|cffFFCC00Click to change to rectangular brush")
		..presetButtonPosNormal(0, 1)
		
